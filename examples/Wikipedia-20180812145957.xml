<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.32.0-wmf.16</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Doctor Who</title>
    <ns>0</ns>
    <id>8209</id>
    <revision>
      <id>854602616</id>
      <parentid>854597906</parentid>
      <timestamp>2018-08-12T14:41:49Z</timestamp>
      <contributor>
        <username>TedEdwards</username>
        <id>21302502</id>
      </contributor>
      <comment>Reverted [[WP:AGF|good faith]] edits by [[Special:Contributions/2A00:23C5:EF10:6500:C187:5980:C86A:564F|2A00:23C5:EF10:6500:C187:5980:C86A:564F]]: Has not yet been main doctor, wait couple of months. ([[WP:TW|TW]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="157875">{{About|the television series}}
{{Use British English|date=November 2013}}
{{Use dmy dates|date=July 2018}}
{{Infobox television
| show_name            = Doctor Who
| image                = Doctor Who - Current Titlecard.png&lt;!-- PLEASE DON'T REPLACE THIS UNTIL THE DISCUSSION ON THE TALK PAGE COMES TO A CONSENSUS--&gt;
| caption              = ''Doctor Who'' title card (2014–17)
| genre                = [[Science fiction]]&lt;br&gt;[[Drama]]
| creator              = {{unbulleted list|[[Sydney Newman]]|[[C. E. Webber]]|[[Donald Wilson (writer and producer)|Donald Wilson]]}}
| writer               = [[List of Doctor Who writers|Various]]
| starring             = '''[[List of actors who have played the Doctor|Various Doctors]]'''&lt;br /&gt;(as of 2017&lt;!--As of year of latest episode--&gt;, [[Jodie Whittaker]])&lt;br /&gt;'''[[Companion (Doctor Who)|Various companions]]'''
| theme_music_composer = {{unbulleted list|[[Ron Grainer]]}}
| opentheme            = [[Doctor Who theme music|''Doctor Who'' theme music]]
| composer             = [[List of Doctor Who composers|Various composers]]&lt;!--&lt;br /&gt;(since 2018, Segun Akinola)--&gt;
| country              = [[United Kingdom]]
| num_seasons          = 26 (1963–1989)&lt;br&gt;+ 1 TV film (1996) &lt;!-- Please do not change to series. It is well documented that this term was used through 1989 --&gt;
| num_series           = 10 (2005–present)
| num_episodes         = {{DW episode count}} ([[Doctor Who missing episodes|97 missing]]) &lt;!--As of 23 August 2014. Does not count "The Infinite Quest" or ''Dreamland'' or other spin-offs. Do not report fewer than 97 missing episodes until this has been reliably confirmed.--&gt;&lt;br&gt;{{DW episode count|story}} stories&lt;br /&gt;([[List of Doctor Who episodes (1963–1989)|1963–89 episodes]])&lt;br /&gt;([[List of Doctor Who episodes (2005–present)|2005–pres. episodes]])
| executive_producer   = [[List of Doctor Who producers#Executive producer credits|Various]]
| camera               = [[Multiple-camera setup|Single/multiple-camera hybrid]]
| runtime              = '''Regular episodes:'''&lt;br /&gt;{{unbulleted list|25 minutes (1963–1984, 1986–1989)|45 minutes (1985, 2005–2017)}}'''Specials:'''&lt;br /&gt;Various: 50–90 minutes
| network              = {{unbulleted list|[[BBC One]] (1963–present)|[[BBC One HD]] (2010–present)|[[BBC HD]] (2007–2010)}}
| picture_format       = {{unbulleted list|[[405-line television system|405-line]] [[Black-and-white]] (1963–67)|[[576i|625-line]] Black-and-white (1968–1969)|625-line [[PAL]] (1970–1989)|[[480i|525-line]] [[NTSC]] (1996)|[[576i]] [[Aspect ratio (image)|16:9]] [[Digital television|DTV]] (2005–2008)|[[1080i]] [[High-definition television|HDTV]] (2009–present)}}
| audio_format         = {{unbulleted list|[[Mono sound|Mono]] (1963–1987)|[[Stereophonic sound|Stereo]] (1988–2008)|[[5.1 Surround Sound]] (2009–present)}}
| first_aired          = {{Start date|1963|11|23|df=y}}
| last_aired           = {{End date|present|df=y}}
| distributor = [[BBC]]
| related              = {{unbulleted list|''[[K-9 and Company]]''|''[[Torchwood]]''|''[[The Sarah Jane Adventures]]''|''[[K-9 (TV series)|K-9]]''|''[[Class (2016 TV series)|Class]]''}}
| website              = http://www.bbc.co.uk/doctorwho/
| website_title        = ''Doctor Who'' at the BBC
}}

'''''Doctor Who''''' is a [[British television science fiction|British]] [[science fiction on television|science-fiction television]] programme produced by the [[BBC]] since 1963. The programme depicts the adventures of a [[Time Lord]] called "[[The Doctor (Doctor Who)|the Doctor]]", an [[Extraterrestrial life|extraterrestrial being]] from the planet [[Gallifrey]]. The Doctor explores the universe in a [[time-travelling]] [[spacecraft|space ship]] called the [[TARDIS]]. Its exterior appears as a blue British [[police box]], which was a common sight in Britain in 1963 when the series first aired. Accompanied by [[Companion (Doctor Who)|a number of companions]], the Doctor combats [[List of Doctor Who villains|a variety of foes]], while working to save civilisations&lt;!-- This is acceptable spelling in British English. Please use this spelling consistently. --&gt; and help people in need.

The show is a significant part of [[British popular culture]],&lt;ref&gt;{{cite journal|date=14 September 2006 |title=The end of Olde Englande: A lament for Blighty |journal=[[The Economist]] |url=http://www.economist.com/world/britain/displaystory.cfm?story_id=7912946 |accessdate=18 September 2006 }}&lt;br /&gt;{{cite web|title=ICONS. A Portrait of England |url=http://www.icons.org.uk/theicons/collection/doctor-who |accessdate=10 November 2007 |deadurl=yes |archiveurl=https://web.archive.org/web/20071103085551/http://www.icons.org.uk/theicons/collection/doctor-who |archivedate=3 November 2007 |df= }}&lt;/ref&gt;&lt;ref name="Moran"&gt;{{cite news|first=Caitlin|last=Moran|authorlink=Caitlin Moran|title=Doctor Who is simply masterful|url=http://entertainment.timesonline.co.uk/tol/arts_and_entertainment/tv_and_radio/article1989181.ece|work=The Times|location=London|date=30 June 2007|accessdate=1 July 2007|quote=[''Doctor Who''] is as thrilling and as loved as ''Jolene'', or bread and cheese, or honeysuckle, or Friday. It's quintessential to being British.|deadurl=bot: unknown|archiveurl=https://web.archive.org/web/20081013175631/http://entertainment.timesonline.co.uk/tol/arts_and_entertainment/tv_and_radio/article1989181.ece|archivedate=13 October 2008}}&lt;/ref&gt; and elsewhere it has gained a [[cult following]]. It has influenced generations of British television professionals, many of whom grew up watching the series.&lt;ref&gt;{{cite video|title=Do You Remember the First Time?|series=Doctor Who Confidential|serieslink=Doctor Who Confidential|url=http://www.bbc.co.uk/doctorwho/confidential/episodes/episode_310.shtml|network=[[BBC]]|station=BBC Three|quote=Director and presenter: [[David Tennant]]|airdate=9 June 2007}}&lt;/ref&gt; The programme originally ran from 1963 to 1989. There was an unsuccessful attempt to revive regular production in 1996 with a [[Television pilot#Backdoor pilot|backdoor pilot]], in the form of a television film titled ''[[Doctor Who (film)|Doctor Who]]''. The programme was [[History of Doctor Who#2000s|relaunched in 2005]], and since then has been produced in-house by [[BBC Cymru Wales|BBC Wales]] in [[Cardiff]]. ''Doctor Who'' has also spawned numerous [[Doctor Who spin-offs|spin-offs]], including comic books, films, novels, audio dramas, and the television series ''[[Torchwood]]'' (2006–2011), ''[[The Sarah Jane Adventures]]'' (2007–2011), ''[[K-9 (TV series)|K-9]]'' (2009–2010), and ''[[Class (2016 TV series)|Class]]'' (2016), and has been the subject of many parodies and references in popular culture.

Twelve actors have headlined the series as the Doctor. The transition from one actor to another is written into the plot of the show with the [[Regeneration (Doctor Who)|concept of regeneration]] into a new [[incarnation]] – a [[plot device]] where a Time Lord whose body is too badly harmed to heal normally, can instead recover by transforming into a "new" body. Each actor's portrayal differs, but all represent stages in the life of the same character and form a single lifetime with a single narrative. The time-travelling feature of the plot means that different incarnations of the Doctor occasionally meet. The Doctor is currently portrayed by [[Jodie Whittaker]], who took on the role after [[Peter Capaldi]]'s exit in the 2017 Christmas special "[[Twice Upon a Time (Doctor Who)|Twice Upon a Time]]".

{{TOC limit|3}}

==Premise==
''Doctor Who'' follows the adventures of the primary character, a rogue [[Time Lord]] from the planet [[Gallifrey]], who goes by the name "[[The Doctor (Doctor Who)|the Doctor]]". The Doctor fled Gallifrey in a stolen [[TARDIS]]&amp;nbsp;– "Time and Relative Dimension in Space"&amp;nbsp;– a [[time travel|time machine]] that travels by materialising into and dematerialising out of the time vortex. The TARDIS has a vast interior but appears smaller on the outside, and is equipped with a "chameleon circuit" intended to make the machine take on the appearance of local objects as a disguise; due to a malfunction, the Doctor's TARDIS remains fixed as a blue British [[police box]].

The Doctor often finds events that pique their curiosity and tries to prevent evil forces from harming innocent people or changing history, using only ingenuity and minimal resources, such as the versatile [[sonic screwdriver]]. The Doctor rarely travels alone and often brings one or more [[Companion (Doctor Who)|companions]] to share these adventures. These companions are usually humans, owing to the Doctor's fascination with planet Earth, which also leads to frequent collaborations with the international military task force [[UNIT]] when the Earth is threatened. As a Time Lord, the Doctor is centuries old and has the ability to [[Regeneration (Doctor Who)|regenerate]] in case of mortal damage to the body, taking on a new appearance and personality. The Doctor has gained numerous reoccurring enemies during their travels, including the [[Dalek]]s, the [[Cybermen]], and [[The Master (Doctor Who)|the Master]], another renegade Time Lord.

==History==
{{Main|History of Doctor Who}}
''Doctor Who'' first appeared on [[BBC One|BBC TV]] at 17:16:20 [[Greenwich Mean Time|GMT]] on Saturday, 23 November 1963; this was eighty seconds later than the scheduled programme time, due to the assassination of [[John F. Kennedy]] the previous day.&lt;ref&gt;Howe, Stammers, Walker (1994), p. 54&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.bbc.co.uk/doctorwho/classic/episodeguide/unearthlychild/detail.shtml|title=An Unearthly Child|publisher=BBC|date=16 August 2012}}&lt;/ref&gt; It was to be a regular weekly programme, each episode 25 minutes of transmission length. Discussions and plans for the programme had been in progress for a year. The [[BBC television drama|head of drama]] [[Sydney Newman]] was mainly responsible for developing the programme, with the first format document for the series being written by Newman along with the head of the script department (later head of serials) [[Donald Wilson (writer and producer)|Donald Wilson]] and staff writer [[C. E. Webber]]. Writer [[Anthony Coburn]], [[Script editor|story editor]] [[David Whitaker (screenwriter)|David Whitaker]] and initial producer [[Verity Lambert]] also heavily contributed to the development of the series.&lt;ref&gt;Howe, Stammers, Walker (1994), pp. 157–230 ("Production Diary")&lt;/ref&gt;&lt;ref group=note&gt;Newman is often given sole creator credit for the series. Some reference works such as ''The Complete Encyclopedia of Television Programs 1947–1979'' by Vincent Terrace erroneously credit Terry Nation with creating ''Doctor Who'', because of the way his name is credited in the two Peter Cushing films.{{Citation needed|date=December 2013}}&lt;br /&gt;Newman and Lambert's role in originating the series was recognised in the 2007 episode "[[Human Nature (Doctor Who episode)|Human Nature]]", in which the Doctor, in disguise as a human named John Smith, gives his parents' names as Sydney and Verity.{{Citation needed|date=December 2013}}&lt;/ref&gt; The programme was originally intended to appeal to a family audience,&lt;ref&gt;Howe, Stammers, Walker (1992), p. 3.&lt;/ref&gt; as an educational programme using time travel as a means to explore scientific ideas and famous moments in history. On 31 July 1963 Whitaker commissioned [[Terry Nation]] to write a story under the title ''The Mutants''. As originally written, the [[Dalek]]s and [[Thal (Doctor Who)|Thal]]s were the victims of an alien [[neutron bomb]] attack but Nation later dropped the aliens and made the Daleks the aggressors. When the script was presented to Newman and Wilson it was immediately rejected as the programme was not permitted to contain any "[[bug-eyed monster]]s". According to producer Verity Lambert; "We didn't have a lot of choice&amp;nbsp;— we only had the Dalek serial to go&amp;nbsp;... We had a bit of a crisis of confidence because Donald [Wilson] was so adamant that we shouldn't make it. Had we had anything else ready we would have made that." Nation's script became the second ''Doctor Who'' serial&amp;nbsp;– ''[[The Daleks]]'' (a.k.a. ''The Mutants''). The serial introduced the eponymous aliens that would become the series' most popular monsters, and was responsible for the BBC's first merchandising boom.&lt;ref&gt;Steve Tribe, James Goss ''Dr Who: The Dalek Handbook'' [[BBC Books]] [[Random House]] 2011 {{ISBN|978-1-84990-232-8}} Pg9&lt;/ref&gt;

The BBC drama department's serials division produced the programme for 26 seasons, broadcast on [[BBC One|BBC 1]]. Falling viewing numbers, a decline in the public perception of the show and a less-prominent transmission slot saw production suspended in 1989 by [[Jonathan Powell (producer)|Jonathan Powell]], controller of BBC 1.&lt;ref name="powell"&gt;{{cite news|url=http://media.guardian.co.uk/bbc/story/0,,1511487,00.html|title=Doctor Who makes the Grade|first=Jason|last=Deans|work=The Guardian|quote=But Mr Grade was not at the helm when Doctor Who was finally retired for good in 1989&amp;nbsp;— that decision fell to the then BBC1 controller, Jonathan Powell.|date=21 June 2005|accessdate=4 February 2007|location=London}}&lt;/ref&gt; Although it was effectively [[cancellation (television)|cancelled]] with the decision not to commission a planned 27th series of the show for transmission in 1990, the BBC repeatedly affirmed that the series would return.&lt;ref name="8thdrspecial"/&gt;

While in-house production had ceased, the BBC hoped to find an independent production company to relaunch the show. [[Philip Segal]], a British [[expatriate]] who worked for [[Columbia Pictures]]' television arm in the United States, had approached the BBC about such a venture as early as July 1989, while the 26th series was still in production.&lt;ref name="8thdrspecial"&gt;Doctor Who Magazine Eighth Doctor Special, Panini Comics 2003&lt;/ref&gt; Segal's negotiations eventually led to a [[Doctor Who (film)|''Doctor Who'' television film]], broadcast on the [[Fox Broadcasting Company|Fox Network]] in 1996 as an [[international co-production]] between Fox, [[Universal Studios|Universal Pictures]], the BBC and [[BBC Worldwide]]. Although the film was successful in the UK (with 9.1&amp;nbsp;million viewers), it was less so in the United States and did not lead to a series.&lt;ref name="8thdrspecial" /&gt;

Licensed media such as novels and audio plays provided [[Doctor Who spin-offs|new stories]], but as a television programme ''Doctor Who'' remained dormant until 2003. In September of that year,&lt;ref&gt;{{cite news|last=Gibson|first=Owen|title=Doctor Who returns to BBC1 screens|url=https://www.theguardian.com/media/2003/sep/26/bbc.broadcasting|work=The Guardian|accessdate=20 January 2012|date=26 September 2003|location=London}}&lt;/ref&gt; [[BBC Television]] announced the in-house production of a new series after several years of attempts by BBC Worldwide to find backing for a feature film version. The executive producers of the new incarnation of the series were writer [[Russell T Davies]] and [[BBC Cymru Wales]] head of drama [[Julie Gardner]].

''Doctor Who'' finally returned with the episode [[Rose (Doctor Who episode)|"Rose"]] on BBC One on 26 March 2005.&lt;ref&gt;{{cite news|title=Doctor Who is Saturday night hit|url=http://news.bbc.co.uk/1/hi/entertainment/4385801.stm|publisher=BBC|accessdate=24 October 2013}}&lt;/ref&gt; There have since been nine further series in 2006–2008 and 2010–2015, and Christmas Day specials every year since 2005. No full series was broadcast in 2009,&lt;ref&gt;{{cite book|last1=Davies|first1=Russell T|last2=Cook|first2=Benjamin|title=Doctor Who: The Writer's Tale: The Final Chapter|year=2010|publisher=[[BBC Books]]|location=London|isbn=978-1-84607-861-3|page=216}}&lt;/ref&gt; although four additional specials starring [[David Tennant]] were made. Davies left the show in 2010 after the end of series 4 and the David Tennant specials were completed. [[Steven Moffat]], a writer under Davies was announced as Davies successor along with [[Matt Smith (actor)|Matt Smith]] as the new doctor.&lt;ref&gt;{{Cite news|url=http://news.bbc.co.uk/2/hi/entertainment/7453623.stm|title=Profile: Russell T Davies|date=2008-06-13|access-date=2018-08-03|language=en-GB}}&lt;/ref&gt;  In January 2016, Moffat announced that he would step down after the 2017 finale, to be replaced by [[Chris Chibnall]] in 2018.&lt;ref&gt;{{cite web|url=http://www.radiotimes.com/news/2016-01-22/doctor-who-showrunner-steven-moffat-quits-to-be-replaced-by-broadchurch-creator-chris-chibnall|title=Steven Moffat quits Doctor Who to be replaced by Chris Chibnall in 2018|author=Ben Dowell|work=RadioTimes}}&lt;/ref&gt; The tenth series debuted in April 2017, with a Christmas special preceding it in 2016.&lt;ref&gt;{{cite web|url=http://www.doctorwhotv.co.uk/report-moffat-leaving-doctor-who-chris-chibnall-new-showrunner-79586.htm|title=Official: Moffat Leaving Doctor Who After Series 10, Chris Chibnall New Showrunner|publisher=}}&lt;/ref&gt;

The 2005 version of ''Doctor Who'' is a direct [[Continuity (fiction)|plot continuation]] of the original 1963–1989 series&lt;ref group=note&gt;This is often emphasised in the accompanying making-of documentaries in the series ''Doctor Who Confidential'', as well as in occasional flashbacks to images of earlier versions of the Doctor.&lt;/ref&gt; and the 1996 telefilm. This is similar to the 1988 continuation of ''[[Mission: Impossible (1988 TV series)|Mission Impossible]]'',&lt;ref&gt;{{cite web|title=Rewind: ‘Mission: Impossible’ (1988) revisited|url=http://www.cultbox.co.uk/features/rewind/rewind-mission-impossible-1988-revisited|publisher=cultbox.co.uk|accessdate=6 March 2016}}&lt;/ref&gt; but differs from most other series relaunches which have either been reboots (for example, ''[[Battlestar Galactica (2004 TV series)|Battlestar Galactica]]''&lt;ref&gt;{{cite web|url=http://www.gallifreyone.com/newseriesfaq.php |title=Outpost Gallifrey: TV Series FAQ |publisher=gallifreyone.com |deadurl=yes |archiveurl=https://web.archive.org/web/20090601210834/http://www.gallifreyone.com/newseriesfaq.php |archivedate=1 June 2009 }}&lt;/ref&gt; and ''[[Bionic Woman (2007 TV series)|Bionic Woman]]'') or set in the same universe as the original but in a different time period and with different characters (for example, ''[[Star Trek: The Next Generation]]'' and spin-offs).

The programme has been sold to many other countries worldwide (see [[#Viewership|Viewership]]).

===Public consciousness===
It has been claimed that the transmission of the first episode was delayed by ten minutes due to extended news coverage of the [[Assassination of John F. Kennedy|assassination]] of US President [[John F. Kennedy]] the previous day; in fact it went out after a delay of eighty seconds.&lt;ref name="companion"&gt;{{Cite book|last=Howe|first=David J.|authorlink=David J. Howe |author2=Mark Stammers |author3=[[Stephen James Walker]]|year=2003|title=The Television Companion: The Unofficial and Unauthorised Guide to Doctor Who|edition=2nd|publisher=[[Telos Publishing|Telos Publishing Ltd.]]|location=Surrey|isbn=1-903889-51-0}}&lt;/ref&gt; The BBC believed that many viewers had missed this introduction to a new series due to the coverage of the assassination, as well as a series of power blackouts across the country, and they broadcast it again on 30 November 1963, just before episode two.&lt;ref&gt;{{cite web|title=Serial A: 100,000 BC (aka An Unearthly Child, The Tribe of Gum)|url=http://www.shannonsullivan.com/drwho/serials/a.html|publisher=shannonsullivan.com|accessdate=6 September 2013}}&lt;/ref&gt;&lt;ref&gt;{{cite web|title=Doctor Who's First Episode: An Unearthly Child |url=http://www.televisionheaven.co.uk/dw3.htm |publisher=televisionheaven.co.uk |accessdate=6 September 2013 |deadurl=yes |archiveurl=https://web.archive.org/web/20121015194327/http://televisionheaven.co.uk/dw3.htm |archivedate=15 October 2012 }}&lt;/ref&gt;

The programme soon became a national institution in the United Kingdom, with a large following among the general viewing audience.&lt;ref&gt;{{cite web|url=http://www.screenonline.org.uk/tv/id/454592/index.html|title=Doctor Who (1963–89, 2005–)|first=Anthony|last=Clark|work=[[Screenonline]]|quote=The science fiction adventure series Doctor Who (BBC, 1963–89) has created a phenomenon unlike any other British TV programme.|accessdate=21 March 2007}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.museum.tv/archives/etv/D/htmlD/doctorwho/doctorwho.htm|archiveurl=https://web.archive.org/web/20070211080018/http://www.museum.tv/archives/etv/D/htmlD/doctorwho/doctorwho.htm|archivedate=11 February 2007|title=Doctor Who|first=John|last=Tulloch|work=[[Museum of Broadcast Communications]]|quote=The official fans have never amounted to more than a fraction of the audience. Doctor Who achieved the status of an institution as well as a cult.|accessdate=21 March 2007}}&lt;/ref&gt; Many renowned actors asked for or were offered [[List of guest appearances in Doctor Who|guest-starring roles]] in various stories.&lt;ref&gt;{{cite web|title=Voyage of the Damned&amp;nbsp;– Cast and Crew|url=http://www.bbc.co.uk/doctorwho/episodes/2007/credits/credits_votd.shtml|publisher=BBC|accessdate=24 October 2013}}&lt;/ref&gt;&lt;ref&gt;{{cite web|title=Planet of the Dead&amp;nbsp;– Credits|url=http://www.bbc.co.uk/doctorwho/s4/episodes/?episode=s0_06&amp;action=credits|publisher=BBC|accessdate=24 October 2013}}&lt;/ref&gt;&lt;ref&gt;{{cite web|title=Dinosaurs on a Spaceship&amp;nbsp;– Credits|url=http://www.bbc.co.uk/programmes/b01mm5c9|publisher=BBC|accessdate=24 October 2013}}&lt;/ref&gt;&lt;ref&gt;{{cite web|title=The Name of the Doctor&amp;nbsp;– Credits|url=http://www.bbc.co.uk/programmes/b01skh8t|publisher=BBC|accessdate=24 October 2013}}&lt;/ref&gt;

With popularity came controversy over the show's suitability for children. Morality campaigner [[Mary Whitehouse]] repeatedly complained to the BBC in the 1970s over what she saw as the show's frightening and gory content. [[John Nathan-Turner]] produced the series during the 1980s and was heard to say that he looked forward to Whitehouse's comments, as the show's ratings would increase soon after she had made them.&lt;ref&gt;{{cite news|url=http://news.bbc.co.uk/1/hi/entertainment/new_media/1965981.stm|title=Doctor Who Producer Dies|accessdate=6 July 2007|publisher=BBC News|date=3 May 2002}}&lt;/ref&gt;

The phrase "[[Behind the sofa|Hiding behind (or 'watching from behind') the sofa]]" entered British [[popular culture|pop culture]], signifying in humour the stereotypical early-series behaviour of children who wanted to avoid seeing frightening parts of a [[television program]]me while remaining in the room to watch the remainder of it.&lt;ref name=telegraph&gt;{{cite news|first=Sam|last=Leith|title=Worshipping Doctor Who from behind the sofa|url=https://www.telegraph.co.uk/comment/columnists/samleith/3560202/Worshipping-Doctor-Who-from-behind-the-sofa.html|work=[[The Daily Telegraph]]|date=4 July 2008|accessdate=5 July 2008|quote=The cliché about ''Doctor Who''&amp;nbsp;— that it had us "hiding behind the sofa"&amp;nbsp;— is more telling in its tone than its questionable factuality. It connotes nostalgia, and a pleasurable mixture of fright and fascination&amp;nbsp;— but above all it connotes domesticity. It united fear and soft furnishings in the British mind.}}&lt;/ref&gt; The phrase retains this association with Doctor Who, to the point that in 1991 the [[Museum of the Moving Image (London)|Museum of the Moving Image]] in [[London]] named their exhibition celebrating the programme "Behind the Sofa". The electronic [[Doctor Who theme music|theme music]] too was perceived as eerie, novel, and frightening, at the time. A 2012 article placed this childhood juxtaposition of fear and thrill "at the center of many people's relationship with the show",&lt;ref&gt;[http://io9.com/5971113/if-you-werent-scared-of-doctor-who-as-a-child-you-may-never-fully-understand-it If you weren't scared of Doctor Who as a child, you missed out on a crucial experience]&amp;nbsp;– IO9, by Charlie Jane Anders, 25 December 2012&lt;/ref&gt; and a 2011 online vote at [[Digital Spy]] deemed the series the "scariest TV show of all time".&lt;ref&gt;[http://www.digitalspy.co.uk/tv/s7/doctor-who/tubetalk/a348363/doctor-who-named-scariest-tv-show-of-all-time-your-top-10-revealed.html 'Doctor Who' named scariest TV show of all time: Your Top 10 revealed], ''Digital Spy'', Catriona Wightman &amp; Morgan Jeffery, 31 October 2011.&lt;/ref&gt;

During [[Jon Pertwee]]'s [[Doctor Who (season 8)|second series]] as the Doctor, in the serial ''[[Terror of the Autons]]'' (1971), images of murderous plastic dolls, daffodils killing unsuspecting victims, and blank-featured policemen marked the apex of the show's ability to frighten children.&lt;ref&gt;{{cite web|title=BBC&amp;nbsp;– Doctor Who Classic Episode Guide&amp;nbsp;– Terror of the Autons|url=http://www.bbc.co.uk/doctorwho/classic/episodeguide/terrorautons/detail.shtml|publisher=BBC|accessdate=25 October 2013}}&lt;/ref&gt; Other notable moments in that decade include a disembodied brain falling to the floor in ''[[The Brain of Morbius]]''&lt;ref&gt;{{cite web|title=Doctor Who Classic Episode Guide&amp;nbsp;– The Brain of Morbius|url=http://www.bbc.co.uk/doctorwho/classic/episodeguide/brainmorbius/detail.shtml|publisher=BBC|accessdate=25 October 2013}}&lt;/ref&gt; and the Doctor apparently being drowned by a villain in ''[[The Deadly Assassin]]'' (both 1976).&lt;ref&gt;{{cite web|title=BBC&amp;nbsp;– Doctor Who Classic Episode Guide&amp;nbsp;– The Deadly Assassin|url=http://www.bbc.co.uk/doctorwho/classic/episodeguide/deadlyassassin/detail.shtml|publisher=BBC|accessdate=25 October 2013}}&lt;/ref&gt;

[[File:Tardis BBC Television Center.jpg|thumb|The current [[TARDIS]] prop used since 2010.]]
A BBC audience research survey conducted in 1972 found that, by their own definition of violence ("any act[s] which may cause physical and/or psychological injury, hurt or death to persons, animals or property, whether intentional or accidental") ''Doctor Who'' was the most violent of the drama programmes the corporation produced at the time.&lt;ref name="times-violence"&gt;{{cite news|title=Violence is not really Dr Who's cup of tea|work=The Times|first=Philip|last=Howard|date=29 January 1972|page=2}}&lt;/ref&gt; The same report found that 3% of the surveyed audience regarded the show as "very unsuitable" for family viewing.&lt;ref name="times-audience"&gt;{{cite news|title=The Times Diary&amp;nbsp;— Points of view|work=The Times|date=27 January 1972|page=16}}&lt;/ref&gt; Responding to the findings of the survey in ''[[The Times]]'' newspaper, journalist Philip Howard maintained that, "to compare the violence of ''Dr Who'', sired by a horse-laugh out of a nightmare, with the more realistic violence of other television series, where actors who look like human beings bleed paint that looks like blood, is like comparing [[Monopoly (game)|Monopoly]] with the property market in London: both are fantasies, but one is meant to be taken seriously."&lt;ref name="times-violence"/&gt;

The image of the [[TARDIS]] has become firmly linked to the show in the public's consciousness; BBC scriptwriter [[Anthony Coburn]], who lived in the resort of [[Herne Bay, Kent]], was one of the people who conceived the idea of a police box as a time machine.&lt;ref&gt;{{cite web|url=https://www.bbc.co.uk/news/uk-england-kent-13411516|title=Doctor Who fan in tardis replica plan for Herne Bay|publisher=BBC|accessdate=31 July 2013}}&lt;/ref&gt; In 1996, the BBC applied for a trade mark to use the TARDIS' blue [[police box]] design in merchandising associated with ''Doctor Who''.&lt;ref&gt;{{cite web|url=http://www.ipo.gov.uk/tmcase/Results/1/UK00002104259|title=Case details for Trade Mark UK00002104259|accessdate=27 October 2013|work=[[Intellectual Property Office (United Kingdom)|UK Patent Office]]}}&lt;/ref&gt; In 1998, the Metropolitan Police Authority filed an objection to the trade mark claim; but in 2002, the [[Intellectual Property Office (United Kingdom)|Patent Office]] ruled in favour of the BBC.&lt;ref&gt;{{cite web|url=http://www.patent.gov.uk/tm/t-decisionmaking/t-challenge/t-challenge-decision-results/t-challenge-decision-results-bl?BL_Number=O/336/02|title=Trade mark decision|accessdate=17 January 2007|work=[[UK Intellectual Property Office|UK Patent Office]] website}}&lt;br /&gt;{{cite web|url=http://www.patent.gov.uk/tm//legal/decisions/2002/o33602.pdf|title=In the matter of application No. 2104259 by The British Broadcasting Corporation to register a series of three marks in Classes 9, 16, 25 and 41 And in the Matter of – Opposition thereto under No. 48452 by The Metropolitan Police Authority|accessdate=17 January 2007|last=Knight|first=Mike|work=[[UK Intellectual Property Office|UK Patent Office]]|format=PDF}}&lt;br /&gt;{{cite news|url=http://news.bbc.co.uk/1/hi/entertainment/tv_and_radio/2352743.stm|title=BBC wins police Tardis case|accessdate=17 January 2007|date=23 October 2002|publisher=BBC News}}&lt;/ref&gt;

The programme's broad appeal attracts audiences of children and families as well as [[science fiction fandom|science fiction fans]].&lt;ref&gt;{{cite news|first=Sam |last=Leith |title=Worshipping Doctor Who from behind the sofa |url=https://www.telegraph.co.uk/opinion/main.jhtml?xml=/opinion/2008/07/05/do0502.xml |work=The Daily Telegraph |location=London |date=4 July 2008 |accessdate=7 July 2008 |archiveurl=https://web.archive.org/web/20080706030948/http://www.telegraph.co.uk/opinion/main.jhtml?xml=%2Fopinion%2F2008%2F07%2F05%2Fdo0502.xml |archivedate= 6 July 2008 |deadurl=yes |df= }}&lt;/ref&gt;

The 21st century revival of the programme has become the centrepiece of BBC One's Saturday schedule, and has "defined the channel".&lt;ref&gt;{{cite news|first=James|last=Robinson|title=Television's Lord of prime time awaits his next regeneration|url=http://observer.guardian.co.uk/business/story/0,,2036415,00.html|work=The Observer|date=18 March 2007|accessdate=19 March 2007|location=London}}&lt;/ref&gt; Since its return, ''Doctor Who'' has consistently received high ratings, both in number of viewers and as measured by the [[Appreciation Index]].&lt;ref&gt;{{cite news|first=Andrew|last=Pettie|title=Casting Matt Smith shows that Doctor Who is a savvy multi-million pound brand|url=https://www.telegraph.co.uk/culture/tvandradio/4094067/Casting-Matt-Smith-shows-that-Doctor-Who-is-a-savvy-multi-million-pound-brand.html|work=The Daily Telegraph|location=London|date=4 January 2009|accessdate=4 January 2009}}&lt;/ref&gt; In 2007, [[Caitlin Moran]], television reviewer for ''[[The Times]]'', wrote that ''Doctor Who'' is, "quintessential to being British".&lt;ref name="Moran" /&gt; Director [[Steven Spielberg]] has commented that, "the world would be a poorer place without ''Doctor Who''".&lt;ref&gt;{{cite news|url=http://blogs.guardian.co.uk/organgrinder/2008/08/steven_moffat_dont_rule_out_do.html|title=Edinburgh TV Festival 2008: don't rule out Doctor Who feature film, says Steven Moffat|first=Ben|last=Dowell|work=The Guardian|date=23 August 2008|accessdate=23 August 2008|location=London}}&lt;/ref&gt;

On 4 August 2013, a live programme titled ''[[Doctor Who Live: The Next Doctor]]''&lt;ref&gt;{{cite web|url=https://www.bbc.co.uk/news/entertainment-arts-23567602|title=Doctor Who: Fans await announcement|publisher=BBC|date=4 August 2013|accessdate=4 August 2013}}&lt;/ref&gt; was broadcast on BBC One, during which the actor who was going to play the Twelfth Doctor was revealed.&lt;ref&gt;{{cite web|url=https://www.bbc.co.uk/news/entertainment-arts-23531724|title=New Doctor Who star to be unveiled|accessdate=3 August 2013|date=2 August 2013|publisher=BBC}}&lt;/ref&gt; The live show was watched by an average of 6.27&amp;nbsp;million in the UK, and was also simulcast in the United States, Canada and Australia.&lt;ref&gt;{{cite news|last=Glanfield|first=Tim|title=Doctor Who: Almost 7m watch Peter Capaldi revealed as 12th Doctor|url=http://www.radiotimes.com/news/2013-08-05/doctor-who-almost-7m-watch-peter-capaldi-revealed-as-12th-doctor|accessdate=5 August 2013|newspaper=Radio Times|date=5 August 2013}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.heraldscotland.com/news/home-news/from-spin-doctor-to-doctor-who-stars-childhood-dream-comes-true.21792902|title=From spin doctor to Doctor Who&amp;nbsp;... star's childhood dream comes true|date=5 August 2013|accessdate=18 August 2013|work=The Herald|location=Glasgow}}&lt;/ref&gt;

==Episodes==
{{Further|List of Doctor Who episodes (1963–1989)|List of Doctor Who episodes (2005–present)}}
''Doctor Who'' originally ran for 26 seasons on BBC One, from 23 November 1963 until 6 December 1989. During the original run, each weekly episode formed part of a story (or "serial")&amp;nbsp;— usually of four to six parts in earlier years and three to four in later years. Some notable exceptions were: ''[[The Daleks' Master Plan]]'', which aired twelve episodes (plus an earlier one-episode teaser,&lt;ref&gt;''[[The Daleks' Master Plan]]''. Writers [[Terry Nation]] and [[Dennis Spooner]], Director [[Douglas Camfield]], Producer [[John Wiles]]. ''Doctor Who''. BBC. BBC One, London. 13 November 1965&amp;nbsp;– 29 January 1966.&lt;/ref&gt; "[[Mission to the Unknown]]", featuring none of the regular cast&lt;ref&gt;{{cite episode|title=Mission to the Unknown|episodelink=Mission to the Unknown|series=Doctor Who|credits=Writer [[Terry Nation]], Director [[Derek Martinus]], Producer [[Verity Lambert]]|network=BBC|station=BBC One|location=London|airdate=9 October 1965}}&lt;/ref&gt;); almost an entire season of seven-episode serials (season 7); the ten-episode serial ''[[The War Games]]'';&lt;ref name="WarGames"&gt;''[[The War Games]]''. Writers [[Malcolm Hulke]] and [[Terrance Dicks]], Director [[David Maloney]], Producer [[Derrick Sherwin]]. ''Doctor Who''. BBC. BBC One, London. 19 April 1969&amp;nbsp;– 21 June 1969.&lt;/ref&gt; and ''[[The Trial of a Time Lord]]'', which ran for fourteen episodes (albeit divided into three production codes and four narrative segments) during [[Doctor Who (season 23)|season 23]].&lt;ref name="Trial"&gt;''[[The Trial of a Time Lord]]''. Writers [[Robert Holmes (scriptwriter)|Robert Holmes]], [[Philip Martin (screenwriter)|Philip Martin]] and [[Pip and Jane Baker]], Directors [[Nicholas Mallett]], [[Ron Jones (television director)|Ron Jones]] and Chris Clough, Producer [[John Nathan-Turner]]. ''Doctor Who''. BBC. BBC One, London. 6 September 1986&amp;nbsp;– 6 December 1986.&lt;/ref&gt; Occasionally serials were loosely connected by a story-line, such as [[Doctor Who (season 8)|season 8]] focusing on the Doctor battling a rogue Time Lord called [[Master (Doctor Who)|the Master]],&lt;ref&gt;{{cite web|title=BBC&amp;nbsp;– Doctor Who Classic Episode Guide&amp;nbsp;– Season 8|url=http://www.bbc.co.uk/doctorwho/classic/episodeguide/season8.shtml|publisher=BBC|accessdate=25 October 2013}}&lt;/ref&gt;&lt;ref&gt;{{cite web|title=The Master&amp;nbsp;– BBC|url=http://www.bbc.co.uk/doctorwho/classic/characters/the-master.shtml|publisher=BBC|accessdate=25 October 2013}}&lt;/ref&gt; [[Doctor Who (season 16)|season 16]]'s quest for [[the Key to Time]],&lt;ref&gt;{{cite web|title=BBC&amp;nbsp;– Doctor Who Classic Episode Guide&amp;nbsp;– Season 16|url=http://www.bbc.co.uk/doctorwho/classic/episodeguide/season16.shtml|publisher=BBC|accessdate=25 October 2013}}&lt;/ref&gt; [[Doctor Who (season 18)|season 18]]'s journey through [[E-Space]] and the theme of entropy,&lt;ref&gt;{{cite web|title=BBC&amp;nbsp;– Doctor Who Classic Episode Guide&amp;nbsp;– Logopolis|url=http://www.bbc.co.uk/doctorwho/classic/episodeguide/logopolis/detail.shtml|publisher=BBC|accessdate=25 October 2013}}&lt;/ref&gt; and [[Doctor Who (season 20)|season 20]]'s Black Guardian trilogy.&lt;ref&gt;{{cite web|title=BBC&amp;nbsp;– Season 20&amp;nbsp;– Episode guide|url=http://www.bbc.co.uk/programmes/p00sfvc7/episodes/guide|publisher=BBC|accessdate=25 October 2013}}&lt;/ref&gt;

The programme was intended to be educational and for family viewing on the early Saturday evening schedule.&lt;ref name="Doctor Who Education"&gt;{{cite web|title=10 things you didn't know about Doctor Who|url=http://uktv.co.uk/watch/stepbystep/aid/576125|publisher=[[Watch (TV channel)|Watch]]|accessdate=20 January 2012|archiveurl=https://web.archive.org/web/20110116052952/http://uktv.co.uk/watch/stepbystep/aid/576125|archivedate=16 January 2011}}&lt;/ref&gt; It initially alternated stories set in the past, which taught younger audience members about history, and with those in the future or outer space, focusing on science.&lt;ref name="Doctor Who Education" /&gt; This was also reflected in the Doctor's original companions, one of whom was a science teacher and another a history teacher.&lt;ref name="Doctor Who Education" /&gt;

However, science fiction stories came to dominate the programme, and the history-orientated episodes, which were not popular with the production team,&lt;ref name="Doctor Who Education" /&gt; were dropped after ''[[The Highlanders (Doctor Who)|The Highlanders]]'' (1967). While the show continued to use historical settings, they were generally used as a backdrop for science fiction tales, with one exception: ''[[Black Orchid (Doctor Who)|Black Orchid]]'' (1982), set in 1920s England.&lt;ref name=Orchid&gt;''[[Black Orchid (Doctor Who)|Black Orchid]]''. Writer [[Terence Dudley]], Director [[Ron Jones (television director)|Ron Jones]], Producer [[John Nathan-Turner]]. ''Doctor Who''. BBC. BBC One, London. 1 March 1982&amp;nbsp;– 2 March 1982.&lt;/ref&gt;

The early stories were serialised in nature, with the narrative of one story flowing into the next, and each episode having its own title, although produced as distinct stories with their own production codes.&lt;ref name="BBC Doctor Who Episode List"&gt;{{cite web|title=Doctor Who Episode List|url=http://www.bbc.co.uk/cult/treasurehunt/missing/drwho.shtml|publisher=BBC|accessdate=26 October 2013}}&lt;/ref&gt; Following ''[[The Gunfighters]]'' (1966), however, each serial was given its own title, and the individual parts were simply assigned episode numbers.&lt;ref name="BBC Doctor Who Episode List" /&gt;

Of the programme's [[List of Doctor Who writers|many writers]], [[Robert Holmes (scriptwriter)|Robert Holmes]] was the most prolific,&lt;ref&gt;{{cite web|last=Debnath|first=Neela|title=Review of Doctor Who 'The Talons of Weng-Chiang' (Series 14)|url=http://blogs.independent.co.uk/2012/12/31/review-of-doctor-who-%E2%80%98the-talons-of-weng-chiang%E2%80%99-series-14/|work=[[The Independent]]|accessdate=26 October 2013|date=21 September 2013}}&lt;/ref&gt; while [[Douglas Adams]] became the most well-known outside ''Doctor Who'' itself, due to the popularity of his ''[[Hitchhiker's Guide to the Galaxy]]'' works.&lt;ref&gt;{{cite web|title=BBC Online&amp;nbsp;– Cult&amp;nbsp;– Hitchhiker's&amp;nbsp;– Douglas Adams&amp;nbsp;– Biography|url=http://www.bbc.co.uk/cult/hitchhikers/dna/biog.shtml|publisher=BBC|accessdate=26 October 2013}}&lt;/ref&gt;&lt;ref&gt;{{cite web|title=Shada, Douglas Adams's 'lost' Doctor Who story, to be novelised|url=https://www.theguardian.com/books/2011/mar/24/douglas-adams-doctor-who-story-published|work=The Guardian|accessdate=26 October 2013|date=24 March 2011}}&lt;/ref&gt;

The serial format changed for the [[Doctor Who (series 1)|2005 revival]], with a series usually consisting of thirteen 45-minute, self-contained episodes (60 minutes with adverts, on overseas commercial channels), and an extended 60-minute episode broadcast on Christmas Day. This system was shortened to twelve episodes and one Christmas special following the revival's [[Doctor Who (series 8)|eighth series]]. Each series includes both standalone and multiple episodic stories, linked with a loose story arc that is resolved in the series finale. As in the early "classic" era, each episode, whether standalone or part of a larger story, has its own title. Occasionally, regular-series episodes will exceed the 45-minute run time; notably, the episodes "[[Journey's End (Doctor Who)|Journey's End]]" from 2008 and "[[The Eleventh Hour (Doctor Who)|The Eleventh Hour]]" from 2010 exceeded an hour in length.

{{DW episode count}} ''Doctor Who'' instalments have been televised since 1963, ranging between 25-minute episodes (the most common format for the classic era), 45-minute episodes (for ''[[Resurrection of the Daleks]]'' in the 1984 series, a single season in 1985, and the most common format for the revival era since 2005), two feature-length productions (1983's ''[[The Five Doctors]]'' and the [[Doctor Who (1996 film)|1996 television film]]), twelve [[Christmas special#Television series specials|Christmas specials]] (most of 60 minutes' duration, one of 72 minutes), and four additional specials ranging from 60 to 75 minutes in 2009, 2010 and 2013. Four mini-episodes, running about eight minutes each, were also produced for the 1993, 2005 and 2007 [[Children in Need]] charity appeals, while another mini-episode was produced in 2008 for a ''Doctor Who''-themed edition of [[The Proms]]. The 1993 2-part story, entitled ''[[Dimensions in Time]]'', was made in collaboration with the cast of the BBC soap-opera ''[[EastEnders]]'' and was filmed partly on the ''EastEnders'' set. A two-part mini-episode was also produced for the 2011 edition of [[Comic Relief]]. Starting with the 2009 special "[[Planet of the Dead]]", the series was filmed in [[1080i]] for [[HDTV]],&lt;ref&gt;{{cite web|title=Doctor Who to be filmed in HD |url=http://www.drwho-online.co.uk/news/#newseries-hd0 |work=Doctor Who Online |date=4 February 2009 |accessdate=5 February 2009 }}{{dead link|date=March 2018|bot=medic}}{{cbignore|bot=medic}}&lt;/ref&gt; and broadcast simultaneously on BBC One and [[BBC HD]].

To celebrate the 50th anniversary of the show, a special [[3D television|3D]] episode, "[[The Day of the Doctor]]", was broadcast in 2013.&lt;ref name="bbc3D"&gt;{{cite web|url=https://www.bbc.co.uk/news/entertainment-arts-21413511|title=BBC announces Doctor Who 3D Special|publisher=BBC News|date=11 February 2013|accessdate=12 February 2013}}&lt;/ref&gt; In March 2013, it was announced that Tennant and Piper would be returning,&lt;ref name="tennantReturns"&gt;{{cite web|url=https://www.bbc.co.uk/news/entertainment-arts-21980892|title=Doctor Who: David Tennant returns for anniversary show|publisher=BBC News|date=30 March 2013|accessdate=2 April 2013}}&lt;/ref&gt; and that the episode would have a limited cinematic release worldwide.&lt;ref name="NotParticularlyGoodReferenceWillReplace"&gt;{{cite web|url=http://www.digitaltrends.com/home-theater/doctor-who-to-go-3d-for-half-century-sepcial-edition/|title='Doctor Who' goes 3D for its half-century edition|publisher=Digital Trends|date=12 February 2013|accessdate=2 April 2013|author=McMillan, Graeme}}&lt;/ref&gt;

In April 2015, Steven Moffat confirmed that ''Doctor Who'' would run for at least another five years, extending the show until 2020.&lt;ref&gt;{{cite web|title=Doctor Who 'to remain on-screen until at least 2020'|url=https://www.bbc.com/news/entertainment-arts-32202633|publisher=BBC|date=7 April 2015|accessdate=8 April 2015}}&lt;/ref&gt;

===Missing episodes===
{{Main|Doctor Who missing episodes}}
Between about 1967 and 1978, large amounts of older material stored in the BBC's various video tape and film libraries were either destroyed,&lt;ref group=note&gt;The tapes, based on a [[405-line television system|405-line broadcast standard]], were rendered obsolete when UK television changed to a [[625-line television system|625-line signal]] in preparation for the soon-to-begin colour transmissions.&lt;/ref&gt; [[wiping|wiped]], or suffered from poor storage which led to severe deterioration from [[broadcast quality]]. This included many old episodes of ''Doctor Who'', mostly stories featuring the first two Doctors: [[William Hartnell]] and [[Patrick Troughton]]. In all, 97 of 253 episodes produced during the first six years of the programme are not held in the BBC's archives (most notably seasons 3, 4, &amp; 5, from which 79 episodes are missing). In 1972, almost all episodes then made were known to exist at the BBC,&lt;ref&gt;{{cite web|url=http://www.purpleville.pwp.blueyonder.co.uk/rtwebsite/archive.htm |title=BBC Archive Holdings |first=Richard |last=Molesworth |work=[[Doctor Who Restoration Team]] |quote=A full set was held at least until early 1972, as 16 mm black and white film negatives (apart&amp;nbsp;— of course&amp;nbsp;— from 'Masterplan' 7). . |accessdate=30 April 2007 |deadurl=yes |archiveurl=https://web.archive.org/web/20121228210500/http://www.purpleville.pwp.blueyonder.co.uk/rtwebsite/archive.htm |archivedate=28 December 2012 |df= }}&lt;/ref&gt; while by 1978 the practice of wiping tapes and destroying "spare" film copies had been brought to a stop.&lt;ref&gt;{{cite web|url=http://www.purpleville.pwp.blueyonder.co.uk/rtwebsite/archive.htm |title=BBC Archive Holdings |first=Richard |last=Molesworth |work=[[Doctor Who Restoration Team]] |quote=the videotapes began to be wiped, or re-used, until the formation of the BBC's Film and Videotape Library in 1978 put a stop to this particular practice. |accessdate=30 April 2007 |deadurl=yes |archiveurl=https://web.archive.org/web/20121228210500/http://www.purpleville.pwp.blueyonder.co.uk/rtwebsite/archive.htm |archivedate=28 December 2012 |df= }}&lt;/ref&gt;

No 1960s episodes exist on their original videotapes (all surviving prints being film transfers), though some were transferred to film for editing before transmission, and exist in their broadcast form.&lt;ref name="Doctor Who Restoring and Reconstructing Missing Episodes"&gt;{{cite news|title='Doctor Who': Restoring and Reconstructing Missing Episodes|url=http://news.bbc.co.uk/dna/place-lancashire/plain/A14066589|publisher=BBC|accessdate=20 January 2012}}&lt;/ref&gt;

Some episodes have been returned to the BBC from the archives of other countries who bought prints for broadcast, or by private individuals who acquired them by various means. Early colour videotape recordings made off-air by fans have also been retrieved, as well as excerpts filmed from the television screen onto 8&amp;nbsp;mm [[cine film]] and clips that were shown on other programmes. Audio versions of all of the lost episodes exist from home viewers who made tape recordings of the show. Short clips from every story with the exception of ''[[Marco Polo (Doctor Who)|Marco Polo]]'' (1964), "[[Mission to the Unknown]]" (1965) and ''[[The Massacre of St Bartholomew's Eve]]'' (1966) also exist.

In addition to these, there are off-screen photographs made by photographer [[John Cura]], who was hired by various production personnel to document many of their programmes during the 1950s and 1960s, including ''Doctor Who''. These have been used in [[Doctor Who missing episodes#Reconstruction|fan reconstructions]] of the serials. These amateur reconstructions have been tolerated by the BBC, provided they are not sold for profit and are distributed as low-quality VHS copies.&lt;ref&gt;{{cite news|last=Lewinski|first=John Scott|title=Fans Reconstruct Doctor Who's Trashed Past|url=https://www.wired.com/underwire/2008/09/who-recon/|work=Wired|accessdate=20 January 2012|date=29 September 2008}}&lt;/ref&gt;

One of the most sought-after lost episodes is part four of the last William Hartnell serial, ''[[The Tenth Planet]]'' (1966), which ends with the [[First Doctor]] transforming into the [[Second Doctor|Second]]. The only portion of this in existence, barring a few poor-quality silent 8&amp;nbsp;mm clips, is the few seconds of the regeneration scene, as it was shown on the children's magazine show ''[[Blue Peter]]''.&lt;ref&gt;{{cite web|last=Martin|first=Lara|title=Zimbabwe 'hoarding lost 'Who' episodes'|url=http://www.digitalspy.co.uk/tv/s7/doctor-who/news/a147355/zimbabwe-hoarding-lost-who-episodes.html|work=[[Digital Spy]]|accessdate=20 January 2012|date=20 February 2009}}&lt;/ref&gt; With the approval of the BBC, efforts are now under way to restore as many of the episodes as possible from the extant material.

"Official" reconstructions have also been released by the BBC on VHS, on MP3 [[CD-ROM]], and as special features on DVD. The BBC, in conjunction with animation studio [[Cosgrove Hall Films|Cosgrove Hall]], reconstructed the missing episodes 1 and 4 of ''[[The Invasion (Doctor Who)|The Invasion]]'' (1968), using remastered audio tracks and the comprehensive stage notes for the original filming, for the serial's DVD release in November 2006. The missing episodes of ''[[The Reign of Terror (Doctor Who)|The Reign of Terror]]'' were animated by animation company Theta-Sigma, in collaboration with [[Big Finish Productions|Big Finish]], and became available for purchase in May 2013 through Amazon.com.&lt;ref&gt;{{cite web|url=http://www.doctorwhonews.net/2011/06/dwn210611211508-reign-of-terror-update.html|title=The Reign of Terror&amp;nbsp;— animation update|publisher=[[Doctor Who News Page]]|first=Chuck|last=Foster|date=21 June 2011}}&lt;/ref&gt; Subsequent animations made in 2013 include ''[[The Tenth Planet]]'', ''[[The Ice Warriors]]'' (1967) and ''[[The Moonbase]]'' (1967).

In April 2006, ''[[Blue Peter]]'' launched a challenge to find missing ''Doctor Who'' episodes with the promise of a full-scale [[Dalek]] model as a reward.&lt;ref&gt;{{cite web|date=April 2006|url=https://www.bbc.co.uk/cbbc/bluepeter/content/articles/2006/04/19/doctor_who_feature.shtml|archiveurl=https://web.archive.org/web/20060424144255/http://www.bbc.co.uk/cbbc/bluepeter/content/articles/2006/04/19/doctor_who_feature.shtml|archivedate=24 April 2006|title=Blue Peter&amp;nbsp;— Missing Doctor Who tapes|publisher=BBC|accessdate=24 April 2006}}&lt;/ref&gt;

In December 2011, it was announced that part 3 of ''[[Galaxy 4]]'' (1965) and part 2 of ''[[The Underwater Menace]]'' (1967) had been returned to the BBC by a fan who had purchased them in the mid-1980s without realising that the BBC did not hold copies of them.&lt;ref&gt;{{cite news|last=Mulkern|first=Patrick|title=Doctor Who: two long-lost episodes uncovered|url=http://www.radiotimes.com/news/2011-12-11/doctor-who-two-long-lost-episodes-uncovered|accessdate=11 December 2011|newspaper=Radio Times|date=11 December 2011}}&lt;/ref&gt;

On 10 October 2013, the BBC announced that films of eleven episodes, including nine missing episodes, had been found in a Nigerian television relay station in [[Jos]].&lt;ref&gt;{{cite web|author=Christopher Allen|url=http://www.doctorwho.tv/whats-new/article/two-missing-doctor-who-adventures-found/|title=Two "Missing" Doctor Who Adventures Found|publisher=BBC Worldwide|date=10 October 2013|accessdate=11 October 2013}}&lt;/ref&gt; Six of the eleven films discovered were the six-part serial ''[[The Enemy of the World]]'' (1968), from which all but the third episode had been missing.&lt;ref&gt;{{cite web|author=Doctor Who Online|url=http://news.drwho-online.co.uk/Nine-Missing-Doctor-Who-Episodes-Recovered!.aspx|title=Nine Missing Doctor Who Episodes Recovered!|publisher=Doctor Who Online|date=11 October 2013|accessdate=11 October 2013}}&lt;/ref&gt; The remaining films were from another six-part serial, ''[[The Web of Fear]]'' (1968), and included the previously missing episodes 2, 4, 5, and 6. Episode 3 of ''The Web of Fear'' is still missing.&lt;ref&gt;{{cite web|title=Doctor Who: Yeti classic among episodes found in Nigeria|url=https://www.bbc.co.uk/news/entertainment-arts-24467337|publisher=BBC|accessdate=25 October 2013}}&lt;/ref&gt;

==Characters==
{{See also|List of Doctor Who cast members}}

===The Doctor===
{{Main|The Doctor (Doctor Who)}}
[[File:Versions of the Doctor.jpg|thumb|The Doctor portrayed by series leads in chronological order. Left to right from top row; [[William Hartnell]], [[Patrick Troughton]], [[Jon Pertwee]], [[Tom Baker]], [[Peter Davison]], [[Colin Baker]], [[Sylvester McCoy]], [[Paul McGann]], [[Christopher Eccleston]], [[David Tennant]], [[Matt Smith (actor)|Matt Smith]], [[Peter Capaldi]] and [[Jodie Whittaker]].]]
The Doctor was initially shrouded in mystery. All that was known about the character in the programme's early days was that they were an eccentric alien traveller of great intelligence who battled injustice while exploring time and space in an unreliable [[Time travel|time machine]], the "[[TARDIS]]" (an [[acronym]] for Time and Relative Dimension in Space), which notably appears much larger on the inside than on the outside (a quality referred to as "dimensional transcendentality").&lt;ref group="note"&gt;When it became an entry in the ''[[Oxford English Dictionary]]'', the word "TARDIS" often came to be used to describe anything that appeared larger on the inside than its exterior implied.&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.jessesword.com/sf/view/424|title=Full record for Tardis-like adj.|work=Science Fiction Citations|accessdate=7 September 2007|deadurl=yes|archiveurl=https://web.archive.org/web/20080523205631/http://www.jessesword.com/sf/view/424|archivedate=23 May 2008}}&lt;/ref&gt;

The initially irascible and slightly sinister Doctor quickly mellowed into a more compassionate figure and was eventually revealed to be a [[Time Lord]] from the planet [[Gallifrey]], which the Doctor fled by stealing the TARDIS.

====Changes of appearance====
Producers introduced the concept of [[Regeneration (Doctor Who)|regeneration]] to permit the recasting of the main character. This was prompted by the poor health of the original star, [[William Hartnell]]. The term "regeneration" was not conceived until the Doctor's third on-screen regeneration; Hartnell's Doctor merely described undergoing a "renewal", and the Second Doctor underwent a "change of appearance".&lt;ref&gt;{{Cite web|url=http://www.chakoteya.net/DoctorWho/4-3.htm|title=The Doctor Who Transcripts - The Power of the Daleks|website=www.chakoteya.net|language=en-gb|access-date=27 January 2017}}&lt;/ref&gt;&lt;ref&gt;{{Cite web|url=http://www.chakoteya.net/DoctorWho/6-7.htm|title=The Doctor Who Transcripts - The War Games|website=www.chakoteya.net|language=en-gb|access-date=27 January 2017}}&lt;/ref&gt; The device has allowed for the recasting of the actor various times in the show's history, as well as the depiction of alternative Doctors either from the Doctor's relative past or future.{{citation needed|date=July 2014}}

The serials ''[[The Deadly Assassin]]'' (1976) and ''[[Mawdryn Undead]]'' (1983) established that a Time Lord can only regenerate 12 times, for a total of 13 incarnations. This line became stuck in the public consciousness despite not often being repeated, and was recognised by producers of the show as a plot obstacle for when the show finally had to regenerate the Doctor a thirteenth time.&lt;ref&gt;{{cite web|first=Ian|last=Berriman|url=http://www.gamesradar.com/interview-russell-t-davies-talks-about-that-sarah-jane-adventures-line/|title=Interview: Russell T Davies Talks About THAT Sarah Jane Adventures Line|publisher=gamesradar.com|date=26 October 2010|accessdate=19 April 2012}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.doctorwho.tv/whats-new/article/steven-moffat-on-doctor-numbers-and-the-regeneration-limit|title=Steven Moffat on ‘Doctor numbers’ and the regeneration limit|author=Darren Scott|date=26 November 2013}}&lt;/ref&gt; The episode "[[The Time of the Doctor]]" (2013) depicted the Doctor acquiring a new cycle of regenerations, starting from the [[Twelfth Doctor]], due to the [[Eleventh Doctor]] being the product of the Doctor's twelfth regeneration from his original set.&lt;!--A note explaining this can go here, but it would be best not to digress into an explanation of the circumstances of a particular regeneration in the paragraph which introduces the general concept--&gt;&lt;ref name=507joke&gt;{{cite web|url=http://www.sfx.co.uk/2010/10/26/interview-russell-t-davies-talks-about-that-sarah-jane-adventures-line/|publisher=sfx.co.uk|title=Interview – Russell T. Davies talks about That Sarah Jane Adventures line|accessdate=5 August 2013}}&lt;/ref&gt;&lt;ref&gt;{{cite news|url=https://www.theguardian.com/tv-and-radio/2010/oct/12/doctor-who-immortal-reveals-bbc|title=Doctor Who is now immortal, reveals the BBC |author=Emily Barr |newspaper=The Guardian |date=13 October 2010 |accessdate=13 October 2010}}&lt;/ref&gt;

Although the idea of casting a woman as the Doctor had been suggested by the show's writers several times, including by Newman in 1986 and Davies in 2008, until 2017, all official depictions were played by men.&lt;ref&gt;{{cite news|title=How Doctor Who nearly became the Time Lady|url=https://www.telegraph.co.uk/culture/tvandradio/doctor-who/8052694/How-Doctor-Who-nearly-became-the-Time-Lady.html|date=10 October 2010|first=Marc|last=Horn|accessdate=17 July 2017|newspaper=Daily Telegraph}}&lt;/ref&gt;&lt;ref&gt;{{cite news|title=Could Catherine Zeta-Jones be the next Doctor Who|url=https://www.theguardian.com/media/2008/dec/18/could-catherine-zeta-jones-be-next-doctor-who|date=18 December 2008|first=Sam|last=Nichols|accessdate=17 July 2017|newspaper=The Guardian}}&lt;/ref&gt; [[Jodie Whittaker]] took over the role as the [[Thirteenth Doctor]] at the end of the 2017 Christmas special, and is the first woman to be cast as the character. Whittaker had previously starred in television series such as ''[[Return to Cranford]]'',  ''[[Broadchurch]]'' alongside [[David Tennant]] ([[Tenth Doctor]]) and the dystopian anthology ''[[Black Mirror]]''.&lt;ref name="ThirteenthDoctorCasting"&gt;{{cite web |url=https://www.telegraph.co.uk/tv/2017/07/16/doctor-jodie-whittaker-replace-peter-capaldi-time-lord-regeneration/ |title=Doctor Who: Jodie Whittaker is to replace Peter Capaldi in the Time Lord regeneration game |work=The Telegraph |date=16 July 2017 |accessdate=16 July 2017}}&lt;/ref&gt; The show introduced the Time Lords' ability to change sexes on regeneration in earlier episodes, first in dialogue, then with [[Michelle Gomez]]'s version of [[The Master (Doctor Who)|The Master]].

{| class="wikitable"
|-
! Series lead !! Incarnation !! Tenure&lt;ref name="guestappearances" group=note&gt;Earlier incarnations of the Doctor have occasionally appeared with the then current incarnation in later plots. The First and Second Doctors appeared in the 1973 Third Doctor story, ''[[The Three Doctors (Doctor Who)|The Three Doctors]]''; the First, Second, Third and Fourth appeared in the 1983 Fifth Doctor story, ''[[The Five Doctors]]''; the Second appeared with the Sixth in the 1985 story, ''[[The Two Doctors]]''; the Fifth appeared with the Tenth in the 2007 mini-episode, "[[Time Crash]]"; the Eighth Doctor returned in the 2013 mini-episode "[[The Night of the Doctor]]"; the Tenth appeared with the Eleventh in the 2013 episode "[[The Day of the Doctor]]"; and the First appeared with the Twelfth in the 2017 episodes "[[The Doctor Falls]]" and "[[Twice Upon a Time (Doctor Who)|Twice Upon a Time]]".&lt;/ref&gt;
|-
| [[William Hartnell]] || [[First Doctor]] || 1963–66
|-
| [[Patrick Troughton]] || [[Second Doctor]] || 1966–69
|-
| [[Jon Pertwee]] || [[Third Doctor]] || 1970–74
|-
| [[Tom Baker]] || [[Fourth Doctor]] || 1974–81
|-
| [[Peter Davison]] || [[Fifth Doctor]] || 1982–84&lt;!--Do not change to 1981; as per WP:CONSENSUS of previous talk-page discussions, 1982 is when this Doctor became the lead.--&gt;
|-
| [[Colin Baker]] || [[Sixth Doctor]] || 1984–86
|-
| [[Sylvester McCoy]] || [[Seventh Doctor]] || 1987–89&lt;ref&gt;{{cite web|date=1 March 2008|url=http://www.bbc.co.uk/doctorwho/classic/episodeguide/|title=Official episode guide|publisher=BBC|location=UK|accessdate=31 March 2008}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.bbc.co.uk/doctorwho/classic/episodeguide/index_seventh.shtml|work=Doctor Who&amp;nbsp;— Classic Series|title=Episode Guide&amp;nbsp;— Seventh Doctor Index|publisher=BBC|location=UK|accessdate=30 July 2011}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.bbc.co.uk/doctorwho/classic/episodeguide/tvmovie/detail.shtml#cast|title=TV Movie cast &amp; crew|publisher=BBC|location=UK|accessdate=15 April 2008}}&lt;/ref&gt;
|-
| [[Paul McGann]] || [[Eighth Doctor]] || 1996
|-&lt;-- Please do not add John Hurt here without discussing it on the talk page--&gt;
| [[Christopher Eccleston]] || [[Ninth Doctor]] || 2005
|-
| [[David Tennant]] || [[Tenth Doctor]] || 2005–10
|-
| [[Matt Smith (actor)|Matt Smith]] || [[Eleventh Doctor]] || 2010–13
|-
| [[Peter Capaldi]] || [[Twelfth Doctor]] || 2014–17&lt;!--Do not change to 2013; as per WP:CONSENSUS of previous talk-page discussions, 2014 is when this Doctor became the lead.--&gt;
|-
| [[Jodie Whittaker]] || [[Thirteenth Doctor]] || 
|}
 
In addition to those actors who have headlined the series, others have portrayed versions of the Doctor in guest roles. Notably, in 2013, [[John Hurt]] guest-starred as a hitherto unknown incarnation of the Doctor known as the [[War Doctor]] in the run-up to the show's 50th anniversary special "[[The Day of the Doctor]]".&lt;ref name="HurtDoctor"&gt;{{cite web|url=https://www.telegraph.co.uk/culture/tvandradio/doctor-who/10065201/Doctor-Who-The-Name-of-the-Doctor-BBC-One-review.html|title=Doctor Who: The Name of the Doctor, BBC One, review|work=The Daily Telegraph|date=18 May 2013|accessdate=22 May 2013|author=Hogan, Michael}}&lt;/ref&gt; He is shown in mini-episode "[[The Night of the Doctor]]" [[retroactive continuity|retroactively inserted]] into the show's fictional chronology between McGann and Eccleston's Doctors, although his introduction was written so as not to disturb the established numerical naming of the Doctors.&lt;ref name="HurtDoctorNumber"&gt;{{cite web|url=http://www.digitalspy.co.uk/tv/s7/doctor-who/news/a533505/doctor-who-steven-moffat-on-regeneration-limit.html?rss|title='Doctor Who': Steven Moffat on regeneration limit|work=[[Digital Spy]]|date=24 November 2013|accessdate=25 November 2013|author=Rigby, Sam}}&lt;/ref&gt; Another example is from the 1986 serial ''[[The Trial of a Time Lord]]'', where [[Michael Jayston]] portrayed the [[Valeyard]], who is described as an amalgamation of the darker sides of the Doctor's nature, somewhere between the twelfth and final incarnation.

On rare occasions, other actors have stood in for the lead. In ''[[The Five Doctors]]'', [[Richard Hurndall]] played the First Doctor due to William Hartnell's death in 1975; 34 years later [[David Bradley (actor)|David Bradley]] similarly replaced Hartnell in ''[[Twice Upon a Time (Doctor Who)|Twice Upon a Time]]''. In ''[[Time and the Rani]]'', Sylvester McCoy briefly played the Sixth Doctor during the regeneration sequence, carrying on as the Seventh. For more information, see the [[list of actors who have played the Doctor]]. In other media, the Doctor has been played by various other actors, including [[Peter Cushing]] in [[Dr. Who (Dalek films)|two films]].

The casting of a new Doctor has often inspired debate and speculation. Common topics of focus include the Doctor's sex (prior to the casting of Whittaker, all official incarnations were male), race (all Doctors to date have been white) and age (the youngest actor to be cast is Smith at 26, and the oldest are Capaldi and Hartnell, both 55).&lt;ref&gt;Ted B. Kissell. [https://www.theatlantic.com/entertainment/archive/2013/08/the-depressing-disappointing-maleness-of-i-doctor-who-i-s-new-time-lord/278380/ "The depressing, disappointing maleness of ''Doctor Who'' 's new Time Lord",] ''The Atlantic'', 5 August 2013&lt;/ref&gt;&lt;ref&gt;[http://www.sundayworld.com/entertainment/tv/neil-gaiman-hopes-a-non-white-person-will-take-doctor-who-role-someday "Neil Gaiman hopes a non-white person will take Doctor Who role someday",] {{webarchive|url=https://web.archive.org/web/20131011005312/http://www.sundayworld.com/entertainment/tv/neil-gaiman-hopes-a-non-white-person-will-take-doctor-who-role-someday |date=11 October 2013 }} ''Sunday World'', 8 August 2013.&lt;/ref&gt;&lt;ref name="blastr"&gt;{{cite news| url=http://www.blastr.com/2013-12-9/peter-capaldi-explains-why-no-one-can-be-too-old-play-doctor |title=Peter Capaldi explains why no one can be too old to play The Doctor |last=Jackson |first=Matthew |date=9 December 2013 |accessdate=16 July 2015 |website=Blastr |publisher=[[Syfy]]}}&lt;/ref&gt;

====Meetings of different incarnations====
There have been instances of actors returning at later dates to reprise the role of their specific Doctor. In 1973's ''[[The Three Doctors (Doctor Who)|The Three Doctors]]'', William Hartnell and Patrick Troughton returned alongside Jon Pertwee. For 1983's ''[[The Five Doctors]]'', Troughton and Pertwee returned to star with Peter Davison, and Tom Baker appeared in previously unseen footage from the uncompleted ''[[Shada]]'' episode. For this episode, Richard Hurndall replaced William Hartnell. Patrick Troughton again returned in 1985's ''[[The Two Doctors]]'' with Colin Baker. In 2007, Peter Davison returned in the Children in Need short "[[Time Crash]]" alongside David Tennant, and in 2013's 50th anniversary special episode, "[[The Day of the Doctor]]", David Tennant's [[Tenth Doctor]] appeared alongside [[Matt Smith (actor)|Matt Smith]] as the [[Eleventh Doctor]] and [[John Hurt]] as the [[War Doctor]], as well as brief footage from all of the previous actors.&lt;ref&gt;{{cite episode|title=The Day of the Doctor|series=Doctor Who|network=BBC|station=BBC One|location=Cardiff|date=23 November 2013|minutes=60}}&lt;/ref&gt; In 2017, the First Doctor (this time portrayed by [[David Bradley (actor)|David Bradley]]) returned alongside Peter Capaldi in "[[The Doctor Falls]]" and "[[Twice Upon a Time (Doctor Who)|Twice Upon a Time]]" (both 2017). In "[[The Name of the Doctor]]" (2013), the Eleventh Doctor meets a previously unseen incarnation of himself, subsequently revealed to be the [[War Doctor]].&lt;ref name="HurtDoctor" /&gt; Additionally, multiple incarnations of the Doctor have met in various [[Doctor Who#Audios|audio dramas]] and [[Doctor Who#Books|novels]] based on the television show.

====Revelations about the Doctor====
{{See also|The Doctor (Doctor Who)#Inconsistencies|l1=The Doctor: Inconsistencies}}

Throughout the programme's long history, there have been revelations about the Doctor that have raised additional questions. In ''[[The Brain of Morbius]]'' (1976), it was hinted that the First Doctor might not have been the first incarnation (although the other faces depicted might have been incarnations of the Time Lord Morbius). In subsequent stories the First Doctor was depicted as the earliest incarnation of the Doctor. In ''[[Mawdryn Undead]]'' (1983), the Fifth Doctor explicitly confirmed that he was then currently in his fifth incarnation. Later that same year, during 1983's 20th Anniversary special ''[[The Five Doctors]]'', the First Doctor enquires as to the Fifth Doctor's regeneration; when the Fifth Doctor confirms "Fourth", the First Doctor excitedly replies "Goodness me. So there are five of me now." In 2010, the Eleventh Doctor similarly calls himself "the Eleventh" in "[[The Lodger (Doctor Who)|The Lodger]]". In the 2013 episode "The Time of the Doctor," the Eleventh Doctor clarified he was the product of the twelfth regeneration, due to a previous incarnation which he chose not to count and one other aborted regeneration. The name Eleventh is still used for this incarnation; the same episode depicts the prophesied "Fall of the Eleventh" which had been trailed throughout the series.

During the Seventh Doctor's era, it was hinted that the Doctor was more than just an ordinary Time Lord. In the [[Doctor Who (1996 film)|1996 television film]], the Eighth Doctor describes himself as being "half human".&lt;ref&gt;{{cite web|url=http://www.bbc.co.uk/doctorwho/classic/episodeguide/tvmovie/detail.shtml|title=Doctor Who: the TV movie|publisher=BBC|accessdate=13 June 2008}}&lt;/ref&gt; The BBC's FAQ for the programme notes that "purists tend to disregard this",&lt;ref&gt;{{cite web|url=http://www.bbc.co.uk/doctorwho/s4/faq/plot_continuity.shtml|title=Doctor Who&amp;nbsp;— FAQ&amp;nbsp;— Plot and Continuity|publisher=BBC|date=28 March 2008|accessdate=30 April 2010}}&lt;/ref&gt; instead focusing on his Gallifreyan heritage.

The programme's first serial, ''[[An Unearthly Child]]'', shows that the Doctor has a granddaughter, [[Susan Foreman]]. In the 1967 serial, ''[[Tomb of the Cybermen]]'', when [[Victoria Waterfield]] doubts the Doctor can remember his family because of, "being so ancient", the Doctor says that he can when he really wants to—"The rest of the time they sleep in my mind". The 2005 series reveals that the Ninth Doctor thought he was the last surviving Time Lord, and that his home planet had been destroyed; in "[[The Empty Child]]" (2005), Dr. Constantine states that, "Before the war even began, I was a father and a grandfather. Now I am neither." The Doctor remarks in response, "Yeah, I know the feeling." In "[[Smith and Jones (Doctor Who)|Smith and Jones]]" (2007), when asked if he had a brother, he replied, "No, not any more." In both "[[Fear Her]]" (2006) and "[[The Doctor's Daughter]]" (2008), he states that he had, in the past, been a father.

In "[[The Wedding of River Song]]" (2011), it is implied that the Doctor's true name is a secret that must never be revealed; this is explored further in "The Name of the Doctor" (2013), when River Song speaking his name allows the [[Great Intelligence]] to enter his tomb, and in "The Time of the Doctor" (2013) where speaking his true name becomes the signal by which the Time Lords would know they can safely return to the universe.

===Companions===
{{Main|Companion (Doctor Who)}}
The companion figure&amp;nbsp;– generally a human&amp;nbsp;– has been a constant feature in ''Doctor Who'' since the programme's inception in 1963. One of the roles of the companion is to be a reminder for the Doctor's "moral duty".&lt;ref name=Overview&gt;{{cite news|url=http://news.bbc.co.uk/1/hi/magazine/7736130.stm|title=Doctor Who (before the Tardis)|publisher=BBC News|date=19 November 2008|accessdate=22 May 2012}}&lt;/ref&gt; The Doctor's first companions seen on screen were his granddaughter [[Susan Foreman]] ([[Carole Ann Ford]]) and her teachers [[Barbara Wright (Doctor Who)|Barbara Wright]] ([[Jacqueline Hill]]) and [[Ian Chesterton]] ([[William Russell (actor)|William Russell]]). These characters were intended to act as [[audience surrogates]], through which the audience would discover information about the Doctor who was to act as a mysterious father figure.&lt;ref name=Overview/&gt; The only story from the original series in which the Doctor travels alone is ''[[The Deadly Assassin]]'' (1976). Notable companions from the earlier series included [[Romana (Doctor Who)|Romana]] ([[Mary Tamm]] and [[Lalla Ward]]), a [[Time Lord|Time Lady]]; [[Sarah Jane Smith]] ([[Elisabeth Sladen]]); and [[Jo Grant]] ([[Katy Manning]]). Dramatically, these characters provide a figure with whom the audience can identify, and serve to further the story by requesting exposition from the Doctor and manufacturing peril for the Doctor to resolve. The Doctor regularly gains new companions and loses old ones; sometimes they return home or find new causes&amp;nbsp;— or loves&amp;nbsp;— on worlds they have visited. Some have died during the course of the series. Companions are usually human, or humanoid aliens.

Since the 2005 revival, the Doctor generally travels with a primary female companion, who occupies a larger narrative role. Steven Moffat described the companion as the main character of the show, as the story begins anew with each companion and she undergoes more change than the Doctor.&lt;ref&gt;{{cite web|url=http://www.radiotimes.com/news/2012-04-19/steven-moffat-the-companion-is-the-main-character-in-doctor-who-not-the-doctor|title=Steven Moffat: the companion is the main character in Doctor Who, not the Doctor|work=Radio Times|publisher=[[BBC Magazines]]|last=Jones|first=Paul|date=19 April 2012|accessdate=28 November 2013}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://blog.zap2it.com/frominsidethebox/2013/03/doctor-who-returns-steven-moffat-talks-new-companion-clara-and-jenna-louise-coleman.html|title='Doctor Who' returns: Steven Moffat talks new companion Clara and Jenna-Louise Coleman|publisher=[[Zap2it]]|last=Berkshire|first=Geoff|date=27 March 2013|accessdate=28 November 2013|deadurl=yes|archiveurl=https://web.archive.org/web/20131203002317/http://blog.zap2it.com/frominsidethebox/2013/03/doctor-who-returns-steven-moffat-talks-new-companion-clara-and-jenna-louise-coleman.html|archivedate=3 December 2013}}&lt;/ref&gt; The primary companions of the [[Companion (Doctor Who)#Ninth Doctor|Ninth]] and [[Companion (Doctor Who)#Tenth Doctor|Tenth]] Doctors were [[Rose Tyler]] ([[Billie Piper]]), [[Martha Jones]] ([[Freema Agyeman]]), and [[Donna Noble]] ([[Catherine Tate]]) with [[Mickey Smith]] ([[Noel Clarke]]) and [[Jack Harkness]] ([[John Barrowman]]) recurring as secondary companion figures.&lt;ref name=AbsentPostcolonial&gt;{{cite journal|journal=Journal of Commonwealth Literature|doi=10.1177/0021989410366891|url=http://jcl.sagepub.com/cgi/content/abstract/45/2/207|title="Sociopathetic Abscess" or "Yawning Chasm"? The Absent Postcolonial Transition in ''Doctor Who''|last=Orthia|first=Lindy A.|year=2010|volume=45|issue=2|pages=207–225}}&lt;/ref&gt; The [[Eleventh Doctor]] became the first to travel with a married couple, [[Amy Pond]] ([[Karen Gillan]]) and [[Rory Williams]] ([[Arthur Darvill]]), whilst out-of-sync meetings with [[River Song (Doctor Who)|River Song]] ([[Alex Kingston]]) and [[Clara Oswald]] ([[Jenna Coleman]]) provided ongoing story arcs. The [[Doctor Who (series 10)|tenth series]] introduced [[Pearl Mackie]] as [[Bill Potts (Doctor Who)|Bill Potts]], the Doctor's newest traveling companion.&lt;ref name="Mackie"&gt;{{cite web |url=https://www.bbc.co.uk/news/entertainment-arts-36111598 |title=Doctor Who: Pearl Mackie named as new companion |website=BBC |date=23 April 2016 |accessdate=24 April 2016 }}&lt;/ref&gt; Bill Potts is the Doctor's first openly gay companion. Pearl Mackie said that the increased representation for LGBTQ people is important on a mainstream show.&lt;ref&gt;{{cite web|title=Bill Potts|url=https://www.telegraph.co.uk/tv/0/doctor-new-companion-bill-potts-gay-actress-says-time/|website=The Telegraph}}&lt;/ref&gt;

Some companions have gone on to re-appear, either in the main series or in spin-offs. Sarah Jane Smith became the central character in ''[[The Sarah Jane Adventures]]'' (2007–11) following a return to ''Doctor Who'' in 2006. Guest stars in the series included former companions Jo Grant, [[K9 (Doctor Who)|K9]], and [[Brigadier Lethbridge-Stewart]] ([[Nicholas Courtney]]). The character of Jack Harkness also served to launch a spin-off, ''[[Torchwood]]'', (2006–2011) in which Martha Jones also appeared.

===Adversaries===
{{See also|List of Doctor Who universe creatures and aliens|List of Doctor Who villains}}
When Sydney Newman commissioned the series, he specifically did not want to perpetuate the cliché of the "[[bug-eyed monster]]" of science fiction.&lt;ref&gt;{{cite news|title=Doctor Who (before the Tardis)|url=http://news.bbc.co.uk/2/hi/uk_news/magazine/7736130.stm|publisher=BBC Magazine|date=19 November 2008|accessdate=3 January 2009}}&lt;/ref&gt; However, [[monster]]s were popular with audiences and so became a staple of ''Doctor Who'' almost from the beginning.

With the show's 2005 revival, executive producer Russell T Davies stated his intention to reintroduce classic [[Cultural icon|icons]] of ''Doctor Who''.&lt;ref&gt;{{cite news|title=Doctor Who series two secrets revealed|url=http://news.bbc.co.uk/cbbcnews/hi/newsid_4100000/newsid_4104500/4104586.stm|publisher=BBC|accessdate=29 August 2013|date=19 June 2005}}&lt;/ref&gt; The [[Auton]]s with the Nestene Consciousness and [[Dalek]]s returned in series 1, [[Cyberman|Cybermen]] in series 2, the [[List of Doctor Who monsters and aliens#Macra|Macra]] and [[Master (Doctor Who)|the Master]] in series 3, the [[Sontaran]]s and [[Davros]] in series 4, and the [[Time Lord]]s including [[Rassilon]] in the 2009–10 Specials. Davies' successor, Steven Moffat, has continued the trend by reviving the [[Silurian (Doctor Who)|Silurians]] in series 5, [[Cybermat]]s in series 6, the [[Great Intelligence]] and the [[Ice Warrior]]s in Series 7, and [[Zygon]]s in the 50th Anniversary Special.&lt;ref&gt;{{cite video|people=|year=2011|title=Monster Files: Cybermats|medium=|publisher=iTunes Store|time=}}&lt;/ref&gt; Since its 2005 return, the series has also introduced new recurring aliens: [[Slitheen]] (Raxacoricofallapatorian), [[Ood]], [[Judoon]], [[Weeping Angel]]s and [[Silence (Doctor Who)|the Silence]].

Besides infrequent appearances by the Ice Warriors, [[Ogron]]s, the [[Rani (Doctor Who)|Rani]], and [[Black Guardian]], three adversaries have become particularly iconic: the Daleks, the Cybermen, and the Master.

====Daleks====
{{Main|Dalek}}
[[File:Dalek (10634451635).jpg|thumb|upright=0.6|A Dalek at the Doctor Who Experience, Cardiff]]
The Dalek race, which first appeared in the show's second serial in 1963,&lt;ref&gt;{{cite web|url=https://www.imdb.com/title/tt0562905/|title=The Dead Planet|accessdate=30 June 2011}}&lt;/ref&gt; are ''Doctor Who''{{'}}s oldest villains. The Daleks are [[Kaled]]s from the planet [[Skaro]], mutated by the scientist [[Davros]] and housed in mechanical armour shells for mobility. The actual creatures resemble octopuses with large, pronounced brains. Their armour shells have a single eye-stalk, a sink-plunger-like device that serves the purpose of a hand, and a [[directed-energy weapon]]. Their main weakness is their eyestalk;  attacks upon them using various weapons can blind a Dalek, making it go mad. Their chief role in the series plot, as they frequently remark in their instantly recognisable metallic voices, is to "exterminate" all non-Dalek beings. They even attack the  [[Time Lord]]s in the [[Time War (Doctor Who)|Time War]], as shown during the 50th Anniversary of the show. They continue to be a recurring 'monster' within the Doctor Who franchise, their most recent appearances being in the 2015 episodes "[[The Witch's Familiar]]" and "[[Hell Bent (Doctor Who)|Hell Bent]]". Davros has also been a recurring figure since his debut in ''[[Genesis of the Daleks]]'', although played by several different actors.

The Daleks were created by writer [[Terry Nation]] (who intended them to be an [[allegory]] of the [[Nazism|Nazis]])&lt;ref&gt;{{cite web|url=http://www.museum.tv/archives/etv/N/htmlN/nationterry/nationterry.htm|title=Nation, Terry|accessdate=19 May 2008}}&lt;/ref&gt; and BBC designer [[Raymond Cusick]].&lt;ref name="cusick"&gt;{{cite web|url=https://www.bbc.co.uk/news/entertainment-arts-21563344|title=Doctor Who Dalek designer Ray Cusick dies after illness|publisher=BBC|date=24 February 2013|accessdate=27 October 2013}}&lt;/ref&gt; The Daleks' début in the programme's second serial, ''[[The Daleks]]'' (1963–64), made both the Daleks and ''Doctor Who'' very popular. A Dalek appeared on a postage stamp celebrating British popular culture in 1999, photographed by [[Antony Armstrong-Jones, 1st Earl of Snowdon|Lord Snowdon]]. In "[[Victory of the Daleks]]" a new set of Daleks were introduced that come in a range of colours; the colour denoting its role within the species.&lt;ref&gt;{{cite web|url=http://www.bbc.co.uk/programmes/p007l73p|title=The New Daleks|publisher=BBC|date=29 April 2010|accessdate=12 February 2018}}&lt;/ref&gt;

====Cybermen====
{{Main|Cyberman}}
[[File:Cyberman from Doctor Who (529659465).jpg|thumb|upright=0.55|A 2006 Cyberman]]
Cybermen were originally a wholly organic species of humanoids originating on Earth's [[Counter-Earth|twin planet]] Mondas that began to implant more and more artificial parts into their bodies. This led to the race becoming coldly logical and calculating [[cyborg]]s, with emotions usually only shown when naked aggression was called for. With the demise of Mondas, they acquired Telos as their new home planet. They continue to be a recurring 'monster' within the ''Doctor Who'' franchise.

The 2006 series introduced a totally new variation of Cybermen. These Cybus Cybermen were created in a [[parallel universe (fiction)|parallel universe]] by the mad inventor John Lumic; he was attempting to preserve the humans by transplanting their brains into powerful metal bodies, sending them orders using a mobile phone network and inhibiting their emotions with an electronic chip.

====The Master====
{{Main|Master (Doctor Who)}}
The Master is the Doctor's [[archenemy]], a renegade [[Time Lord]] who desires to rule the universe. Conceived as "[[Professor Moriarty]] to the Doctor's [[Sherlock Holmes]]",&lt;ref&gt;''Doctor Who Magazine Special Edition'' No. 2, 5 September 2002, [subtitled ''The Complete Third Doctor''], p. 14.&lt;/ref&gt; the character first appeared in 1971. As with the Doctor, the role has been portrayed by several actors, since the Master is a Time Lord as well and able to regenerate; the first of these actors was [[Roger Delgado]], who continued in the role until his death in 1973. The Master was briefly played by [[Peter Pratt]] and [[Geoffrey Beevers]] until [[Anthony Ainley]] took over and continued to play the character until Doctor Who's hiatus in 1989. The Master returned in the 1996 television movie of ''[[Doctor Who (1996 film)|Doctor Who]]'', and was played by American actor [[Eric Roberts]].

Following the series revival in 2005, [[Derek Jacobi]] provided the character's re-introduction in the 2007 episode "[[Utopia (Doctor Who)|Utopia]]". During that story, the role was then assumed by [[John Simm]] who returned to the role multiple times through the [[Tenth Doctor]]'s tenure.&lt;ref&gt;{{cite web|url=http://www.bbc.co.uk/doctorwho/s4/news/latest/090728_news_02|title=John Simm Returns for the Finale!|publisher=}}&lt;/ref&gt; As of the 2014 episode "[[Dark Water (Doctor Who)|Dark Water]]," it was revealed that the Master had become a female incarnation or "Time Lady," going by the name of "Missy" (short for Mistress, the feminine equivalent of "Master"). This incarnation is played by [[Michelle Gomez]].

[[John Simm]] returned in his role as the Master in the [[Doctor Who (series 10)|tenth series]].&lt;ref name="Series10"&gt;{{cite web|url=http://www.bbc.co.uk/blogs/doctorwho/entries/9ecdaaa1-10e1-45a7-a266-bdd7a1adcdf2|title=John Simm to return as the Master in Doctor Who|publisher=BBC|date=6 April 2017|accessdate=6 April 2017}}&lt;/ref&gt;

==Music==
{{See also|List of Doctor Who composers}}

===Theme music===
{{Main|Doctor Who theme music}}
{{Listen|filename=Doctor Who theme excerpt.ogg|title=Doctor Who theme excerpt|description=An excerpt from the original (1963) classic theme music to ''Doctor Who''}}

The [[Doctor Who theme music|''Doctor Who'' theme music]] was one of the first [[electronic music]] signature tunes for television, and after five decades remains one of the most easily recognised. The original theme was composed by [[Ron Grainer]] and realised by [[Delia Derbyshire]] of the [[BBC Radiophonic Workshop]], with assistance from [[Dick Mills]] and was released as a single on Decca F 11837 in 1964.   The various parts were built up using [[musique concrète]] techniques, by creating [[tape loop]]s of an individually struck piano string and individual test [[oscillation|oscillators]] and filters. The Derbyshire arrangement served, with minor edits, as the theme tune up to the end of [[Doctor Who (season 17)|season 17]] (1979–80). It is regarded as a significant and innovative piece of electronic music, recorded well before the availability of commercial synthesisers or multitrack mixers. Each note was individually created by cutting, splicing, speeding up and slowing down segments of [[Magnetic tape sound recording|analogue tape]] containing recordings of a single plucked string, [[white noise]], and the simple [[harmonic]] waveforms of [[Tone generator|test-tone oscillators]], intended for calibrating equipment and rooms, not creating music. New techniques were invented to allow [[Audio mixing (recorded music)|mixing]] of the music, as this was before the era of multitrack tape machines. On hearing the finished result, Grainer asked, "Jeez, Delia, did I write that?"&lt;ref&gt;{{cite web|url=https://www.bbc.co.uk/music/articles/36b860f1-b3d5-4fcc-acdc-c2e95fb99176|title=Surprising Facts about BBC Theme Tunes You've Heard Hundreds of Times|first=Phil|last=Hebblethwaite |date=29 June 2016|website=Bbc.co.uk}}&lt;/ref&gt; Although Grainer was willing to give Derbyshire the co-composer credit, it was against BBC policy at the time.&lt;ref&gt;{{cite web|last1=Pidd|first1=Helen|title=Doctor Who theme's co-creator honoured with posthumous PhD|url=https://www.theguardian.com/music/2017/nov/20/delia-derbyshire-doctor-who-theme-co-creator-posthumous-phd|website=The Guardian|publisher=Guardian News and Media Limited|accessdate=31 December 2017}}&lt;/ref&gt;&lt;ref&gt;{{cite web|last1=Allen|first1=Ben|title=Doctor Who theme co-composer honoured with posthumous PhD|url=http://www.radiotimes.com/news/tv/2017-11-21/doctor-who-theme-co-composer-honoured-delia-derbyshire-honorary-phd/|website=Radio Times|publisher=Immediate Media Company Ltd|accessdate=31 December 2017}}&lt;/ref&gt;

A different arrangement was recorded by [[Peter Howell (musician)|Peter Howell]] for [[Doctor Who (season 18)|season 18]] (1980), which was in turn replaced by [[Dominic Glynn]]'s arrangement for the season-long serial ''[[The Trial of a Time Lord]]'' in [[Doctor Who (season 23)|season 23]] (1986). [[Keff McCulloch]] provided the new arrangement for the [[Seventh Doctor]]'s era which lasted from [[Doctor Who (season 24)|season 24]] (1987) until the series' suspension in 1989. American composer [[John Debney]] created a new arrangement of [[Ron Grainer]]'s original theme for ''[[Doctor Who (film)|Doctor Who]]'' in 1996. For the return of the series in 2005, [[Murray Gold]] provided a new arrangement which featured [[sampling (music)|samples]] from the 1963 original with further elements added; in the 2005 Christmas episode "[[The Christmas Invasion]]".

A new arrangement of the theme, once again by Gold, was introduced in the 2007 Christmas special episode, "[[Voyage of the Damned (Doctor Who)|Voyage of the Damned]]"; Gold returned as composer for the 2010 series.&lt;ref&gt;{{cite web|url=http://gallifreynewsbase.blogspot.com/2010/01/murray-gold-returns.html|title=Murray Gold Returns|date=3 January 2010|work=Doctor Who News Page}}&lt;/ref&gt; He was responsible for a new version of the theme which was reported to have had a hostile reception from some viewers.&lt;ref&gt;{{cite web|url=https://www.telegraph.co.uk/culture/tvandradio/doctor-who/7603262/Doctor-Who-nasty-new-theme-tune-angers-fans.html|title=Doctor Who: 'nasty' new theme tune angers fans|work=The Daily Telegraph|date=18 April 2010|accessdate=20 May 2010}}&lt;/ref&gt; In 2011, the theme tune charted at number 228 of radio station Classic FM's Hall of Fame, a survey of classical music tastes. A revised version of Gold's 2010 arrangement had its debut over the opening titles of the 2012 Christmas special "[[The Snowmen]]", and a further revision of the arrangement was made for the 50th Anniversary special "[[The Day of the Doctor]]" in November 2013.&lt;ref&gt;{{cite web|url=http://www.radiotimes.com/news/2013-10-21/the-name-of-the-doctor/|title=The Name of the Doctor|website=Radiotimes.com|accessdate=1 July 2018}}&lt;/ref&gt;

Versions of the "Doctor Who Theme" have also been released as pop music over the years. In the early 1970s, Jon Pertwee, who had played the Third Doctor, recorded a version of the Doctor Who theme with spoken lyrics, titled, "Who Is the Doctor".&lt;ref group=note&gt;Often mistitled "I am the Doctor" on YouTube uploads. Originally released as a 7" vinyl single, plain sleeve, December 1972 on label Purple PUR III&lt;/ref&gt; In 1978 a disco version of the theme was released in the UK, Denmark and Australia by the group Mankind, which reached number 24 in the UK charts. In 1988 the band The Justified Ancients of Mu Mu (later known as [[The KLF]]) released the single "[[Doctorin' the Tardis]]" under the name The Timelords, which reached No. 1 in the UK and No. 2 in Australia; this version incorporated several other songs, including "Rock and Roll Part 2" by [[Gary Glitter]] (who recorded vocals for some of the CD-single remix versions of "Doctorin' the Tardis").&lt;ref name="guardianmusic"&gt;{{cite news|url=http://blogs.guardian.co.uk/music/2008/07/doctor_who_a_musical_force.html|title=Doctor Who: a musical force?|accessdate=7 July 2008|last=Peel|first=Ian|date=7 July 2008|work=The Guardian|publisher=blog|location=London}}&lt;/ref&gt; Others who have covered or reinterpreted the theme include [[Orbital (band)|Orbital]],&lt;ref name="guardianmusic" /&gt; [[Pink Floyd]],&lt;ref name="guardianmusic" /&gt; the Australian string ensemble [[FourPlay Electric String Quartet|Fourplay]], New Zealand punk band [[Blam Blam Blam]], [[The Pogues]], [[Thin Lizzy]], [[Dub Syndicate]], and the comedians [[Bill Bailey]] and [[Mitch Benn]]. Both the theme and obsessive fans were satirised on ''[[The Chaser's War on Everything]]''. The theme tune has also appeared on many compilation CDs, and has made its way into mobile-phone ringtones. Fans have also produced and distributed their own remixes of the theme. In January 2011 the Mankind version was released as a [[music download|digital download]] on the album ''Gallifrey And Beyond''.

On 26 June 2018, producer Chris Chibnall announced that the musical score for [[Doctor Who (series 11)|series 11]] would be provided by [[Royal Birmingham Conservatoire]] alumnus Segun Akinola.&lt;ref name= "akinola"&gt;{{cite news |last=Jeffery |first=Morgan |url= http://www.digitalspy.com/tv/doctor-who/news/a860312/doctor-who-series-11-composer-music/ |title=Doctor Who series 11 composer has been revealed |work=[[Digital Spy]] |date=26 June 2018 |accessdate=26 June 2018}}&lt;/ref&gt;

===Incidental music===
{{Main|List of music featured on Doctor Who}}
{{See also|List of Doctor Who music releases}}
Most of the innovative incidental music for ''Doctor Who'' has been specially commissioned from freelance composers, although in the early years some episodes also used [[Royalty free music|stock music]], as well as occasional excerpts from original recordings or [[cover version]]s of songs by popular music acts such as [[The Beatles]] and [[The Beach Boys]]. Since its 2005 return, the series has featured occasional use of excerpts of pop music from the 1970s to the 2000s.

The incidental music for the first ''Doctor Who'' adventure, ''An Unearthly Child'', was written by [[Norman Kay (composer)|Norman Kay]]. Many of the stories of the [[William Hartnell]] period were scored by electronic music pioneer [[Tristram Cary]], whose ''Doctor Who'' credits include ''The Daleks'', ''[[Marco Polo (Doctor Who)|Marco Polo]]'', ''The Daleks' Master Plan'', ''The Gunfighters'' and ''[[The Mutants]]''. Other composers in this early period included [[Richard Rodney Bennett]], [[Carey Blyton]] and [[Geoffrey Burgon]].

The most frequent musical contributor during the first 15 years was [[Dudley Simpson]], who is also well known for his theme and incidental music for ''[[Blake's 7]]'', and for his haunting theme music and score for the original 1970s version of ''[[The Tomorrow People]]''. Simpson's first ''Doctor Who'' score was ''[[Planet of Giants]]'' (1964) and he went on to write music for many adventures of the 1960s and 1970s, including most of the stories of the Jon Pertwee/Tom Baker periods, ending with ''[[The Horns of Nimon]]'' (1979). He also made a [[cameo appearance]] in ''The Talons of Weng-Chiang'' (as a [[Music hall]] conductor).

In 1980 starting with the serial ''[[The Leisure Hive]]'' the task of creating incidental music was assigned to the Radiophonic Workshop. [[Paddy Kingsland]] and [[Peter Howell (musician)|Peter Howell]] contributed many scores in this period and other contributors included [[Roger Limb]], [[Malcolm Clarke]] and [[Jonathan Gibbs (composer)|Jonathan Gibbs]].

The Radiophonic Workshop was dropped after 1986's ''[[The Trial of a Time Lord]]'' series, and [[Keff McCulloch]] took over as the series' main composer until the end of its run, with [[Dominic Glynn]] and [[Mark Ayres]] also contributing scores.

All the incidental music for the 2005 revived series has been composed by [[Murray Gold]] and [[Ben Foster (orchestrator)|Ben Foster]] and has been performed by the [[BBC National Orchestra of Wales]] from the 2005 Christmas episode "[[The Christmas Invasion]]" onwards. A concert featuring the orchestra performing music from the first two series took place on 19 November 2006 to raise money for Children in Need. David Tennant hosted the event, introducing the different sections of the concert. Murray Gold and [[Russell T Davies]] answered questions during the interval and [[Dalek]]s and [[Cyberman|Cybermen]] appeared whilst music from their stories was played. The concert aired on [[BBC Red Button|BBCi]] on Christmas Day 2006. A [[Doctor Who Prom (2008)|Doctor Who Prom]] was celebrated on 27 July 2008 in the [[Royal Albert Hall]] as part of the annual [[BBC Proms]]. The BBC Philharmonic and the [[London Philharmonic Choir]] performed Murray Gold's compositions for the series, conducted by Ben Foster, as well as a selection of classics based on the theme of space and time. The event was presented by [[Freema Agyeman]] and guest-presented by various other stars of the show with numerous monsters participating in the proceedings. It also featured the specially filmed mini-episode "[[Music of the Spheres (Doctor Who)|Music of the Spheres]]", written by Russell T Davies and starring David Tennant.&lt;ref&gt;{{cite web|date=27 July 2008|url=http://www.bbc.co.uk/proms/2008/whatson/2707.shtml|title=BBC Prom 27 July 2008|publisher=BBC|accessdate=29 September 2008}}&lt;/ref&gt;

Six soundtrack releases have been released since 2005. The [[Doctor Who: Original Television Soundtrack|first]] featured tracks from the first two series,&lt;ref&gt;{{cite web|date=17 July 2006 |url=http://www.bbc.co.uk/doctorwho/news/cult/news/drwho/2006/07/17/33953.shtml |title=Who soundtrack soon |publisher=BBC |accessdate=4 August 2006 |deadurl=yes |archiveurl=https://web.archive.org/web/20060813135617/http://www.bbc.co.uk/doctorwho/news/cult/news/drwho/2006/07/17/33953.shtml |archivedate=13 August 2006  }}&lt;br /&gt;{{cite web|date=1 November 2006 |url=http://www.silvascreen.co.uk/news.htm |archiveurl=https://web.archive.org/web/20061212205542/http://www.silvascreen.co.uk/news.htm |archivedate=12 December 2006 |title=Silva Screen announces Doctor Who CD release date |publisher=silvascreen.co.uk |accessdate=4 December 2006 }}&lt;/ref&gt; the [[Doctor Who: Original Television Soundtrack - Series 3|second]] and [[Doctor Who: Original Television Soundtrack - Series 4|third]] featured music from the third and fourth series respectively. The [[Doctor Who: Original Television Soundtrack - Series 4: The Specials|fourth]] was released on 4 October 2010 as a two disc special edition and contained music from the 2008–2010 specials (''[[The Next Doctor]]'' to ''[[The End of Time (Doctor Who)|End of Time Part 2]]'').&lt;ref&gt;{{cite web|title=Doctor Who&amp;nbsp;– Series 4 – Murray Gold|url=http://silvascreenmusic.greedbag.com/buy/doctor-who-series-3/|publisher=Silva Screen Music|accessdate=6 September 2013}}&lt;/ref&gt;&lt;ref&gt;{{cite web|title=Doctor Who: Series 4-The Specials – Murray Gold|url=http://silvascreenmusic.greedbag.com/buy/doctor-who-series-4-the-specials-0/|publisher=Silva Screen Music|accessdate=6 September 2013}}&lt;/ref&gt; The [[Doctor Who: Original Television Soundtrack - Series 5|soundtrack for Series 5]] was released on 8 November 2010.&lt;ref&gt;{{cite web|title=Doctor Who Series 5 Original TV Soundtrack (Music CD)|url=http://www.bbcshop.com/doctor-who/doctor-who-series-5-original-tv-soundtrack-music-cd/invt/silcd1345|publisher=BBC|accessdate=6 September 2013}}&lt;/ref&gt; In February 2011, a soundtrack was released for the 2010 Christmas special: "A Christmas Carol",&lt;ref&gt;{{cite web|title=Doctor Who: A Christmas Carol (Soundtrack)|url=http://www.bbcshop.com/doctor-who/doctor-who-a-christmas-carol-soundtrack/invt/silcd1360|publisher=BBC|accessdate=6 September 2013}}&lt;/ref&gt; and in December 2011 the [[Doctor Who: Original Television Soundtrack - Series 6|soundtrack for Series 6]] was released, both by Silva Screen Records.&lt;ref&gt;{{cite web|title=Doctor Who: Series 6 (Soundtrack)|url=http://www.bbcshop.com/soundtracks/doctor-who-series-6-soundtrack/invt/silcd1375|publisher=BBC|accessdate=6 September 2013}}&lt;/ref&gt;

In 2013, a 50th-anniversary boxed set of audio CDs was released featuring music and sound effects from Doctor Who’s 50-year history. The celebration continued in 2016 with the release of Doctor Who: The 50th Anniversary Collection Four LP Box Set by New York City-based Spacelab9. The company pressed 1,000 copies of the set on "Metallic Silver" vinyl, dubbed the "Cyberman Edition".&lt;ref&gt;{{cite web|last1=Coopee|first1=Todd|title=Doctor Who: The 50th Anniversary Collection 4 LP Box Set|url=https://toytales.ca/doctor-who-the-50th-anniversary-collection-4-lp-box-set/|website=ToyTales.ca}}&lt;/ref&gt;

==Viewership==
{{Main|Doctor Who fandom}}

===United Kingdom===
[[File:Dr Who (316350537).jpg|right|thumb|upright|The image of the [[TARDIS]] is iconic in British popular culture.]]
Premiering the day after the [[assassination of John F. Kennedy]], the first episode of ''Doctor Who'' was repeated with the second episode the following week. ''Doctor Who'' has always appeared initially on the BBC's mainstream BBC One channel, where it is regarded as a family show, drawing audiences of many millions of viewers; episodes were also repeated on [[BBC Three (former)|BBC Three]], before its transition to an [[BBC Three (online)|online-only channel]] . The programme's popularity has waxed and waned over the decades, with three notable periods of high ratings.&lt;ref name="ratings chart"&gt;{{cite news|first=Matt |last=Hilton |title=Doctor Who&amp;nbsp;— Top Chart Placing&amp;nbsp;– 1963–2008 |url=http://www.gallifreyone.com/picview.php?ret=news&amp;sub=news&amp;id=season4_final_4.jpg |work=Doctor Who News Page |publisher=[[Outpost Gallifrey]] |date=16 July 2008 |accessdate=16 July 2008 |deadurl=yes |archiveurl=https://web.archive.org/web/20080719041204/http://www.gallifreyone.com/picview.php?ret=news&amp;sub=news&amp;id=season4_final_4.jpg |archivedate=19 July 2008  }};{{cite web|url=http://www.gallifreyone.com/picview.php?ret=news&amp;sub=news&amp;id=2007_ratings.jpg |title=Doctor Who Top Ratings: 1963–2007 |accessdate=17 July 2008 |first=Matt |last=Hilton |date=11 January 2008 |work=Doctor Who News Page |publisher=[[Outpost Gallifrey]] |archiveurl=https://web.archive.org/web/20080315003100/http://www.gallifreyone.com/picview.php?ret=news&amp;sub=news&amp;id=2007_ratings.jpg |archivedate=15 March 2008 }}&lt;/ref&gt; The first of these was the "[[Dalekmania]]" period (circa 1964–1965), when the popularity of the Daleks regularly brought ''Doctor Who'' ratings of between 9 and 14&amp;nbsp;million, even for stories which did not feature them.&lt;ref name="ratings chart" /&gt;&lt;ref&gt;{{cite news|first=Douglas |last=Marlborough |title=Dead, but they won't lie down |url=http://www.cuttingsarchive.org.uk/news_mag/1960s/cuttings/dead.htm |format=Reprint, hosted on Doctor Who Cuttings Archive |work=Daily Mail |location=London |date=28 December 1964 |accessdate=16 July 2008 |deadurl=yes |archiveurl=https://web.archive.org/web/20060619093807/http://cuttingsarchive.org.uk/news_mag/1960s/cuttings/dead.htm |archivedate=19 June 2006 }}&lt;/ref&gt; The second was the mid to late 1970s, when Tom Baker occasionally drew audiences of over 12&amp;nbsp;million.&lt;ref name="ratings chart" /&gt;

An audience survey during the 1970s revealed that at the time 60% of the viewership were adults.{{citation needed|date=April 2017}}

During the [[ITV (TV network)|ITV]] network strike of 1979, viewership peaked at 16&amp;nbsp;million.{{citation needed|date=November 2013}} Figures remained respectable into the 1980s, but fell noticeably after the programme's 23rd series was postponed in 1985 and the show was off the air for 18 months. At the time of Season 19's broadcast in 1982 the show was being watched by a global audience of 98 million, 88 million in 38 foreign countries, and an average of ten million in the United Kingdom.{{citation needed|date=April 2017}}

Its late 1980s performance of three to five million viewers was seen as poor at the time and was, according to the BBC Board of Control, a leading cause of the programme's 1989 suspension. Some fans considered this disingenuous, since the programme was scheduled against the soap opera ''[[Coronation Street]]'', the most popular show at the time.{{citation needed|date=April 2017}} During Tennant's run (the third notable period of high ratings), the show had consistently high viewership; with the Christmas specials regularly attracting over 10 million.&lt;ref name="ratings chart" /&gt;

The BBC One broadcast of "[[Rose (Doctor Who episode)|Rose]]", the first episode of the 2005 revival, drew an average audience of 10.81&amp;nbsp;million, third highest for BBC One that week and seventh across all channels.&lt;ref name="ratings chart" /&gt;&lt;ref&gt;{{cite web|url=http://www.barb.co.uk/viewingsummary/weekreports.cfm?report=weeklyterrestrial&amp;requesttimeout=500 |title=Weekly Viewing Summary: Terrestrial Top 30&amp;nbsp;– Week ending 6 July 2008 |accessdate=16 July 2008 |work=[[Broadcasters' Audience Research Board]] |date=16 July 2008 |deadurl=yes |archiveurl=https://web.archive.org/web/20080713233601/http://www.barb.co.uk/viewingsummary/weekreports.cfm?report=weeklyterrestrial&amp;RequestTimeout=500 |archivedate=13 July 2008 }}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.gallifreyone.com/cgi-bin/viewnews.cgi?id=EkEykpAEuAeSoAAghE&amp;tmpl=newsrss&amp;style=feedstyle |title=Journey's End: Officially Number One |accessdate=16 July 2008 |last=Hilton |first=Matt |date=16 July 2008 |work=Doctor Who News Page |publisher=[[Outpost Gallifrey]] |deadurl=yes |archiveurl=https://web.archive.org/web/20080719155722/http://www.gallifreyone.com/cgi-bin/viewnews.cgi?id=EkEykpAEuAeSoAAghE&amp;tmpl=newsrss&amp;style=feedstyle |archivedate=19 July 2008 }}&lt;/ref&gt; The current revival also garners the highest audience [[Appreciation Index]] of any drama on television.&lt;ref&gt;{{cite news|url=http://blogs.thestage.co.uk/tvtoday/2007/11/these-scifi-people-vote/ |title=These sci-fi people vote |last=Wright |first=Mark |work=[[The Stage]] |date=1 November 2007 |accessdate=9 April 2009 |deadurl=yes |archiveurl=https://web.archive.org/web/20080409164855/http://blogs.thestage.co.uk/tvtoday/2007/11/these-scifi-people-vote/ |archivedate= 9 April 2008 |df= }}&lt;/ref&gt;

===International===
[[File:DoctorWhoWorld Map.svg|right|thumb|upright=1.20|Map of countries that have or currently broadcast ''Doctor Who'' in either its current or classic incarnation (map correct as of October 2014)]]
''Doctor Who'' has been broadcast internationally outside of the United Kingdom since 1964, a year after the show first aired. As of 1 January 2013, the modern series has been or is currently broadcast weekly in more than 50 countries.{{citation needed|date=April 2017}}

''Doctor Who'' is one of the five top grossing titles for [[BBC Worldwide]], the BBC's commercial arm.&lt;ref&gt;{{cite news|first=Mark|last=Sweney|title=Profits grow at BBC Worldwide|url=https://www.theguardian.com/media/2008/jul/08/bbc.television2|work=The Guardian|date=8 July 2008|accessdate=8 July 2008|location=London}}&lt;/ref&gt; BBC Worldwide CEO [[John Smith (BBC executive)|John Smith]] has said that ''Doctor Who'' is one of a small number of "Superbrands" which Worldwide will promote heavily.&lt;ref&gt;{{cite news|first=Gavin|last=O'Connor|title=Daleks speak to all nations|url=http://www.walesonline.co.uk/news/wales-news/2008/07/13/daleks-speak-to-all-nations-91466-21331585/|work=[[Wales on Sunday]]|date=13 July 2008|accessdate=13 July 2008|archiveurl=https://web.archive.org/web/20080715043335/http://www.walesonline.co.uk/news/wales-news/2008/07/13/daleks-speak-to-all-nations-91466-21331585/|archivedate=15 July 2008}}&lt;/ref&gt;

Only four episodes have ever had their premiere showings on channels other than BBC One. The 1983 20th anniversary special ''[[The Five Doctors]]'' had its début on 23 November (the actual date of the anniversary) on a number of PBS stations two days prior to its BBC One broadcast. The 1988 story ''[[Silver Nemesis]]'' was broadcast with all three episodes airing back to back on [[Television New Zealand|TVNZ]] in New Zealand in November, after the first episode had been shown in the UK but before the final two instalments had aired there. Finally, the 1996 television film premiered on 12 May 1996 on [[CITV-TV|CITV]] in Edmonton, Canada, 15 days before the BBC One showing, and two days before it aired on [[Fox Broadcasting Company|Fox]] in the United States.{{citation needed|date=September 2014}}

====Oceania====
[[New Zealand]] was the first country outside the United Kingdom to screen ''Doctor Who'', beginning in September 1964, and continued to screen the series for many years, including the new series from 2005.{{citation needed|date=April 2017}}

In [[Australia]], the show has had a strong fan base since its inception, having been exclusively first run by the [[Australian Broadcasting Corporation]] (ABC) since January 1965. (See [[Doctor Who in Australia]]) The ABC has periodically repeated episodes; of note were the weekly screenings of all available classic episodes starting in 2003, for the show's 40th anniversary, and the weekdaily screenings of all available revived episodes in 2013 for the show's 50th anniversary. The ABC broadcasts the modern series first run on [[ABC1]] and [[ABC ME]], with repeats on [[ABC2]]. The ABC also provided partial funding for the 20th anniversary special ''The Five Doctors'' in 1983.{{citation needed|date=April 2017}}

====Americas====
{{Main|Doctor Who in Canada and the United States}}

The series also has a fan base in the United States, where it was shown in [[Broadcast syndication|syndication]] from the 1970s to the 1990s, particularly on [[PBS]] stations.{{citation needed|date=September 2014}}

[[TVOntario]] picked up the show in 1976 beginning with ''[[The Three Doctors (Doctor Who)|The Three Doctors]]'' and aired each series (several years late) through to series 24 in 1991. From 1979 to 1981, TVO airings were bookended by science-fiction writer [[Judith Merril]] who would introduce the episode and then, after the episode concluded, try to place it in an educational context in keeping with TVO's status as an educational channel. Its airing of ''[[The Talons of Weng-Chiang]]'' was cancelled as a result of accusations that the story was [[racism|racist]]; the story was later broadcast in the 1990s on cable station YTV. CBC began showing the series again in 2005. The series moved to the Canadian cable channel [[Space (Canadian TV channel)|Space]] in 2009.{{citation needed|date=September 2014}}

For the Canadian broadcast, Christopher Eccleston recorded special video introductions for each episode (including a trivia question as part of a viewer contest) and excerpts from the ''Doctor Who Confidential'' documentary were played over the closing credits; for the broadcast of "[[The Christmas Invasion]]" on 26 December 2005, [[Billie Piper]] recorded a special video introduction. CBC began airing series two on 9 October 2006 at 20:00 E/P (20:30 in Newfoundland and Labrador), shortly after that day's [[Canadian Football League|CFL]] double header on [[Thanksgiving (Canada)|Thanksgiving]] in most of the country.{{citation needed|date=September 2014}}

Series three began broadcasting on CBC on 18 June 2007 followed by the second Christmas special, "[[The Runaway Bride (Doctor Who)|The Runaway Bride]]" at midnight,&lt;ref name="RB"&gt;{{cite news|url=http://www.cbc.ca/doctorwho/ |title=Canada: Runaway Bride and Series Three on CBC |publisher=[[Canadian Broadcasting Corporation]] |accessdate=9 June 2007 |deadurl=yes |archiveurl=https://web.archive.org/web/20070531224227/http://www.cbc.ca/doctorwho/ |archivedate=31 May 2007 }}&lt;/ref&gt; and the Sci Fi Channel began on 6 July 2007 starting with the second Christmas special at 8:00&amp;nbsp;pm E/P followed by the first episode.&lt;ref name="S3"&gt;{{cite web|deadurl=yes |url=http://www.scifi.com/schedulebot/index.php3?date=6%20July%202007&amp;feed_req= |title=Sci Fi on Air Schedule |publisher=Scifi.com |archiveurl=https://web.archive.org/web/20070611211201/http://www.scifi.com/schedulebot/index.php3 |archivedate=11 June 2007 |df= }}&lt;/ref&gt;

Series four aired in the United States on the Sci Fi Channel (now known as [[Syfy]]), beginning in April 2008.&lt;ref name="S4USA"&gt;{{cite web|url=http://www.zap2it.com/tv/news/zap-doctorwhoseason4scifi,0,6573489.story |title='Doctor Who' series 4, 'Sarah Jane' Travel to Sci Fi |work=Zap2it |accessdate=4 February 2008 |deadurl=yes |archiveurl=https://web.archive.org/web/20080207013326/http://www.zap2it.com/tv/news/zap-doctorwhoseason4scifi%2C0%2C6573489.story |archivedate= 7 February 2008 |df= }}&lt;/ref&gt; It aired on CBC beginning 19 September 2008, although the CBC did not air the ''Voyage of the Damned'' special.&lt;ref name="s4Canada"&gt;{{cite web|url=http://www.dwin.org/article.php?sid=242 |title=Series Four Starts 19 September on CBC |publisher=dwin.org |accessdate=22 May 2008 |deadurl=yes |archiveurl=https://web.archive.org/web/20110719032413/http://www.dwin.org/article.php?sid=242 |archivedate=19 July 2011 }}&lt;/ref&gt; The Canadian cable network [[Space (Canadian TV channel)|Space]] broadcast "The Next Doctor" (in March 2009) and all subsequent series and specials.&lt;ref&gt;{{cite web|url=http://www.spacecast.com/shows/doctorwho.aspx |title=Doctor Who: The Next Doctor |publisher=Spacecast.com |accessdate=5 March 2009 |deadurl=yes |archiveurl=https://web.archive.org/web/20090331121045/http://www.spacecast.com/shows/doctorwho.aspx |archivedate=31 March 2009 }}&lt;/ref&gt;

===Home media===
{{Main|List of Doctor Who home video releases}}
{{update section|date=June 2018}}
A wide selection of serials are available from BBC Video on DVD, on sale in the United Kingdom, Australia, Canada and the United States. Every fully extant serial has been released on VHS, and BBC Worldwide continues to regularly [[List of Doctor Who DVD releases|release serials on DVD]]. The 2005 series is also available in its entirety on [[Universal Media Disc|UMD]] for the [[PlayStation Portable]]. Eight original series serials have been released on [[Laserdisc]]&lt;ref&gt;{{cite web|url=http://www.timelash.com/tardis/list.asp?laserdisc|title=BBC classic series laserdiscs @ The TARDIS Library (Doctor Who books, DVDs, videos &amp; audios)|publisher=Timelash.com|accessdate=30 July 2011}}&lt;/ref&gt; and many have also been released on [[Betamax]] tape and [[Video 2000]]. One episode of Doctor Who ([[The Infinite Quest]]) was released on [[VCD]]. Only the series from 2005 onwards are also available on [[Blu-ray]], except for the 1970 story ''[[Spearhead from Space]]'', released in July 2013 and the 1996 TV film ''[[Doctor Who (film)|Doctor Who]]'' released in September 2016.&lt;ref&gt;{{cite web|url=http://www.doctorwho.tv/whats-new/article/the-doctor-who-tv-movie-lands-on-bluray|title=The Doctor Who TV Movie Lands on blurray!|publisher=doctorwho.tv|accessdate= 17 September 2016}}&lt;/ref&gt; Many early releases have been re-released as special editions, with more bonus features.{{citation needed|date=April 2017}}

==Adaptations and other appearances==

===''Doctor Who'' films===
{{Main|Dr. Who (Dalek films)}}
There are two ''Doctor Who'' feature films: ''[[Dr. Who and the Daleks]]'', released in 1965 and ''[[Daleks' Invasion Earth 2150 A.D.]]'' in 1966. Both are retellings of existing television stories (specifically, the first two Dalek serials, ''[[The Daleks]]'' and ''[[The Dalek Invasion of Earth]]'' respectively) with a larger budget and alterations to the series concept.

In these films, [[Peter Cushing]] plays a human scientist&lt;ref name=Tele1&gt;{{cite news|title=Matt Smith is the eleventh, and youngest, actor to play Doctor Who|url=https://www.telegraph.co.uk/news/picturegalleries/celebritynews/4124547/Matt-Smith-is-the-eleventh-and-youngest-actor-to-play-Doctor-Who.html?image=4|work=News|publisher=The Daily Telegraph (online)|accessdate=15 June 2011|location=London|date=5 January 2009}}&lt;/ref&gt; named "Dr. Who", who travels with his granddaughter and niece and other companions in a time machine he has invented. The [[Dr. Who (Dalek films)#Other appearances|Cushing version]] of the character reappears in both comic strips and a short story, the latter attempting to reconcile the film continuity with that of the series.

In addition, several planned films were proposed, including a sequel, ''The Chase'', loosely based on the [[The Chase (Doctor Who)|original series story]], for the Cushing Doctor, plus [[List of unmade Doctor Who serials and films#Proposed films|many attempted television movie and big screen productions]] to revive the original ''Doctor Who'', after the original series was cancelled.

Paul McGann starred in [[Doctor Who (film)|the only television film]] as the eighth incarnation of the Doctor. After the film, he continued the role in audio books and was confirmed as the eighth incarnation through flashback footage and a mini episode in the 2005 revival, effectively linking the two series and the television movie.

In 2011, [[David Yates]] announced that he had started work with the BBC on a ''Doctor Who'' film, a project that would take three or more years to complete. Yates indicated that the film would take a different approach to ''Doctor Who'',&lt;ref name="VarietyWhoFilm"&gt;{{cite news|url=http://www.variety.com/article/VR1118046098|title=Yates to direct bigscreen 'Doctor Who'|last=Dawtrey|first=Adam|date=14 November 2011|work=Variety|accessdate=14 November 2011}}&lt;/ref&gt; although the current ''Doctor Who'' showrunner [[Steven Moffat]] stated later that any such film would not be a reboot of the series and a film should be made by the BBC team and star the current TV Doctor.&lt;ref name="DigitalSpyWhoFilm"&gt;{{cite web|url=http://www.digitalspy.com/movies/s7/doctor-who/news/a354022/doctor-who-movie-will-not-be-a-reboot-says-steven-moffat.html|title='Doctor Who' Movie Will Not Be A Reboot Says Moffat|last=Sperling|first=Daniel|date=2 December 2011|work=Digital Spy|accessdate=2 December 2011}}&lt;/ref&gt;&lt;ref&gt;{{cite news|url=http://www.metro.co.uk/film/883654-doctor-who-movie-will-star-matt-smith-if-it-gets-made-says-steven-moffat|title=Doctor Who movie will star Matt Smith if it gets made, says Steven Moffat|work=Metro|accessdate=2 December 2011}}&lt;/ref&gt;

===Spin-offs===
{{Main|Doctor Who spin-offs}}
''Doctor Who'' has appeared on stage numerous times. In the early 1970s, [[Trevor Martin]] played the role in ''[[Doctor Who and the Daleks in the Seven Keys to Doomsday]]''. In the late 1980s, Jon Pertwee and Colin Baker both played the Doctor at different times during the run of a play titled ''[[Doctor Who&amp;nbsp;– The Ultimate Adventure]]''. For two performances, while Pertwee was ill, [[David Banks (British actor)|David Banks]] (better known for playing [[Cyberman|Cybermen]]) played the Doctor. Other original plays have been staged as amateur productions, with other actors playing the Doctor, while [[Terry Nation]] wrote ''[[The Curse of the Daleks]]'', a stage play mounted in the late 1960s, but without the Doctor.

A pilot episode ("[[A Girl's Best Friend]]") for a potential spinoff series, ''[[K-9 and Company]]'', was aired in 1981 with [[Elisabeth Sladen]] reprising her role as companion [[Sarah Jane Smith]] and [[John Leeson]] as the voice of [[K9 (Doctor Who)|K9]], but was not picked up as a regular series.

Concept art for an animated ''Doctor Who'' series was produced by animation company [[Nelvana]] in the 1980s, but the series was not produced.&lt;ref&gt;{{cite video|people=Bailey, Shaun (Producer); Kalangis, Johnny (Director) |date=2004 |title=The Planet of the Doctor, Part 6: Doctor Who &amp; Culture II |url=http://www.cbc.ca/planetofthedoctor/videos.html# |format=[[QuickTime]] or [[Windows Media]] |medium=Documentary |publisher=[[CBC Television]] |location=Toronto |accessdate=9 April 2009 |deadurl=yes |archiveurl=https://web.archive.org/web/20090702214033/http://www.cbc.ca/planetofthedoctor/videos.html |archivedate=2 July 2009 }}&lt;br /&gt;{{cite news|url=http://www.cbc.ca/planetofthedoctor/tb_gallery.html|title=Planet of the Doctor|accessdate=9 April 2009|work=[[CBC Television]]|archiveurl=https://web.archive.org/web/20080430203208/http://www.cbc.ca/planetofthedoctor/tb_gallery.html|archivedate=30 April 2008}}&lt;/ref&gt;

Following the success of the 2005 series produced by Russell T Davies, the BBC commissioned Davies to produce a 13-part spin-off series titled ''[[Torchwood]]'' (an [[anagram]] of "Doctor Who"), set in modern-day [[Cardiff]] and investigating alien activities and crime. The series debuted on [[BBC Three (former)|BBC Three]] on 22 October 2006.&lt;ref&gt;{{cite book|title=Inside the Hub|last=Walker|first=Stephen James|authorlink=Stephen James Walker|year=2007|publisher=[[Telos Publishing]]|location=Tolworth, Surrey|isbn=978-1-84583-013-7|page=101}}&lt;/ref&gt; [[John Barrowman]] reprised his role of [[Jack Harkness]] from the 2005 series of ''Doctor Who''.&lt;ref&gt;{{cite news|url=http://news.bbc.co.uk/1/hi/wales/4349120.stm|title=Doctor Who spin-off made in Wales|publisher=BBC News|date=17 October 2005|accessdate=24 April 2006}}&lt;/ref&gt; Two other actresses who appeared in Doctor Who also star in the series; [[Eve Myles]] as [[Gwen Cooper]], who also played the similarly named servant girl Gwyneth in the 2005 ''Doctor Who'' episode "[[The Unquiet Dead]]",&lt;ref&gt;{{cite web|date=24 February 2006 |url=http://www.bbc.co.uk/doctorwho/news/cult/news/drwho/2006/02/24/29846.shtml |archiveurl=https://www.webcitation.org/5QSmqr0PU?url=http://www.bbc.co.uk/doctorwho/news/cult/news/drwho/2006/02/24/29846.shtml |archivedate=20 July 2007 |title=Team Torchwood |publisher=BBC |accessdate=24 April 2006 |deadurl=yes  }}&lt;/ref&gt; and [[Naoko Mori]] who reprised her role as [[Toshiko Sato]] first seen in "[[Aliens of London]]". A second series of ''Torchwood'' aired in 2008; for three episodes, the cast was joined by Freema Agyeman reprising her ''Doctor Who'' role of [[Martha Jones]]. A third series was broadcast from 6 to 10 July 2009, and consisted of a single five-part story called ''Children of Earth'' which was set largely in London. A fourth series, ''[[Torchwood: Miracle Day]]'' jointly produced by BBC Wales, BBC Worldwide and the American entertainment company Starz debuted in 2011. The series was predominantly set in the United States, though Wales remained part of the show's setting.

''[[The Sarah Jane Adventures]]'', starring [[Elisabeth Sladen]] who reprised her role as investigative journalist [[Sarah Jane Smith]], was developed by [[CBBC]]; a special aired on New Year's Day 2007 and a full series began on 24 September 2007.&lt;ref&gt;{{cite press release|title=Russell T Davies creates new series for CBBC, starring Doctor Who's Sarah Jane Smith|publisher=BBC|date=14 September 2006|url=http://www.bbc.co.uk/pressoffice/pressreleases/stories/2006/09_september/14/sarah.shtml|accessdate=14 September 2006}}&lt;/ref&gt; A second series followed in 2008, notable for (as noted above) featuring the return of Brigadier Lethbridge-Stewart. A third in 2009 featured a crossover appearance from the main show by David Tennant as the Tenth Doctor. In 2010, a further such appearance featured [[Matt Smith (actor)|Matt Smith]] as the Eleventh Doctor alongside former companion actress [[Katy Manning]] reprising her role as [[Jo Grant]]. A final, three-story fifth series was transmitted in autumn 2011&amp;nbsp;– uncompleted due to the death of Elisabeth Sladen in early 2011.

An animated serial, ''[[The Infinite Quest]]'', aired alongside the 2007 series of ''Doctor Who'' as part of the children's television series ''[[Totally Doctor Who]]''. The serial featured the voices of series regulars David Tennant and [[Freema Agyeman]] but is not considered part of the 2007 series.&lt;ref name="cartoon_bbc"&gt;{{cite news|title=Who's a Toon? |url=http://www.bbc.co.uk/doctorwho/news/cult/news/drwho/2007/01/26/40315.shtml |date=26 January 2007 |accessdate=26 January 2007 |work=BBC ''Doctor Who'' website |deadurl=yes |archiveurl=https://web.archive.org/web/20070202125822/http://www.bbc.co.uk/doctorwho/news/cult/news/drwho/2007/01/26/40315.shtml |archivedate=2 February 2007 }}&lt;/ref&gt; A second animated serial, ''[[Dreamland (Doctor Who)|Dreamland]]'', aired in six parts on the [[BBC Red Button]] service, and the official ''Doctor Who'' website in 2009.&lt;ref&gt;{{cite news|url=http://news.bbc.co.uk/2/hi/entertainment/8300002.stm|title=Wire star set for Dr Who cartoon|date=9 October 2009|publisher=BBC News|accessdate=6 January 2010}}&lt;/ref&gt;

''[[Class (2016 TV series)|Class]]'', featuring students of Coal Hill School, was first aired on-line on [[BBC Three (former)|BBC Three]] from 22 October 2016, as a series of eight 45 minute episodes, written by [[Patrick Ness]].&lt;ref&gt;{{cite web|url=http://www.bbc.co.uk/blogs/doctorwho/entries/953c5b1f-3cc8-4db9-8184-f1b6567260f1|title=BBC Latest News&amp;nbsp;– Doctor Who&amp;nbsp;– Doctor Who Spin Off: Class|author=The Doctor Who Team|work=Doctor Who}}&lt;/ref&gt;&lt;ref name="Capaldi&amp;Filming"&gt;{{cite web|url=http://www.radiotimes.com/news/2016-02-29/doctor-who-spin-off-class-to-start-filming-in-april-with-peter-capaldi-set-to-pop-up-in-new-show|title=Doctor Who spin off Class begins filming in April 2016 and may feature Peter Capaldi|publisher=[[RadioTimes]]|last=Dowell|first=Ben|date=29 February 2016|accessdate=29 February 2016}}&lt;/ref&gt; Peter Capaldi as the Twelfth Doctor appears in the show's first episode.&lt;ref&gt;{{Cite web|url=http://metro.co.uk/2016/09/24/peter-capaldi-will-appear-in-doctor-who-spin-off-class-which-now-has-an-air-date-6150072/|title=Peter Capaldi Will appear in Buffy-style Doctor Who spin-off Class|last=Metro.co.uk|first=Olivia Waring for|date=24 September 2016|website=Metro|access-date=16 January 2017}}&lt;/ref&gt; The series was picked up by [[BBC America]] on 8 January 2016 and by [[BBC One]] a day later.&lt;ref&gt;{{cite web|url=https://variety.com/2016/tv/news/class-doctor-who-spinoff-2016-prey-philip-glenister-1201675312/|title=BBC America Sets ‘Doctor Who’ Spinoff ‘Class’ for 2016|publisher=Variety|last=Friedlander|first=Whitney|date=8 January 2016}}&lt;/ref&gt; On 7 September 2017, BBC Three controller Damian Kavanagh confirmed that the series had officially been cancelled.&lt;ref&gt;{{cite web|url=http://www.digitalspy.com/tv/class/news/a837477/bbc-three-class-doctor-who-spin-off-cancelled/|title=BBC Three boss confirms Doctor Who spin-off Class is done: "It just didn't really land for us"|first=Morgan|last=Jeffrey|work=DigitalSpy|date=7 September 2017|accessdate=7 September 2017}}&lt;/ref&gt;

Numerous other spin-off series have been created not by the BBC but by the respective owners of the characters and concepts. Such spin-offs include the novel and audio drama series ''[[Faction Paradox]]'', ''[[Iris Wildthyme]]'' and ''[[Bernice Summerfield]]''; as well as the made-for-video series ''[[P.R.O.B.E.]]''; the Australian-produced television series ''[[K-9 (TV series)|K-9]]'', which aired a 26-episode first season on [[Disney XD (UK &amp; Ireland)|Disney XD]];&lt;ref&gt;{{cite news|date=25 April 2006|url=http://news.bbc.co.uk/1/hi/entertainment/4939144.stm|title=Doctor Who dog K9 gets spin-off|publisher=BBC News|accessdate=26 July 2006}}&lt;/ref&gt; and the audio spin-off ''Counter-Measures''.&lt;ref&gt;{{cite web|url=http://bigfinish.com/news/New-Doctor-Who-Spin-off-Counter-Measures|title=New Doctor Who Spin off&amp;nbsp;... Counter-Measures|publisher=[[Big Finish Productions|Big Finish]]|date=20 October 2011|accessdate=26 October 2013|archiveurl=https://web.archive.org/web/20111022061150/http://www.bigfinish.com/news/New-Doctor-Who-Spin-off-Counter-Measures|archivedate=22 October 2011}}&lt;/ref&gt;

===Aftershows===
When the revived series of ''Doctor Who'' was brought back, an aftershow series was created by the BBC, titled ''[[Doctor Who Confidential]]''. There have been three aftershow series created, with the latest one titled ''[[Doctor Who: The Fan Show]]'', which began airing from the tenth series. Each series follows behind-the-scenes footage on the making of ''Doctor Who'' through clips and interviews with the cast, production crew and other people, including those who have participated in the television series in some manner. Each episode deals with a different topic, and in most cases refers to the ''Doctor Who'' episode that preceded it.

{| class="wikitable"
|-
! Series !! Episodes !! First aired !! Last aired !! Narrator / Presenter
|-
| ''[[Doctor Who Confidential]]'' || 87 || 26 March 2005 || 1 October 2011 || David Tennant (2005)&lt;br&gt;Simon Pegg (2005)&lt;br&gt;Mark Gatiss (2005–06)&lt;br&gt;Anthony Head (2006–10)&lt;br&gt;Noel Clarke (2009)&lt;br&gt;Alex Price (2010)&lt;br&gt;Russell Tovey (2010–11)
|-
| ''[[Doctor Who Extra]]'' || 90 || 23 August 2014 || 5 December 2015 || Matt Botten&lt;br&gt;Rufus Hound&lt;br&gt;Matt Lucas&lt;br&gt;Charity Wakefield
|-
| ''[[Doctor Who: The Fan Show]]'' || 12 || 15 April 2017 || present || Christel Dee (Main host)&lt;br&gt;Luke Spillane (co-host)
|}

===Charity episodes===
In 1983, coinciding with the series' 20th anniversary, ''[[The Five Doctors]]'' was shown as part of the annual BBC Children in Need Appeal, however it was not a charity based production, simply scheduled within the line-up of Friday 25 November 1983. This was the programme's very first co-production with Australian broadcaster [[Australian Broadcasting Corporation|ABC]].&lt;ref&gt;{{Cite AV media notes |title=The Five Doctors |title-link=The Five Doctors |year=1985 |type=Cover |publisher=BBC |id=BBC 2020 2}}&lt;/ref&gt; Featuring three of the first five Doctors, a new actor to replace the deceased William Hartnell, and unused footage to represent Tom Baker.&lt;ref&gt;{{cite web|title=The Five Doctors Serial 6K|url=http://www.drwhoguide.com/who_6k.htm|publisher=drwhoguide.com|accessdate=24 October 2013}}&lt;/ref&gt; This was a full-length, 90-minute film, the longest single episode of ''Doctor Who'' produced to date (the television movie ran slightly longer on broadcast where it included commercial breaks).&lt;ref&gt;{{cite web|url=http://gallifreyone.com/episode.php?id=6k|title=The Five Doctors|publisher=Outpost Gallifrey|author=Shaun Lyon|date=31 March 2007|accessdate=24 October 2013|archiveurl=https://web.archive.org/web/20080503123320/http://www.gallifreyone.com/episode.php?id=6k|archivedate=3 May 2008|display-authors=etal}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.shannonsullivan.com/drwho/serials/6k.html|title=The Five Doctors|publisher=A Brief History of Time Travel|last=Sullivan|first=Shannon|date=7 August 2007|accessdate=24 October 2013}}&lt;/ref&gt;

In 1993, for the franchise's 30th anniversary, another charity special, titled ''[[Dimensions in Time]]'' was produced for Children in Need, featuring all of the surviving actors who played the Doctor and a number of previous companions. It also featured a crossover with the soap opera ''[[EastEnders]]'', the action taking place in the latter's [[Albert Square]] location and around [[Greenwich]]. The special was one of several special 3D programmes the BBC produced at the time, using a 3D system that made use of the [[Pulfrich effect]] requiring glasses with one darkened lens; the picture would look normal to those viewers who watched without the glasses.

In 1999, another special, ''[[Doctor Who: The Curse of Fatal Death|Doctor Who and the Curse of Fatal Death]]'', was made for [[Comic Relief]] and later released on VHS. An affectionate [[parody]] of the television series, it was split into four segments, mimicking the traditional serial format, complete with [[cliffhanger]]s, and running down the same corridor several times when being chased (the version released on video was split into only two episodes). In the story, the Doctor ([[Rowan Atkinson]]) encounters both [[Master (Doctor Who)|the Master]] ([[Jonathan Pryce]]) and the [[Dalek]]s. During the special the Doctor is forced to regenerate several times, with his subsequent incarnations played by, in order, [[Richard E. Grant]], [[Jim Broadbent]], [[Hugh Grant]] and [[Joanna Lumley]]. The script was written by [[Steven Moffat]], later to be head writer and executive producer to the revived series.&lt;ref name=RTDgone&gt;{{cite news|title=Doctor Who guru Davies steps down|publisher=BBC News|date=20 May 2008|url=http://news.bbc.co.uk/1/hi/entertainment/7411177.stm|accessdate=20 May 2008}}&lt;/ref&gt;

Since the return of ''Doctor Who'' in 2005, the franchise has produced two original "mini-episodes" to support Children in Need. The first, aired in November 2005, was an [[Doctor Who: Children in Need|untitled seven-minute scene]] which introduced [[David Tennant]] as the [[Tenth Doctor]]. It was followed in November 2007 by "[[Time Crash]]", a 7-minute scene which featured the Tenth Doctor meeting the [[Fifth Doctor]] (played once again by [[Peter Davison]]).

A set of two mini-episodes, titled [[Space / Time|"Space" and "Time"]] respectively, were produced to support [[Comic Relief]]. They were aired during the [[Comic Relief#2011 event|Comic Relief 2011 event]].&lt;ref name="comicrelief2011"&gt;{{cite web|url=http://www.digitalspy.co.uk/tv/s7/doctor-who/news/a306899/moffat-reveals-who-comic-relief-plot.html|title=Doctor Who For Comic Relief&amp;nbsp;– Exclusive|work=[[SFX (magazine)|SFX]]|date=2 March 2011|accessdate=6 March 2011}}&lt;/ref&gt;

During 2011 [[Children in Need]], an exclusively-filmed segment showed the Doctor addressing the viewer, attempting to persuade them to purchase items of his clothing, which were going up for auction for Children in Need. The 2012 edition of CiN featured the mini-episode ''The Great Detective''.

===Spoofs and cultural references===
{{Main|Doctor Who spoofs}}
''Doctor Who'' has been satirised and spoofed on many occasions by comedians including [[Spike Milligan]] (a Dalek invades his bathroom&amp;nbsp;— Milligan, naked, hurls a soap sponge at it) and [[Lenny Henry]]. [[Jon Culshaw]] frequently impersonates the Fourth Doctor in the [[BBC]] ''[[Dead Ringers (comedy)|Dead Ringers]]'' series.&lt;ref name="Dead Ringers meets Doctor Who"&gt;{{cite video|people=Mark Perry, Kevin Connelly and Phil Cornwell|year=2005|title=Dead Ringers meets Doctor Who&amp;nbsp;– Comedy Greats&amp;nbsp;– BBC|url=https://www.youtube.com/watch?v=35uYgSYXtfA|publisher=BBC|time=0:00–1:30}}&lt;/ref&gt; [[Doctor Who fandom|''Doctor Who'' fandom]] has also been lampooned on programs such as ''[[Saturday Night Live]]'', ''[[The Chaser's War on Everything]]'', ''[[Mystery Science Theater 3000]]'', ''[[Family Guy]]'', ''[[American Dad!]]'', ''[[Futurama]]'', ''[[South Park]]'',
''[[Community (TV series)|Community]]'' as Inspector Spacetime, ''[[The Simpsons]]'' and ''[[The Big Bang Theory]]''. As part of the 50th anniversary programmes, former [[Fifth Doctor]] Peter Davison directed, wrote and co-starred in the parody ''[[The Five(ish) Doctors Reboot]]'', which also starred two other former Doctors, Colin Baker and Sylvester McCoy, and cameo appearances from cast and crew involved in the programme, including showrunner [[Steven Moffat]] and Doctors Paul McGann, David Tennant and Matt Smith.&lt;ref&gt;"The Five(ish) Doctors Reboot", BBC. Retrieved 23 November 2013&lt;/ref&gt;

The Doctor in his fourth incarnation has been represented on several episodes of ''[[The Simpsons]]''&lt;ref name="Fourth Doctor The Simpsons"&gt;{{cite video|date=26 November 1995|title=Sideshow Bob's Last Gleaming|publisher=[[20th Century Fox Television]]|time=11:29}}&lt;/ref&gt; and [[Matt Groening]]'s other animated series ''[[Futurama]]''.&lt;ref name="Fourth Doctor Futurama"&gt;{{cite video|date=4 August 2011|title=Möbius Dick|publisher=[[20th Century Fox Television]]|time=20:20}}&lt;/ref&gt;&lt;ref name="Fourth Doctor Futurama 2"&gt;{{cite video|date=28 July 2011|title=All the Presidents' Heads|publisher=[[20th Century Fox Television]]|time=5:50}}&lt;/ref&gt;

There have also been many references to ''Doctor Who'' in popular culture and other science fiction, including ''[[Star Trek: The Next Generation]]'' ("[[The Neutral Zone (Star Trek: The Next Generation)|The Neutral Zone]]")&lt;ref&gt;{{cite web|url=http://anamericanviewofbritishsciencefiction.com/2012/04/23/random-doctor-who-references-in-american-tv-shows/|title=Random Doctor Who References in American TV Shows|publisher=An American View of British Science Fiction|date=23 April 2012|accessdate=27 August 2013}}&lt;/ref&gt; and ''[[Leverage (TV series)|Leverage]]''. In the [[Channel 4]] series ''[[Queer as Folk (UK TV series)|Queer as Folk]]'' (created by later ''Doctor Who'' executive producer Russell T. Davies), the character of Vince was portrayed as an avid ''Doctor Who'' fan, with references appearing many times throughout in the form of clips from the programme. In a similar manner, the character of Oliver on ''[[Coupling]]'' (created and written by current show runner [[Steven Moffat]]) is portrayed as a ''Doctor Who'' collector and enthusiast.
References to ''Doctor Who'' have also appeared in the young adult fantasy novels ''[[Brisingr]]''&lt;ref&gt;{{cite book|last=Paolini|first=Christopher|authorlink=Christopher Paolini|title=Brisingr (Hardcover)|edition=1st|date=20 September 2008|publisher=[[Alfred A. Knopf]]|location=New York|isbn=0-375-82672-6|pages=204, 761|chapter=Shadows of the Past|quote='Bending over, Eragon read, ''Adrift upon the sea of time, the lonely god wanders from shore to distant shore, upholding the laws of the stars above.''{{'}} and in acknowledgments 'Also, for those who understood the reference to a 'lonely god' when Eragon and Arya sitting around the campfire, my only excuse is that the Doctor can travel everywhere, even alternate realities. Hey, I'm a fan too!'}}&lt;/ref&gt; and ''[[High Wizardry]]'',&lt;ref&gt;{{cite web|date=25 March 2005|url=http://www.youngwizards.com/ErrantryWiki/index.php/Man_In_The_Bar%2C_the|title=Man in the Bar, the|work=The Errantry Concordance|publisher=[[Diane Duane]]|accessdate=5 July 2007}}&lt;/ref&gt; the video game ''[[Rock Band (video game)|Rock Band]]'',&lt;ref&gt;{{cite web|date=20 November 2007|url=https://www.flickr.com/photos/zerolives/2051074285/|title=Doctor who Love in Rock Band|work=flickr|publisher=zerolives|accessdate=24 December 2007}}&lt;/ref&gt; the soap opera ''[[EastEnders]]'',&lt;ref&gt;{{cite news|first=Sarah|last=Nathan|title=From Square to eternity|url=http://www.thesun.co.uk/sol/homepage/showbiz/tv/article539976.ece|work=The Sun|location=London|date=4 December 2007|accessdate=7 May 2009}}&lt;/ref&gt; the [[Adult Swim]] comedy show ''[[Robot Chicken]]'', the ''[[Family Guy]]'' episodes "[[Blue Harvest (Family Guy)|Blue Harvest]]" and "[[420 (Family Guy)|420]]", and the game ''[[RuneScape]]''. It has also be referenced in ''[[Destroy All Humans! 2]]'', by civilians in the game's variation of [[England]],&lt;ref&gt;{{cite web|website=vgfacts.com|title=Destroy All Humans! 2|url=http://www.vgfacts.com/game/destroyallhumans2/}}&lt;/ref&gt; and in ''[[Apollo Justice: Ace Attorney]]''.&lt;ref&gt;{{cite web|title=Apollo Justice: Ace Attorney|website=vgfacts.com|url=http://www.vgfacts.com/game/apollojusticeaceattorney/}}&lt;/ref&gt;

''Doctor Who'' has been a reference in several political cartoons, from a 1964 cartoon in the ''[[Daily Mail]]'' depicting [[Charles de Gaulle]] as a Dalek&lt;ref&gt;{{cite news|first=Leslie Gilbert|last=Illingsworth|title=The Degaullek (France's leader, General De Gaulle, is caricatured as a Dalek)|url=http://www.cartoons.ac.uk/record/06435|format=Reprint at the British Cartoon Archive|work=Daily Mail|location=London|date=25 November 1964|accessdate=15 March 2014}}&lt;/ref&gt; to a 2008 edition of ''[[This Modern World]]'' by [[Tom Tomorrow]] in which the Tenth Doctor informs an incredulous character from 2003 that the [[Democratic Party (United States)|Democratic Party]] will nominate [[Barack Obama|an African-American]] as its presidential candidate.&lt;ref&gt;{{cite web|date=10 June 2008|url=https://blogs.discovermagazine.com/badastronomy/2008/06/10/doctor-who-in-this-modern-world/|title=This Modern World|work=The Week that Was|publisher=[[Tom Tomorrow]]|accessdate=15 March 2014}}&lt;/ref&gt;

The word "TARDIS" is an entry in the [[Shorter Oxford English Dictionary]]&lt;ref&gt;{{cite web|date=5 September 2002|url=http://www.askoxford.com/worldofwords/wordfrom/shorter/?view=uk|accessdate=15 May 2009|title=The essence of the ''Oxford English Dictionary''}}&lt;/ref&gt; and the [[iOS]] dictionary.

===Museums and exhibitions===
{{Main|Doctor Who exhibitions}}

There have been various exhibitions of ''Doctor Who'' in the United Kingdom, including the now closed exhibitions at:
* [[Land's End]] ([[Cornwall]])
* [[Blackpool]]
* [[Llangollen]]
* [[Kelvingrove Art Gallery and Museum|Kelvingrove Museum]], Glasgow
* [[Coventry Transport Museum]], [[Coventry]]
* [[Centre for Life]], [[Newcastle upon Tyne]]
* [[Melbourne]], Australia (only international DW concert to be performed)
* Kensington Olympia Two, London
* [[Longleat]], which ran for 30 years.&lt;ref name="DrWho"&gt;{{cite web | url=http://www.drwhoexhibitions.co.uk/longleat.htm | title=Dr Who Exhibition, Longleat | publisher=The Doctor Who Exhibitions Archive | accessdate=15 January 2016}}&lt;/ref&gt;
* [[Cardiff]] (the city where the series is filmed).&lt;ref&gt;{{cite web|url=http://www.doctorwhoexperience.com/|title=Doctor Who|work=Doctor Who}}&lt;/ref&gt;
The exhibition closed down on the 9th of September 2017

===Merchandise===
{{Main|Doctor Who merchandise}}

Since its beginnings, ''Doctor Who'' has generated hundreds of products related to the show, from toys and games to collectible picture cards and postage stamps. These include board games, card games, gamebooks, computer games, roleplaying games, action figures and a pinball game. Many games have been released that feature the Daleks, including [[Dalek#Computer games|Dalek computer games]].

===Audios===
{{See also|List of Doctor Who audio releases|List of Doctor Who audiobooks|List of Doctor Who audio plays by Big Finish}}

The earliest ''Doctor Who''-related audio release was a 21-minute narrated abridgement of the First Doctor television story ''[[The Chase (Doctor Who)|The Chase]]'' released in 1966.  Ten years later, the first original Doctor Who audio was released on [[LP record]]; ''[[Doctor Who and the Pescatons]]'' featuring the Fourth Doctor.  The first commercially available audiobook was an abridged reading of the Fourth Doctor story ''[[State of Decay]]'' in 1981. In 1988, during a hiatus in the television show, ''[[Slipback]]'', the first radio drama, was transmitted.

Since 1999, [[Big Finish Productions]] has released several different series of Doctor Who audios on CD.  The earliest of these featured the Fifth, Sixth and Seventh Doctors, with Paul McGann's Eight Doctor joining the line in 2001.  Tom Baker's Fourth Doctor began appearing for Big Finish in 2012.  Along with the main range, adventures of the First, Second and Third Doctors have been produced in both limited cast and full cast formats, as well as audiobooks.  The 2013 series ''[[Doctor Who: Destiny of the Doctor|Destiny of the Doctor]]'', produced as part of the series' 50th Anniversary celebrations, marked the first time Big Finish created stories (in this case audiobooks) featuring the Doctors from the revived show. Along with this, in May 2016 the Tenth Doctor, David Tennant, appeared alongside Cathrine Tate in a collection of three audio adventures.

In addition to these main lines, both the BBC and Big Finish have produced original audio dramas and audiobooks based on spin-off material, such as ''Torchwood'' and ''The Sarah Jane Adventures'' series.

===Books===
{{See also|List of Doctor Who novelists}}

''Doctor Who'' books have been published from the mid-sixties through to the present day. From 1965 to 1991 the books published were primarily novelised adaptations of broadcast episodes; beginning in 1991 an extensive line of original fiction was launched, the [[Virgin New Adventures]] and [[Virgin Missing Adventures]]. Since the relaunch of the programme in 2005, a new range of novels have been published by [[BBC Books]]. Numerous non-fiction books about the series, including guidebooks and critical studies, have also been published, and a dedicated ''[[Doctor Who Magazine]]'' with newsstand circulation has been published regularly since 1979. This is published by Panini, as is the ''[[Doctor Who Adventures]]'' magazine for younger fans.

See also:
* [[List of Doctor Who novelisations]]
* [[Eighth Doctor Adventures]]
* [[Past Doctor Adventures]]
* [[New Series Adventures (Doctor Who)|New Series Adventures]]

===Video games===
{{See also|Category:Video games based on Doctor Who}}

Numerous ''Doctor Who'' [[video games]] have been created from the mid-80s through to the present day. One of the recent ones is a [[match-3]] game released in November 2013 for [[iOS]], [[Android (operating system)|Android]], Amazon App Store and [[Facebook]] called ''[[Doctor Who: Legacy (video game)|Doctor Who: Legacy]]''. It has been constantly updated since its release and features all of the Doctors as playable characters as well as over 100 companions.&lt;ref&gt;[http://toucharcade.com/2015/02/17/doctor-who-legacy-keeps-getting-updated-as-10th-anniversary-of-dr-who-show-approaches/ 'Doctor Who: Legacy' Keeps Getting Updated as 10th Anniversary of 'Dr. Who' Show Approaches]. Retrieved 26 February 2015.&lt;/ref&gt;

Another video game instalment is LEGO Dimensions&amp;nbsp;– in which Doctor Who is one of the many "Level Packs" in the game. At the moment, the pack contains the Twelfth Doctor (who can reincarnate into the others), K9, the TARDIS and a Victorian London adventure level area. The game and pack released in November 2015.

==Chronology and canonicity==

Since the creation of the ''Doctor Who'' character by BBC Television in the early 1960s, a myriad of stories have been published about ''Doctor Who'', in different media: apart from the actual television episodes that continue to be produced by the BBC, there have also been novels, comics, short stories, audio books, radio plays, interactive video games, game books, webcasts, DVD extras, and even stage performances. In this respect it is noteworthy that the BBC takes no position on the [[Canon (fiction)|canonicity]] of any of such stories, and producers of the show have expressed distaste for the idea.&lt;ref&gt;{{cite journal|last=Davies|first=Russell T.|title=Doctor Who Magazine|issue=356|date=March 2014}}&lt;/ref&gt;

==Awards==
{{main|List of awards and nominations received by Doctor Who}}

The show has received [[List of awards and nominations received by Doctor Who|recognition]] as one of Britain's finest television programmes, winning the 2006 [[British Academy Television Award for Best Drama Series]] and five consecutive (2005–2010) awards at the [[National Television Awards]] during [[Russell T Davies]]' tenure as executive producer.&lt;ref&gt;{{cite news|url=http://news.bbc.co.uk/1/hi/entertainment/8471232.stm|work=News|publisher=BBC|title=Doctor Who scoops two TV awards|date=21 January 2010|accessdate=1 April 2010}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.digitalspy.com/british-tv/news/a300378/national-television-awards-2011-winners.html|title=National Television Awards 2011&amp;nbsp;– Winners|work=[[Digital Spy]]|date=26 January 2011|accessdate=16 August 2012|author=Sperling, Daniel}}&lt;/ref&gt; In 2011, [[Matt Smith (actor)|Matt Smith]] became the first Doctor to be nominated for a [[British Academy Television Award for Best Actor|BAFTA Television Award for Best Actor]] and in 2016, [[Michelle Gomez]] became the first female to receive a BAFTA nomination for the series, getting a [[British Academy Television Award for Best Supporting Actress|Best Supporting Actress]] nomination for her work as [[The Master (Doctor Who)#Missy|Missy]]. [[File:Matt Smith , Jenna Louise Coleman and Steven Moffat at the 72nd Annual Peabody Awards.jpg|thumb|right|Matt Smith, Jenna Louise Coleman and Steven Moffat accepting an award for ''Doctor Who'']]In 2013, the [[Peabody Award]]s honoured ''Doctor Who'' with an Institutional Peabody "for evolving with technology and the times like nothing else in the known television universe."&lt;ref&gt;[http://www.peabodyawards.com/award-profile/institutional-award-doctor-who 72nd Annual Peabody Awards], May 2013.&lt;/ref&gt; The programme is listed in ''[[Guinness World Records]]'' as the longest-running science fiction television show in the world,&lt;ref&gt;{{cite news|url=http://news.bbc.co.uk/2/hi/entertainment/5390372.stm|title=Dr Who 'longest-running sci-fi'|publisher=BBC News|date=28 September 2006|accessdate=30 September 2006}}&lt;/ref&gt; the "most successful" science fiction series of all time—based on its over-all broadcast ratings, [[DVD]] and book sales, and [[iTunes]] traffic—&lt;ref&gt;{{cite news|first=Liz Shannon|last=Miller|url=http://www.variety.com/article/VR1118006512.html?categoryid=14&amp;cs=1&amp;nid=2562|title='Doctor Who' Honored by Guinness&amp;nbsp;— Entertainment News, TV News, Media|work=Variety|date=26 July 2009|accessdate=23 November 2009}}&lt;/ref&gt; and for the largest ever simulcast of a TV drama with its [[The Day of the Doctor|50th anniversary special]].&lt;ref name="record"&gt;{{cite web|url=http://www.doctorwho.tv/whats-new/article/guinness-world-record-for-the-day-of-the-doctor|title=Guinness World Record for The Day of the Doctor|publisher=''Doctor Who'' website|date=24 November 2013|accessdate=24 November 2013}}&lt;/ref&gt; During its original run, it was recognised for its imaginative stories, creative&lt;!-- not neutral? --&gt; low-budget [[special effect]]s, and pioneering use of [[electronic music]] (originally produced by the [[BBC Radiophonic Workshop]]).

In 1975, [[Doctor Who (season 11)|Season 11]] of the series won a Writers' Guild of Great Britain award for Best Writing in a Children's Serial. In 1996, BBC television held the "Auntie Awards" as the culmination of their "TV60" series, celebrating 60 years of BBC television broadcasting, where ''Doctor Who'' was voted as the "Best Popular Drama" the corporation had ever produced, ahead of such ratings heavyweights as ''[[EastEnders]]'' and ''[[Casualty (TV series)|Casualty]]''.&lt;ref name="auntieawards"&gt;{{cite news|title=Viewers spurn TV's golden age in poll of small screen classics as the BBC fetes its 60th birthday|first=Andrew|last=Culf|work=The Guardian|date=4 November 1996|page=4}}&lt;/ref&gt; In 2000, ''Doctor Who'' was ranked third in a list of the [[100 Greatest British Television Programmes]] of the 20th century, produced by the [[British Film Institute]] and voted on by industry professionals.&lt;ref name="tv100"&gt;{{cite news|url=http://news.bbc.co.uk/1/hi/entertainment/911085.stm|title=Fawlty Towers tops TV hits|publisher=BBC News|date=5 September 2000|accessdate=18 March 2007}}&lt;/ref&gt; In 2005, the series came first in a survey by [[SFX magazine|''SFX'' magazine]] of "The Greatest UK Science Fiction and Fantasy Television Series Ever". Also, in the 100 Greatest Kids' TV shows (a [[Channel 4]] countdown in 2001), the 1963–1989 run was placed at number eight.

The revived series has received recognition from critics and the public, across various awards ceremonies. It won five [[BAFTA TV Award]]s, including [[British Academy Television Award for Best Drama Series|Best Drama Series]], the highest-profile and most prestigious British television award for which the series has ever been nominated.&lt;ref&gt;{{cite news|url=http://news.bbc.co.uk/1/hi/wales/4934216.stm|title=Doctor leads Bafta Cymru winners|publisher=BBC News|date=22 April 2006|accessdate=24 April 2006}}&lt;/ref&gt; It was very popular at the [[BAFTA Cymru|BAFTA Cymru Awards]], with 25 wins overall including Best Drama Series (twice), Best Screenplay/Screenwriter (thrice) and Best Actor.&lt;ref&gt;{{cite news|url=http://news.bbc.co.uk/1/hi/entertainment/7395593.stm|title=Bafta glory for Channel 4's Boy A|publisher=BBC News|date=12 May 2008|accessdate=13 May 2008}}&lt;/ref&gt; It was also nominated for 7 [[Saturn Award]]s, winning the only [[Saturn Award for Best International Series|Best International Series]] in the ceremony's history. In 2009, ''Doctor Who'' was voted the 3rd greatest show of the 2000s by Channel 4, behind ''[[Top Gear (2002 TV series)|Top Gear]]'' and ''[[The Apprentice (UK TV series)|The Apprentice]]''. The episode "[[Vincent and the Doctor]]" was [[short list|shortlisted]] for a Mind Award at the 2010 Mind Mental Health Media Awards for its "touching" portrayal of [[Vincent van Gogh]].&lt;ref&gt;{{cite web|url=http://www.mhmawards.org.uk/shortlist.html |title=Winners announced |publisher=[[Mind (charity)|Mind]] |accessdate=4 May 2011 |quote=Dr Who&amp;nbsp;– "Vincent and the Doctor" (BBC One/BBC Wales). [[Richard Curtis]] writes this touching episode of ''Dr Who'' about the mental health experiences of the great artist Vincent van Gogh. |deadurl=yes |archiveurl=https://web.archive.org/web/20101123050254/http://www.mhmawards.org.uk/shortlist.html |archivedate=23 November 2010 }}&lt;/ref&gt;

It has won the Short Form of the [[Hugo Award for Best Dramatic Presentation, Short Form|Hugo Award for Best Dramatic Presentation]], the oldest science fiction/fantasy award for films and series, six times since 2006. The winning episodes were "[[The Empty Child]]"/"[[The Doctor Dances]]" (2006), "[[The Girl in the Fireplace]]" (2007), "[[Blink (Doctor Who)|Blink]]" (2008), "[[The Waters of Mars]]" (2010), "[[The Pandorica Opens]]"/"[[The Big Bang (Doctor Who)|The Big Bang]]" (2011), and "[[The Doctor's Wife]]" (2012).&lt;ref&gt;{{cite web|url=http://www.locusmag.com/2006/News/08_HugoCampbellWinners.html|title=Hugo and Campbell Awards Winners|work=[[Locus (magazine)|Locus Online]]|accessdate=27 August 2006|date=26 August 2006}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.thehugoawards.org/index.php?page_id=127|title=2007 Hugo Awards|work=World Science Fiction Society|date=1 September 2007|accessdate=1 September 2007}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.thehugoawards.org/index.php?page_id=146|title=2008 Hugo Awards Announced|work=World Science Fiction Society|date=9 August 2008|accessdate=15 August 2007}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.locusmag.com/News/2011/04/2011-hugo-and-campbell-awards-nominees/|title=2011 Hugo and Campbell Awards Nominees|work=Locus Magazine|date=24 April 2011|accessdate=24 April 2011}}&lt;/ref&gt;  The 2016 Christmas special "[[The Return of Doctor Mysterio]]"  is  also a finalists for the 2017 Hugo Awards.&lt;ref&gt;{{Cite web|url=http://www.bbc.co.uk/blogs/doctorwho/entries/60727db8-a9c6-4859-b959-a9735a4eccd4|title=BBC Latest News - Doctor Who|last=|first=|date=|website=www.bbc.co.uk|language=en-GB|access-date=14 April 2017}}&lt;/ref&gt; Doctor Who star Matt Smith won Best Actor in the [[17th National Television Awards|2012 National Television awards]] alongside Karen Gillan who won Best Actress. ''Doctor Who'' has been nominated for over 200 awards and has won over a hundred of them.

As a British series, the majority of its nominations and awards have been for national competitions such as the BAFTAs, but it has occasionally received nominations in mainstream American awards, most notably a nomination for "Favorite Sci-Fi Show" in the 2008 [[People's Choice Awards]] and the series has been nominated multiple times in the Spike [[Scream Awards]], with Smith winning Best Science Fiction Actor in 2011. The Canadian [[Constellation Awards]] have also recognised the series.

==See also==
{{Portal|Doctor Who|BBC|Science fiction|Television in the United Kingdom}}
{{Wikipedia books|1=Doctor Who}}
* [[Time travel in fiction]]
* [[Doctor Who in Australia|''Doctor Who'' in Australia]]
* [[List of Doctor Who episodes (1963–1989)|List of ''Doctor Who'' episodes (1963–1989)]]
* [[List of Doctor Who episodes (2005–present)|List of ''Doctor Who'' episodes (2005–present)]]
* [[List of Doctor Who Christmas specials|List of ''Doctor Who'' Christmas specials]]
* [[List of Doctor Who universe creatures and aliens|List of ''Doctor Who'' universe creatures and aliens]]
* [[List of Doctor Who vehicles|List of ''Doctor Who'' vehicles]]
* [[Doctor Who in popular culture|''Doctor Who'' in popular culture]]
* [[List of Doctor Who home video releases|List of ''Doctor Who'' home video releases]]

==Notes==
{{Reflist|group=note|30em}}

==References==
{{Reflist|30em}}

===Cited texts===
{{refbegin|30em}}
* {{Cite book|last=Howe|first=David J.|authorlink=David J. Howe |author2=Mark Stammers |author3=[[Stephen James Walker]]|title=Doctor Who: The Sixties|year=1992|publisher=[[Virgin Books]]|edition=paperback|location=London|isbn=0-86369-707-0}}
* {{Cite book|title=The Handbook: The First Doctor&amp;nbsp;— The William Hartnell Years 1963–1966|first=David J.|last=Howe |author2=Mark Stammers |author3=[[Stephen James Walker]]|publisher=[[Virgin Books]]|location=London|year=1994|isbn=0-426-20430-1}}
* {{Cite book|author=Howe, David J &amp; [[Stephen James Walker|Walker, Stephen James]]|year=1998|title=Doctor Who: The Television Companion|edition=1st|location=London|publisher=[[BBC Books]]|isbn=978-0-563-40588-7}}
* {{Cite book|author1=Howe, David J  |author2=Walker, Stephen James|year=2003|title=The Television Companion: The Unofficial and Unauthorised Guide to DOCTOR WHO|edition=2nd|location=Surrey, UK|publisher=[[Telos Publishing|Telos Publishing Ltd.]]|isbn=1-903889-51-0}}
* {{Cite book|title=Doctor Who&amp;nbsp;— The Legend|first=Justin|last=Richards|authorlink=Justin Richards|publisher=[[BBC Books]]|year=2003|edition=1st|location=London|isbn=0-563-48602-3}}
{{refend}}

==Further reading==
* Matt Hills. ''Triumph of a Time Lord: Regenerating "Doctor Who" in the Twenty-First Century'' (I.B. Tauris, 2010) 261 pages. Discusses the revival of the BBC's Doctor Who in 2005 after it had been off the air as a regular series for more than 15 years; topics include the role of "fandom" in the sci-fi programme's return, and notions of "cult" and "mainstream" in television.
* Tabloid Bintang Indonesia, ''Doctor Who Pengganti Chalkzone''
* Majalah GADIS, ''Kenalan Bareng Doctor Who'', ''Ketemu Bareng 1st–11th Doctor''

==External links==
{{External links|date=July 2018}}
{{Wikiquote}}
{{Commons category|Doctor Who}}
{{wikinews|Category:Doctor Who}}
{{Spoken Wikipedia|En-Doctor Who-article.oga|2011-01-02}}

===Official websites===
* {{BBC programme|b006q2x0}}
* [http://www.doctorwho.tv/ ''Doctor Who'' 50th Anniversary: Official BBC Worldwide Site]
* {{Bbc.co.uk|id=wales/southeast/sites/doctorwho|title=''Doctor Who'' (BBC South East Wales)}}
* [http://www.bbc.co.uk/archive/changingwho/ BBC: The Changing Face of ''Doctor Who'']&amp;nbsp;– many press cuttings and articles from 1963 onwards
* [http://www.bbcamerica.com/doctor-who/ BBC America ''Doctor Who'' website]
* [https://web.archive.org/web/20090525094905/http://www.spacecast.com/shows/doctorwho.aspx SPACE Channel ''Doctor Who'' website]

===Past official BBC websites===
* [http://www.bbc.co.uk/doctorwho/s4/ ''Doctor Who'' Series 4]
* [http://www.bbc.co.uk/doctorwho/archive.shtml ''Doctor Who'' Series 1, 2 &amp; 3]
* [http://www.bbc.co.uk/doctorwho/classic/ ''Doctor Who'' Classic Season 1&amp;nbsp;– 1996 Movie]

===Reference websites===
{{TardisIndexFile}}
* [http://www.shannonsullivan.com/drwho/ ''Doctor Who'': A Brief History Of Time (Travel)]&amp;nbsp;– a production history of ''Doctor Who''
* [https://web.archive.org/web/20150205221954/http://drwhoguide.com/ The ''Doctor Who'' Reference Guide]&amp;nbsp;– synopses of every television episode, novel, audio drama, comic strip and spin-off video based on the series
* [http://www.drwho-online.co.uk/ ''Doctor Who'' Online]
* [http://www.gallifreybase.com/ Gallifrey Base]
* [http://gallifreybase.com/w/index.php/Main_Page BroaDWcast&amp;nbsp;– ''Doctor Who'' transmissions around the World]
* [http://doctorwhotv.co.uk/ ''Doctor Who'' TV]
* {{IMDb title|0056751|Doctor Who{{noitalics| (1963)}}}}
* {{IMDb title|0116118|Doctor Who{{noitalics| (1996)}}}}
* {{IMDb title|0436992|Doctor Who{{noitalics| (2005)}}}}
* {{AllMovie title|174951}}
* {{TV.com show|doctor-who|Doctor Who{{noitalics| (1963)}}}}
* {{TV.com show|doctor-who-2005|Doctor Who{{noitalics| (2005)}}}}
&lt;!-- additional sites added without discussion on the talk page will be reverted --&gt;

{{Doctor Who}}
{{Doctor Who episodes}}
{{Media in Cardiff}}
{{Russell T Davies}}
{{Steven Moffat}}
{{Navboxes|title=Awards for ''Doctor Who''|list=
{{BAFTA TV Award for Best Drama Series 1998–2009}}
{{Hugo Award for Best Dramatic Presentation, Short Form}}
{{Nebula Award for Best Script/Bradbury Award 2001–2020}}
{{Saturn Award for Best Television Presentation}}
}}

[[Category:1960s British drama television series]]
[[Category:1960s British science fiction television series]]
[[Category:1963 British television programme debuts]]
[[Category:1970s British drama television series]]
[[Category:1970s British science fiction television series]]
[[Category:1980s British drama television series]]
[[Category:1980s British science fiction television series]]
[[Category:1989 British television programme endings]]
[[Category:2000s British drama television series]]
[[Category:2000s British science fiction television series]]
[[Category:2005 British television programme debuts]]
[[Category:2010s British drama television series]]
[[Category:2010s British science fiction television series]]
[[Category:BAFTA winners (television series)]]
[[Category:BBC Cymru Wales television programmes]]
[[Category:BBC high definition programmes]]
[[Category:BBC Television programmes]]
[[Category:Black-and-white British television programmes]]
[[Category:British science fiction television programmes]]
[[Category:Doctor Who| ]]
[[Category:English-language television programs]]
[[Category:First-run syndicated television programs in the United States]]
[[Category:Intergalactic travel in fiction]]
[[Category:Media franchises introduced in 1963]]
[[Category:Media franchises]]
[[Category:Nonlinear narrative television series]]
[[Category:Parallel universes in fiction]]
[[Category:PBS network shows]]
[[Category:Peabody Award-winning television programs]]
[[Category:Space adventure television series]]
[[Category:Soft science fiction]]
[[Category:Television programs adapted into comics]]
[[Category:Television programs adapted into films]]
[[Category:Television programs adapted into novels]]
[[Category:Television programs adapted into video games]]
[[Category:Television series produced at Pinewood Studios]]
[[Category:Television series revived after cancellation]]
[[Category:Television series set in the future]]
[[Category:Temporal war fiction]]
[[Category:Time travel in fiction]]
[[Category:Time travel television series]]</text>
      <sha1>7w0r07r96l4lcoqihdd8w1211elgd71</sha1>
    </revision>
  </page>
  <page>
    <title>Template:'</title>
    <ns>10</ns>
    <id>5593936</id>
    <revision>
      <id>700770577</id>
      <parentid>694728302</parentid>
      <timestamp>2016-01-20T14:48:54Z</timestamp>
      <contributor>
        <username>Huntster</username>
        <id>92632</id>
      </contributor>
      <comment>Change per talk page discussion. If there are any issues found, contact me or another admin to revert.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="177">&lt;span class="nowrap" style="padding-left:0.1em;"&gt;&amp;#39;&lt;/span&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>ey7sacklsawhwpz5k5ytshi6df53r90</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Abbr</title>
    <ns>10</ns>
    <id>2557713</id>
    <revision>
      <id>729977787</id>
      <parentid>717635601</parentid>
      <timestamp>2016-07-15T21:52:51Z</timestamp>
      <contributor>
        <username>Matt Fitzpatrick</username>
        <id>291848</id>
      </contributor>
      <comment>escaping " as &amp;amp;quot; in title attribute per talk page request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="304">&lt;abbr {{#if:{{{class|}}}|class="{{{class}}}"}} {{#if:{{{id|}}}|id="{{{id}}}"}} {{#if:{{{style|}}}|style="{{{style}}}"}} title="{{#tag:nowiki|{{#invoke:String|replace|{{{2|}}}|"|&amp;quot;}}}}"&gt;{{#switch: {{{3|}}}
  | i | IPA = {{IPA|{{{1|}}}}}
  | {{{1|}}} }}&lt;/abbr&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>lsg55nurv2zqn8xx8h6dxaaqq3y08tu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:About</title>
    <ns>10</ns>
    <id>2468023</id>
    <revision>
      <id>827943532</id>
      <parentid>826439310</parentid>
      <timestamp>2018-02-27T17:34:08Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <comment>[[Wikipedia:Templates for discussion/Log/2018 February 18#Template:Redirect3_and_Template:About2]] closed as merge ([[WP:XFDC|XFDcloser]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="90">&lt;includeonly&gt;{{#invoke:about|about}}&lt;/includeonly&gt;&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>sewwzp1otrriymoi2xy4csy1ag24qbn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:AllMovie title</title>
    <ns>10</ns>
    <id>4732182</id>
    <revision>
      <id>852451303</id>
      <parentid>852450969</parentid>
      <timestamp>2018-07-29T02:36:36Z</timestamp>
      <contributor>
        <username>Zyxw</username>
        <id>473593</id>
      </contributor>
      <comment>Wikidata fix</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1155">{{#if: {{{1&lt;includeonly&gt;|&lt;/includeonly&gt;}}} {{{id|}}} {{#property:P1562}}

| [https://www.allmovie.com/movie/{{#if: {{{1|{{{id&lt;includeonly&gt;|&lt;/includeonly&gt;}}}}}} | v{{Trim|{{{1|{{{id}}}}}}}} | {{First word|{{#property:P1562}}|sep=,}} }}{{#switch: {{lc:{{{tab|}}}}}||review=|#default=/{{{tab}}}}} ''{{#if: {{{2|{{{title&lt;includeonly&gt;|&lt;/includeonly&gt;}}}}}} | {{{2|{{{title}}}}}} | {{PAGENAMEBASE}} }}''] at [[AllMovie]]&lt;includeonly&gt;{{EditAtWikidata|pid=P1562|{{{1|{{{id|}}}}}}}}{{ns0|{{#ifeq:{{#invoke:String|find |source={{#if:{{{1|{{{id|}}}}}}|v{{Trim|{{{1|{{{id}}}}}}}}|{{#property:P1562}}}} |target=v%D |plain=false}}|0||[[Category:AllMovie titles with invalid value]]}}}}&lt;/includeonly&gt;

| &lt;span class="error"&gt;&amp;#123;&amp;#123;[[Template:AllMovie title|AllMovie title]]&amp;#125;&amp;#125; template missing ID and not present in Wikidata.&lt;includeonly&gt;[[Category:AllMovie titles with invalid value]]&lt;/includeonly&gt;&lt;/span&gt;

}}&lt;includeonly&gt;{{#ifeq:{{lc:{{{tab|}}}}}|review|{{ns0|[[Category:AllMovie titles with a tab value of review]]}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}&lt;!-- Please add categories to the /doc subpage &amp; add interwikis to Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>l5z7o1rniak4qtyysejmnyu67igwaax</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ambox</title>
    <ns>10</ns>
    <id>13179742</id>
    <revision>
      <id>704688422</id>
      <parentid>578398722</parentid>
      <timestamp>2016-02-12T23:50:56Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <minor/>
      <comment>add temporary tracking category for small amboxes</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="220">{{#invoke:Message box|ambox}}{{#ifeq:{{{small}}}|left|[[Category:Articles using small message boxes]]}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>j0j11qao0sl45x6kzzme1ycda7wiz9f</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BAFTA TV Award for Best Drama Series</title>
    <ns>10</ns>
    <id>34066916</id>
    <revision>
      <id>841081174</id>
      <parentid>780408817</parentid>
      <timestamp>2018-05-13T23:40:02Z</timestamp>
      <contributor>
        <username>Charge2charge</username>
        <id>20384005</id>
      </contributor>
      <comment>2018</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1645">{{Navbox 
| name       = BAFTA TV Award for Best Drama Series
| title      = [[British Academy Television Award for Best Drama Series|BAFTA TV Award for Best Drama Series]]
| basestyle  = background: #BDB76B
| state      = {{{state|autocollapse}}}
| bodyclass  = hlist

| list1 = 
* ''[[Inspector Morse (TV series)|Inspector Morse]]'' (1992)
* ''[[Inspector Morse (TV series)|Inspector Morse]]'' (1993)
* ''[[Between the Lines (TV series)|Between the Lines]]'' (1994)
* ''[[Cracker (UK TV series)|Cracker]]'' (1995)
* ''[[Cracker (UK TV series)|Cracker]]'' (1996)
* ''[[EastEnders]]'' (1997)
* ''[[Jonathan Creek]]'' (1998)
* ''[[The Cops (TV series)|The Cops]]'' (1999)
* ''[[The Cops (TV series)|The Cops]]'' (2000)
* ''[[Clocking Off]]'' (2001)
* ''[[Cold Feet]]'' (2002)
* ''[[Spooks (TV series)|Spooks]]'' (2003)
* ''[[Buried (TV series)|Buried]]'' (2004)
* ''[[Shameless (UK TV series)|Shameless]]'' (2005)
* ''[[Doctor Who]]'' (2006)
* ''[[The Street (UK TV series)|The Street]]'' (2007)
* ''[[The Street (UK TV series)|The Street]]'' (2008)
* ''[[Wallander (UK TV series)|Wallander]]'' (2009)
* ''[[Misfits (TV series)|Misfits]]'' (2010)
* ''[[Sherlock (TV series)|Sherlock]]'' (2011)
* ''[[The Fades (TV series)|The Fades]]'' (2012)
* ''[[Last Tango in Halifax]]'' (2013)
* ''[[Broadchurch]]'' (2014)
* ''[[Happy Valley (TV series)|Happy Valley]]'' (2015)
* ''[[Wolf Hall (miniseries)|Wolf Hall]]'' (2016)
* ''[[Happy Valley (TV series)|Happy Valley]]'' (2017)
* ''[[Peaky Blinders (TV series)|Peaky Blinders]]'' (2018)

}}&lt;noinclude&gt;
{{collapsible option}}
[[Category:British Academy Television Awards navigational boxes]]
&lt;/noinclude&gt;</text>
      <sha1>or2xyzphzmokhiuk38kys3hwi2a07k7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BAFTA TV Award for Best Drama Series 1998–2009</title>
    <ns>10</ns>
    <id>34744042</id>
    <redirect title="Template:BAFTA TV Award for Best Drama Series" />
    <revision>
      <id>568636783</id>
      <parentid>476942260</parentid>
      <timestamp>2013-08-15T10:34:30Z</timestamp>
      <contributor>
        <username>AvicBot</username>
        <id>11952314</id>
      </contributor>
      <minor/>
      <comment>Robot: Fixing double redirect to [[Template:BAFTA TV Award for Best Drama Series]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="59">#REDIRECT [[Template:BAFTA TV Award for Best Drama Series]]</text>
      <sha1>5v2rk9yz1gyah2jmovsie8t2zvpc88p</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BBC Online</title>
    <ns>10</ns>
    <id>13188012</id>
    <revision>
      <id>825508867</id>
      <parentid>634455882</parentid>
      <timestamp>2018-02-13T20:18:17Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <comment>separate pp-template not needed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="157">[http://www.bbc.co.uk/{{{1|{{{id}}}}}} {{{2|{{{title|{{PAGENAME}}}}}}}} {{{3|{{{description|}}}}}}] at [[BBC Online]]&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>6468m2vb55e97a7mdp23ce6sojw6dsz</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BBC programme</title>
    <ns>10</ns>
    <id>25624684</id>
    <revision>
      <id>838448616</id>
      <parentid>807699156</parentid>
      <timestamp>2018-04-27T02:28:25Z</timestamp>
      <contributor>
        <username>Elegie</username>
        <id>5231193</id>
      </contributor>
      <comment>Use HTTPS for the BBC programme link in order to provide increased user privacy/security</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="501">[https://www.bbc.co.uk/programmes/{{Trim|{{{id|{{{1|{{#property:P827|[[Category:BBC programme template with no id set]]}}}}}}}}}} ''{{{title|{{{2|{{PAGENAMEBASE}}}}}}}} {{{description|{{{3|}}}}}}''] at [[BBC Online#iPlayer and Programmes sites|BBC Programmes]]&lt;includeonly&gt;{{#invoke:EditAtWikidata|showMessage|pid=P827|{{{id|{{{1|}}}}}}}}{{#if:{{{id|}}}{{{1|}}}|{{WikidataCheck|property=P827|value={{{id|{{{1|}}}}}}|category=BBC programme ID}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>4ra5jtiaq47ci89r54v8r9tecvdkuv2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Bbc.co.uk</title>
    <ns>10</ns>
    <id>22244572</id>
    <redirect title="Template:BBC Online" />
    <revision>
      <id>397884478</id>
      <parentid>397848206</parentid>
      <timestamp>2010-11-20T16:21:58Z</timestamp>
      <contributor>
        <username>Courcelles</username>
        <id>1004750</id>
      </contributor>
      <minor/>
      <comment>Protected Template:Bbc.co.uk: [[WP:HRT|Highly visible template]] ([edit=autoconfirmed] (indefinite) [move=autoconfirmed] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[Template:BBC Online]]</text>
      <sha1>hc76j05ofrjd9pcx6untab4h954ttp1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Catalog lookup link</title>
    <ns>10</ns>
    <id>50392128</id>
    <revision>
      <id>796840033</id>
      <parentid>718903401</parentid>
      <timestamp>2017-08-23T10:36:34Z</timestamp>
      <contributor>
        <username>Matthiaspaul</username>
        <id>13467261</id>
      </contributor>
      <comment>added leadout-postfix parameter (to specialcase MR template oddities)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3580">{{#if:{{trim|{{{1|}}}}}|{{#if:{{{article-link|}}}|[[{{{article-link|}}}{{#if:{{{article-name|}}}|{{!}}{{{article-name|}}}}}]]{{{article-postfix|}}}&amp;nbsp;|{{{article-name|}}}{{{article-postfix|}}}{{#if:{{{article-name|}}}|&amp;nbsp;}}}}{{#if:{{{link-prefix|}}}|[{{{link-prefix|}}}{{urlencode:{{trim|{{{1|}}}}}}}{{{link-postfix|}}} {{{item-prefix|}}}{{trim|{{{1|}}}}}{{{item-postfix|}}}]|{{{item-prefix|}}}{{trim|{{{1|}}}}}{{{item-postfix|}}}}}{{#if:{{trim|{{{2|}}}}}|{{#if:{{trim|{{{3|}}}}}|{{{list-separator|,&amp;#32;}}}|{{#if:{{{list-leadout|}}}|&amp;#32;{{{list-leadout|}}}{{{leadout-postfix|&amp;#32;}}}|{{{list-separator|,&amp;#32;}}}}}}}{{#if:{{{link-prefix|}}}|[{{{link-prefix|}}}{{urlencode:{{trim|{{{2|}}}}}}}{{{link-postfix|}}} {{{item-prefix|}}}{{trim|{{{2|}}}}}{{{item-postfix|}}}]|{{{item-prefix|}}}{{trim|{{{2|}}}}}{{{item-postfix|}}}}}{{#if:{{trim|{{{3|}}}}}|{{#if:{{trim|{{{4|}}}}}|{{{list-separator|,&amp;#32;}}}|{{#if:{{{list-leadout|}}}|&amp;#32;{{{list-leadout|}}}{{{leadout-postfix|&amp;#32;}}}|{{{list-separator|,&amp;#32;}}}}}}}{{#if:{{{link-prefix|}}}|[{{{link-prefix|}}}{{urlencode:{{trim|{{{3|}}}}}}}{{{link-postfix|}}} {{{item-prefix|}}}{{trim|{{{3|}}}}}{{{item-postfix|}}}]|{{{item-prefix|}}}{{trim|{{{3|}}}}}{{{item-postfix|}}}}}{{#if:{{trim|{{{4|}}}}}|{{#if:{{trim|{{{5|}}}}}|{{{list-separator|,&amp;#32;}}}|{{#if:{{{list-leadout|}}}|&amp;#32;{{{list-leadout|}}}{{{leadout-postfix|&amp;#32;}}}|{{{list-separator|,&amp;#32;}}}}}}}{{#if:{{{link-prefix|}}}|[{{{link-prefix|}}}{{urlencode:{{trim|{{{4|}}}}}}}{{{link-postfix|}}} {{{item-prefix|}}}{{trim|{{{4|}}}}}{{{item-postfix|}}}]|{{{item-prefix|}}}{{trim|{{{4|}}}}}{{{item-postfix|}}}}}{{#if:{{trim|{{{5|}}}}}|{{#if:{{trim|{{{6|}}}}}|{{{list-separator|,&amp;#32;}}}|{{#if:{{{list-leadout|}}}|&amp;#32;{{{list-leadout|}}}{{{leadout-postfix|&amp;#32;}}}|{{{list-separator|,&amp;#32;}}}}}}}{{#if:{{{link-prefix|}}}|[{{{link-prefix|}}}{{urlencode:{{trim|{{{5|}}}}}}}{{{link-postfix|}}} {{{item-prefix|}}}{{trim|{{{5|}}}}}{{{item-postfix|}}}]|{{{item-prefix|}}}{{trim|{{{5|}}}}}{{{item-postfix|}}}}}{{#if:{{trim|{{{6|}}}}}|{{#if:{{trim|{{{7|}}}}}|{{{list-separator|,&amp;#32;}}}|{{#if:{{{list-leadout|}}}|&amp;#32;{{{list-leadout|}}}{{{leadout-postfix|&amp;#32;}}}|{{{list-separator|,&amp;#32;}}}}}}}{{#if:{{{link-prefix|}}}|[{{{link-prefix|}}}{{urlencode:{{trim|{{{6|}}}}}}}{{{link-postfix|}}} {{{item-prefix|}}}{{trim|{{{6|}}}}}{{{item-postfix|}}}]|{{{item-prefix|}}}{{trim|{{{6|}}}}}{{{item-postfix|}}}}}{{#if:{{trim|{{{7|}}}}}|{{#if:{{trim|{{{8|}}}}}|{{{list-separator|,&amp;#32;}}}|{{#if:{{{list-leadout|}}}|&amp;#32;{{{list-leadout|}}}{{{leadout-postfix|&amp;#32;}}}|{{{list-separator|,&amp;#32;}}}}}}}{{#if:{{{link-prefix|}}}|[{{{link-prefix|}}}{{urlencode:{{trim|{{{7|}}}}}}}{{{link-postfix|}}} {{{item-prefix|}}}{{trim|{{{7|}}}}}{{{item-postfix|}}}]|{{{item-prefix|}}}{{trim|{{{7|}}}}}{{{item-postfix|}}}}}{{#if:{{trim|{{{8|}}}}}|{{#if:{{trim|{{{9|}}}}}|{{{list-separator|,&amp;#32;}}}|{{#if:{{{list-leadout|}}}|&amp;#32;{{{list-leadout|}}}{{{leadout-postfix|&amp;#32;}}}|{{{list-separator|,&amp;#32;}}}}}}}{{#if:{{{link-prefix|}}}|[{{{link-prefix|}}}{{urlencode:{{trim|{{{8|}}}}}}}{{{link-postfix|}}} {{{item-prefix|}}}{{trim|{{{8|}}}}}{{{item-postfix|}}}]|{{{item-prefix|}}}{{trim|{{{8|}}}}}{{{item-postfix|}}}}}{{#if:{{trim|{{{9|}}}}}|{{#if:{{{list-leadout|}}}|&amp;#32;{{{list-leadout|}}}{{{leadout-postfix|&amp;#32;}}}|{{{list-separator|,&amp;#32;}}}}}{{#if:{{{link-prefix|}}}|[{{{link-prefix|}}}{{urlencode:{{trim|{{{9|}}}}}}}{{{link-postfix|}}} {{{item-prefix|}}}{{trim|{{{9|}}}}}{{{item-postfix|}}}]|{{{item-prefix|}}}{{trim|{{{9|}}}}}{{{item-postfix|}}}}}}}}}}}}}}}}}}}}}}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>pjazjidcsvxcmpqqpfzz5kqeowvyug7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Category handler</title>
    <ns>10</ns>
    <id>25084818</id>
    <revision>
      <id>577959188</id>
      <parentid>577959113</parentid>
      <timestamp>2013-10-20T10:48:53Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Category handler: [[WP:High-risk templates|Highly visible template]]: allow template editors to edit ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="148">{{#invoke:Category handler|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories to the /doc subpage, and interwikis to Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>og6fhyj2ssd4fmzpqzuodk12q3cms0z</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cbignore</title>
    <ns>10</ns>
    <id>47034649</id>
    <revision>
      <id>728106388</id>
      <parentid>728096339</parentid>
      <timestamp>2016-07-03T06:47:44Z</timestamp>
      <contributor>
        <username>Closedmouth</username>
        <id>372693</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Cbignore]]": [[WP:High-risk templates|Highly visible template]] ([Edit=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>56q3glwxua861ekqmxdmx0ovfq3zxj9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Citation needed</title>
    <ns>10</ns>
    <id>2048472</id>
    <revision>
      <id>654624993</id>
      <parentid>654624898</parentid>
      <timestamp>2015-04-02T12:03:07Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <minor/>
      <comment>try again</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="515">{{ {{{|safesubst:}}}#invoke:Unsubst||date=__DATE__ |$B=
{{Fix
|name={{{name|Citation needed}}}
|link=Wikipedia:Citation needed
|text=citation needed
|class=Template-Fact
|title={{{reason|This claim needs references to reliable sources.}}}
|date={{{date|}}}
|cat=[[Category:All articles with unsourced statements]]
|cat-date=Category:Articles with unsourced statements
}}{{#if:{{{1|}}}|[[Category:Pages containing citation needed template with deprecated parameters]]}}
}}&lt;noinclude&gt;

{{Documentation}}

&lt;/noinclude&gt;</text>
      <sha1>gacd4ag6cry31kvoa6np8uzxo7bq89z</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite AV media</title>
    <ns>10</ns>
    <id>2327169</id>
    <revision>
      <id>774811519</id>
      <parentid>690395471</parentid>
      <timestamp>2017-04-10T20:26:44Z</timestamp>
      <contributor>
        <username>Lectonar</username>
        <id>128863</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Cite AV media]]": request at rfpp ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="132">&lt;includeonly&gt;{{#invoke:Citation/CS1 | citation
|CitationClass=audio-visual
}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}} &lt;/noinclude&gt;</text>
      <sha1>5uc4e2t6myaznmqj6pk8sugy3rcqv8a</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite AV media notes</title>
    <ns>10</ns>
    <id>6305183</id>
    <revision>
      <id>827245159</id>
      <parentid>744674373</parentid>
      <timestamp>2018-02-23T16:29:42Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Cite AV media notes]]": [[WP:HIGHRISK|high-risk]] template with 4000+ transclusions ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="189">&lt;noinclude&gt;&lt;/noinclude&gt;&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=AV-media-notes
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
[[Category:Lua-based templates]]
&lt;/noinclude&gt;</text>
      <sha1>tloff8l7rljr7zrcdqld7nv7qjmli7e</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite book</title>
    <ns>10</ns>
    <id>4086375</id>
    <revision>
      <id>810449908</id>
      <parentid>810433573</parentid>
      <timestamp>2017-11-15T09:11:45Z</timestamp>
      <contributor>
        <username>Salix alba</username>
        <id>212526</id>
      </contributor>
      <comment>put TD in a collapse top / bottom section</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="200">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=book
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
{{collapse top|TemplateData}}
{{Cite book/TemplateData}}
{{collapse bottom}}
&lt;/noinclude&gt;</text>
      <sha1>my4yy07itdv4e2t5sc1x4l3pzgpmzo7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite episode</title>
    <ns>10</ns>
    <id>4268531</id>
    <revision>
      <id>690395482</id>
      <parentid>657020245</parentid>
      <timestamp>2015-11-13T02:17:24Z</timestamp>
      <contributor>
        <username>Fuhghettaboutit</username>
        <id>665998</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Cite episode: when I changed this to add template editors, I didn't realize it had cascding protection—so all my change did was make it appear as if it could be edited by them ([Edit=Allow only administrators] (in...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="126">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=episode
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>jvfdi0mqjvckd5aqot5911am34ya3kq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite journal</title>
    <ns>10</ns>
    <id>4740319</id>
    <revision>
      <id>690395473</id>
      <parentid>579832342</parentid>
      <timestamp>2015-11-13T02:17:24Z</timestamp>
      <contributor>
        <username>Fuhghettaboutit</username>
        <id>665998</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Cite journal: when I changed this to add template editors, I didn't realize it had cascding protection—so all my change did was make it appear as if it could be edited by them ([Edit=Allow only administrators] (in...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="126">&lt;includeonly&gt;{{#invoke:Citation/CS1|citation
|CitationClass=journal
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>9fcytsszanq7xbwi3p28zsneear9938</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite news</title>
    <ns>10</ns>
    <id>4321630</id>
    <revision>
      <id>828626614</id>
      <parentid>828404709</parentid>
      <timestamp>2018-03-03T19:19:37Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <comment>Per edit request on [[Help talk:Citation Style 1]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="123">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=news
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>pbjnspfej5gxihr9izxrzkow3f1uf3i</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite press release</title>
    <ns>10</ns>
    <id>4821205</id>
    <revision>
      <id>828626560</id>
      <parentid>828404714</parentid>
      <timestamp>2018-03-03T19:19:13Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <comment>Per edit request on [[Help talk:Citation Style 1]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="162">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=pressrelease
|type={{{type|Press release}}}
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>rrr868rn0dee6pi9d99bhza0kd1bh7s</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite video</title>
    <ns>10</ns>
    <id>38081459</id>
    <redirect title="Template:Cite AV media" />
    <revision>
      <id>530710885</id>
      <timestamp>2013-01-01T04:49:31Z</timestamp>
      <contributor>
        <username>Delldot</username>
        <id>476500</id>
      </contributor>
      <comment>Delldot moved page [[Template:Cite video]] to [[Template:Cite AV media]]: [[Wikipedia:Templates_for_discussion/Log/2012_December_10#Template:Cite_video]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[Template:Cite AV media]]
</text>
      <sha1>o4m8a5iynt0evukcddod7ll58wl9l2o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite web</title>
    <ns>10</ns>
    <id>1252907</id>
    <revision>
      <id>753103437</id>
      <parentid>753063659</parentid>
      <timestamp>2016-12-05T05:36:52Z</timestamp>
      <contributor>
        <username>Anthony Appleyard</username>
        <id>119438</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Cite web]]": restore old protection ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="122">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=web
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>rcgmbcxu7hvs583g1f3rzz4c4dkizda</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Column-width</title>
    <ns>10</ns>
    <id>29216399</id>
    <revision>
      <id>638540885</id>
      <parentid>579832996</parentid>
      <timestamp>2014-12-17T20:09:33Z</timestamp>
      <contributor>
        <username>Edokter</username>
        <id>1624037</id>
      </contributor>
      <minor/>
      <comment>redundant</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="165">&lt;includeonly&gt;-moz-column-width: {{{1|30em}}}; -webkit-column-width: {{{1|30em}}}; column-width: {{{1|30em}}};&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>sum88q311kc02222mb4cgzbikcx7fqy</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Commons</title>
    <ns>10</ns>
    <id>1142901</id>
    <revision>
      <id>663514605</id>
      <parentid>579832974</parentid>
      <timestamp>2015-05-22T08:35:03Z</timestamp>
      <contributor>
        <username>Ianblair23</username>
        <id>145927</id>
      </contributor>
      <comment>sister → sister project</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="340">{{Sister project
| position = {{{position|}}}
| project  = commons
| text     = Wikimedia Commons has {{{alt-term|media related to}}} '''''[[commons:{{{1|Special:Search/{{PAGENAME}}}}}|{{{2|{{{1|{{PAGENAME}}}}}}}}]]'''''. 
}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories to the /doc sub-page and interwikis to Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>jsl21m980dd0x35wcb0x3ig1wed7oj1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Commons category</title>
    <ns>10</ns>
    <id>1275099</id>
    <revision>
      <id>845724501</id>
      <parentid>845720342</parentid>
      <timestamp>2018-06-13T18:10:30Z</timestamp>
      <contributor>
        <username>Ahecht</username>
        <id>2016996</id>
      </contributor>
      <comment>Handle underscores (which was asked for in the original edit request that resulted in the page name encoding, but never implemented)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1655">{{Commons
| position = {{{position|}}}
  &lt;!-- {{#if:x|}} strips whitespace from parameter 1, 
       in case it is fed like this: {{Commons category| Some cat }}. --&gt;
|1=Category:{{#if:{{{1|}}}
 |{{{1|}}}
 |{{#if:{{#property:P373}}
  |{{#property:P373}}
  |{{PAGENAME}}
 }}
}}
|2={{{2|{{{1|{{PAGENAME}}}}}}}}&lt;!--
--&gt;}}&lt;noinclude&gt;
{{Documentation}}
&lt;!-- Add categories to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;&lt;includeonly&gt;{{#if:{{{1|}}}||{{#if:{{#property:P373}}||{{#switch:{{NAMESPACE}}
|User|User talk=
|#default=[[Category:Commons category template with no category set|{{#ifeq:{{NAMESPACE}}|||{{Namespace Greek}}}}{{BASEPAGENAME}}]]&lt;!--
--&gt;}}}}}}&lt;!-- Some tracking categories to see if we're ready to switch to Wikidata
--&gt;{{#switch:{{NAMESPACE}}||{{ns:14}}=&lt;!-- Only articles and categories.
--&gt;{{#if:{{#property:P373}}
 | {{#if:{{{1|}}}
  | {{#ifeq:{{PAGENAME:{{#property:P373}}}}|{{PAGENAME:{{{1|}}}}}
   | &lt;!-- [[Category:Commons category with local link same as on Wikidata]]  – deleted per [[Wikipedia:Categories for discussion/Log/2017 January 25]] --&gt;
   | [[Category:Commons category with local link different than on Wikidata]] &lt;!-- Figure out the best link --&gt;
   }}
  | {{#ifeq:{{PAGENAME:{{#property:P373}}}}|{{PAGENAME}}
   | &lt;!-- [[Category:Commons category with page title same as on Wikidata]]  – deleted per [[Wikipedia:Categories for discussion/Log/2017 January 25]] --&gt;
   | [[Category:Commons category with page title different than on Wikidata]] &lt;!-- Figure out the best link here too --&gt;
   }}
  }}
 | [[Category:Commons category without a link on Wikidata]] &lt;!-- These we still need to import --&gt;
 }}
}}&lt;/includeonly&gt;</text>
      <sha1>qo9jmvihgxjpnews9nt27n7651wcztw</sha1>
    </revision>
  </page>
  <page>
    <title>Template:DMCA</title>
    <ns>10</ns>
    <id>23226218</id>
    <revision>
      <id>774491639</id>
      <parentid>296800547</parentid>
      <timestamp>2017-04-08T20:40:50Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:DMCA]]": [[WP:High-risk templates|Highly visible template]]: Allowing template editors ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="197">{{Dated maintenance category
 |onlyarticles=yes
 |1={{{1|}}}
 |2={{{2|}}}
 |3={{{3|}}}
 |4={{{4|}}}
 |5={{{5|}}}
}}&lt;noinclude&gt;
{{documentation|Template:Dated maintenance category/doc}}
&lt;/noinclude&gt;</text>
      <sha1>cl1tba6o83bu6hpmnvwvbcse6qwofoo</sha1>
    </revision>
  </page>
  <page>
    <title>Template:DW episode count</title>
    <ns>10</ns>
    <id>47938486</id>
    <revision>
      <id>819688960</id>
      <parentid>817091042</parentid>
      <timestamp>2018-01-10T19:25:19Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:DW episode count]]": [[WP:SEMI|semi-protecting]] highly-visible templates in response to recent template-space vandalism ([Edit=Require autoconfirmed or confirmed access] (indefinite) [Move=Require autoconfirmed or confirmed acces...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="406">&lt;includeonly&gt;{{#ifeq:{{{1|}}}|story|276&lt;!--stories--&gt;|840&lt;!--episodes--&gt;}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation|content=Update once a new episode of ''Doctor Who'' has completed airing. This template is used in multiple locations for transclusion at ''[[Doctor Who]]'' and ''[[List of Doctor Who serials]]''.&lt;br&gt;Current: {{DW episode count}} episodes, {{DW episode count|story}} stories.}}
&lt;/noinclude&gt;</text>
      <sha1>d3uq1botapwe5yi3tu6da0i3263ctbj</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Dated maintenance category</title>
    <ns>10</ns>
    <id>22598546</id>
    <revision>
      <id>589732290</id>
      <parentid>584337311</parentid>
      <timestamp>2014-01-08T08:14:55Z</timestamp>
      <contributor>
        <username>John of Reading</username>
        <id>11308236</id>
      </contributor>
      <comment>Second attempt. Those spaces upset inline templates such as {{As of}}. Instead, try an unconditional &lt;nowiki/&gt;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="660">&lt;nowiki/&gt;&lt;!--This nowiki helps to prevent whitespace at the top of articles--&gt;{{#ifeq:{{FULLROOTPAGENAME}}|Wikipedia:Template messages|&lt;!--Do not categorize--&gt;|&lt;!--
--&gt;{{#ifexpr:{{#if:{{NAMESPACE}}|0|1}}+{{#ifeq:{{{onlyarticles|no}}}|yes|0|1}}
 |{{#if:{{{3|}}}
  |[[Category:{{{1}}} {{{2}}} {{{3}}}]]&lt;!--
--&gt;{{#ifexist:Category:{{{1}}} {{{2}}} {{{3}}}
    |&lt;!--
 --&gt;|[[Category:Articles with invalid date parameter in template]]&lt;!--
--&gt;}}
  |[[Category:{{#if:{{{5|}}}
               |{{{5}}}&lt;!--
            --&gt;|{{{1}}}&lt;!--
           --&gt;}}]]&lt;!--
--&gt;}}{{#if:{{{4|}}}
      |[[Category:{{{4}}}]]}}&lt;!--
  --&gt;}}&lt;!--
--&gt;}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>7p59j4cq4i8wg65odpv5287yu50sczo</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Dead link</title>
    <ns>10</ns>
    <id>9172159</id>
    <revision>
      <id>730388591</id>
      <parentid>722412063</parentid>
      <timestamp>2016-07-18T18:37:28Z</timestamp>
      <contributor>
        <username>Cyberpower678</username>
        <id>14836860</id>
      </contributor>
      <comment>[[WP:BOLD|Boldy]] expand fix-attempted parameter to make template display [permanent dead link].</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="922">{{ {{{|safesubst:}}}#invoke:Unsubst||date=__DATE__ |$B=
&lt;!--{{Dead link}} begin--&gt;{{Fix
| special  = &lt;sup class="noprint Inline-Template"&gt;&lt;span style="white-space: nowrap;"&gt;&amp;#91;&lt;i&gt;{{#if: {{{url|}}}|[http://web.archive.org/web/*/{{{url|}}} &lt;span title="{{{title|}}}{{#if:{{{date|}}}|&amp;nbsp;since {{{date}}}}}"&gt;dead link&lt;/span&gt;]|[[Wikipedia:Link rot|&lt;span title="{{{title|}}}{{#if:{{{date|}}}|&amp;nbsp;Dead link since {{{date}}}}}"&gt;{{#if:{{{fix-attempted|}}}|permanent dead link|dead link}}&lt;/span&gt;]]}}&lt;/i&gt;&amp;#93;&lt;/span&gt;&lt;/sup&gt;
| date     = {{{date|}}}
| cat      = [[Category:All articles with dead external links]]
| cat-date = Category:Articles with dead external links}}&lt;includeonly&gt;{{#if:{{{fix-attempted|}}}|[[Category:Articles with permanently dead external links]]}}&lt;/includeonly&gt;&lt;!--{{Dead link}} end--&gt;
}}&lt;noinclude&gt;
{{Documentation}}
&lt;!-- PLEASE ADD CATEGORIES AND INTERWIKIS TO THE /doc SUBPAGE, THANKS --&gt;
&lt;/noinclude&gt;</text>
      <sha1>ta3gdfdcti2yw0ir97qx6h33eybxih7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Delink</title>
    <ns>10</ns>
    <id>28069338</id>
    <revision>
      <id>696877808</id>
      <parentid>695173639</parentid>
      <timestamp>2015-12-26T16:26:10Z</timestamp>
      <contributor>
        <username>Frietjes</username>
        <id>13791031</id>
      </contributor>
      <comment>{{documentation}} does this</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="179">{{&lt;includeonly&gt;safesubst:&lt;/includeonly&gt;#invoke:delink|delink}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>nxxwkb2lon9wgne4irg9ctbsle6zwiy</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Doctor Who</title>
    <ns>10</ns>
    <id>3234406</id>
    <revision>
      <id>852038445</id>
      <parentid>848026747</parentid>
      <timestamp>2018-07-26T06:51:00Z</timestamp>
      <contributor>
        <username>Sprite96</username>
        <id>31039239</id>
      </contributor>
      <minor/>
      <comment>Correct title style.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8186">{{Navbox
| name = Doctor Who
| title = ''[[Doctor Who]]''
| state = {{{state|autocollapse}}}
| bodyclass = hlist

&lt;!--If possible, please keep these in order of date; if that is not possible, group similar links in each list together (e.g. list of producers with script editors and writers. --&gt;
   |group1 = Characters
   |list1  = &lt;!--Please only add major recurring adversaries--&gt;
* [[The Doctor (Doctor Who)|The Doctor]]
* [[Companion (Doctor Who)|Companions]]
* [[Time Lord]]s
* [[Dalek]]s
* [[Cyberman|Cybermen]]
* [[Sontaran]]s
* [[Weeping Angel]]s
* [[The Master (Doctor Who)|The Master]]
* [[Davros]]
* [[Silurian (Doctor Who)|Silurians]]
   |group2 = Concepts
   |list2  =
* [[TARDIS]]
* [[Regeneration (Doctor Who)|Regeneration]]
* [[Sonic screwdriver]]
* [[Time War (Doctor Who)|Time War]]
* [[Blinovitch Limitation Effect]]
* [[Whoniverse]]
* [[Torchwood Institute]]
* [[UNIT]]

   |group3 = Miscellaneous
   |list3  =
* [[History of Doctor Who|History]]
* [[Doctor Who missing episodes|Missing episodes]]
* [[Doctor Who music|Music]]
** [[Doctor Who theme music|theme music]]
* [[Doctor Who in Canada and the United States|''Doctor Who'' in Canada and the U.S.]]
* [[Doctor Who in Australia|''Doctor Who'' in Australia]]
* [[Doctor Who fandom|Fandom]]
* [[Doctor Who merchandise|Merchandise]]

| group4 = Lists
| list4 = {{Navbox|subgroup
   |groupwidth = 6em
   |group1 = Production
   |list1  =
* [[List of Doctor Who episodes (1963–1989)|1963–1989 episodes]]
* [[List of Doctor Who episodes (2005–present)|2005–present episodes]]
* [[List of unmade Doctor Who serials and films|Unmade serials]]
* [[List of special Doctor Who episodes|Special episodes]]
* [[List of Doctor Who Christmas specials|Christmas specials]]
* [[List of Doctor Who radio stories|Radio stories]]
* [[List of awards and nominations received by Doctor Who|Awards and nominations]]
* [[List of Doctor Who home video releases|Home video]]
* [[List of actors who have played the Doctor|Doctors]]
* [[List of Doctor Who cast members|Cast]]
* [[List of guest appearances in Doctor Who|Guest appearances]]
* [[List of Doctor Who producers|Producers]]
* [[List of Doctor Who script editors|Script editors]]
* [[List of Doctor Who writers|Writers]]
* [[List of music featured on Doctor Who|Music]]
** [[List of Doctor Who composers|composers]]
** [[List of Doctor Who music releases|soundtrack releases]]

   |group2 = Narrative devices
   |list2  =
* [[List of Doctor Who supporting characters|Supporting characters]]
* [[List of UNIT personnel|UNIT personnel]]
* [[List of Doctor Who universe creatures and aliens|Creatures and aliens]]
* [[List of Doctor Who villains|Villains]]
* [[List of Doctor Who henchmen|Henchmen]]
* [[List of Doctor Who robots|Robots]]
* [[List of Doctor Who planets|Planets]]
* [[List of Doctor Who items|Items]]
* [[List of Doctor Who vehicles|Vehicles]]

   |group3 = Miscellaneous
   |list3  =
* [[Doctor Who exhibitions|''Doctor Who'' exhibitions]]
  }}

   |group5 = Spin-offs
   |list5  =
* ''[[K-9 and Company]]''
* [[Tardisode]]s
* ''[[Torchwood]]''
* ''[[The Sarah Jane Adventures]]''
* ''[[K-9 (TV series)|K-9]]''
* ''[[Class (2016 TV series)|Class]]''

   |group6 = Documentaries
   |list6  =
* ''[[Whose Doctor Who]]''
* ''[[Doctor Who: Thirty Years in the TARDIS|Thirty Years in the TARDIS]]''
* ''[[Dalekmania]]''
* ''[[Doctor Who Confidential]]''
* ''[[Totally Doctor Who]]''
* ''[[Torchwood Declassified]]''
* ''[[Doctor Who: The Commentaries]]''
* ''[[The Science of Doctor Who]]''
* ''[[Doctor Who Extra]]''
* ''[[Doctor Who: The Fan Show]]''

   |group7 = Concerts and&lt;br /&gt;stage shows
   |list7  =
* ''[[The Curse of the Daleks]]''
* ''[[Doctor Who and the Daleks in the Seven Keys to Doomsday]]''
* ''[[Doctor Who – The Ultimate Adventure]]''
* ''[[Doctor Who: A Celebration]]''
* ''Doctor Who'' Prom
** [[Doctor Who Prom (2008)|2008]]
** [[Doctor Who Prom (2010)|2010]]
** [[Doctor Who Prom (2013)|2013]]
* ''[[Doctor Who Live]]''

| group8 = Adaptations&lt;br /&gt;and tie-ins
| list8  = {{Navbox|subgroup
   |groupwidth = 6em
   |group1 = Films
   |list1  =
* ''[[Dr. Who and the Daleks]]''
* ''[[Daleks' Invasion Earth 2150 A.D.]]''

 |group2 = Books
   |list2  =
* [[List of Doctor Who novelisations|Novelisations]]
* [[Virgin New Adventures|New Adventures]]
* [[Virgin Missing Adventures|Missing Adventures]]
* [[Virgin Decalog]]
* [[Eighth Doctor Adventures]]
* [[Past Doctor Adventures]]
* [[BBC Short Trips]]
* [[New Series Adventures]]
* [[Telos Doctor Who novellas|Telos novellas]]
* [[Big Finish Short Trips]]

   |group3 = Audio
   |list3  =
* [[List of Doctor Who audio plays by Big Finish|Big Finish audio plays]]
* [[List of Doctor Who audiobooks|Audiobooks]]
* [[List of Doctor Who audio releases|Audio releases]]
* [[List of Doctor Who spin off audio plays by Big Finish|Big Finish Spin-off audio plays]]
** ''[[Cyberman (audio drama series)|Cyberman]]''
** ''[[Invasion of the Daleks|Dalek Empire]]''
** ''[[Gallifrey (audio series)|Gallifrey]]''
** ''[[I, Davros: Innocence|I, Davros]]''
** ''[[Jago &amp; Litefoot]]''
** ''[[Sarah Jane Smith: Comeback|Sarah Jane Smith]]''
** ''[[UNIT: Time Heals|UNIT]]''
** ''[[Torchwood (Big Finish series)|Torchwood]]''
*''[[Doctor Who: The Lost Stories|The Lost Stories]]''
* ''[[Doctor Who: Destiny of the Doctor|Destiny of the Doctor]]''
* ''[[Kaldor City]]''

   |group4 = Video
   |list4  =
* ''[[Wartime (film)|Wartime]]''
* ''[[P.R.O.B.E.]]''
* ''[[Shakedown: Return of the Sontarans]]''
* ''[[Mindgame (Doctor Who)|Mindgame]]''
* ''[[Downtime (Doctor Who)|Downtime]]''
* ''[[Auton (film series)|Auton]]''
* ''[[Dæmos Rising]]''
* ''[[Zygon: When Being You Just Isn't Enough]]''
* ''[[Dead and Buried (Bernice Summerfield)|Dead and Buried]]''

 |group5 = TV Specials
   |list5  =
* ''[[Dimensions in Time]]''
* ''[[Doctor Who: The Curse of Fatal Death|The Curse of Fatal Death]]''
* ''[[Scream of the Shalka]]''
* ''[[An Adventure in Space and Time]]''
* ''[[The Five(ish) Doctors Reboot]]''

   |group6 = Video games
   |list6  =
* ''[[Doctor Who: The First Adventure]]''
* ''[[Doctor Who and the Warlord|The Warlord]]''
* ''[[Doctor Who and the Mines of Terror|The Mines of Terror]]''
* ''[[Dalek Attack]]''
* ''[[Doctor Who: Destiny of the Doctors|Destiny of the Doctors]]''
* ''[[Top Trumps: Doctor Who|Top Trumps]]''
* ''[[Doctor Who: The Adventure Games|The Adventure Games]]''
* ''[[Doctor Who: Return to Earth|Return to Earth]]''
* ''[[Doctor Who: Evacuation Earth|Evacuation Earth]]''
* ''[[Doctor Who: The Mazes of Time|The Mazes of Time]]''
* ''[[Doctor Who: Worlds in Time|Worlds in Time]]''
* ''[[Doctor Who: The Eternity Clock|The Eternity Clock]]''
* ''[[Doctor Who: Legacy]]''

   |group7 = Miscellaneous
   |list7  =
* [[List of Doctor Who comic stories|Comic stories]]
* [[Doctor Who spin-offs|''Doctor Who'' spin-offs]]
* [[List of companions in Doctor Who spin-offs|Spin-off companions]]
* [[Faction Paradox]]
* [[Iris Wildthyme]]
* [[Death's Head]]
* [[Dalek comic strips, illustrated annuals and graphic novels]]
* [[Doctor Who (pinball)|Pinball]]
* [[Doctor Who: The Card Game|Card game]]
* [[Doctor Who in popular culture|Popular culture]]
* [[List of Doctor Who parodies|Spoofs]]
* ''[[Star Trek: The Next Generation/Doctor Who: Assimilation2|Star Trek: The Next Generation/Doctor Who: Assimilation&lt;sup&gt;2&lt;/sup&gt;]]''
  }}

| group9 = Related&lt;br&gt;publications
| list9  = {{Navbox|subgroup
   |groupwidth = 6em
   |group2 = Magazines
   |list2  =
* ''[[Doctor Who Magazine]]''
* ''[[Doctor Who Adventures]]''
* ''[[Doctor Who – Battles in Time]]''
* ''[[The Black Archive]]''

   |group3 = Publishers
   |list3  =
* [[Big Finish Productions]]
* [[Reeltime Pictures]]
* [[Bill &amp; Ben Video|BBV]]
* [[Mad Norwegian Press]]
* [[Magic Bullet Productions]]
* [[Obverse Books]]
  }}

| below =
* {{icon|portal}} [[Portal:Doctor Who|Portal]]
* {{icon|category}} [[:Category:Doctor Who|Category]]
* {{icon|Book}} [[Book:Doctor Who|Book]]

}}&lt;noinclude&gt;
{{collapsible option}}
[[Category:Doctor Who navigational boxes| ]]
[[Category:Torchwood templates]]
[[Category:United Kingdom television series navigational boxes]]
[[Category:Science fiction series templates]]
&lt;/noinclude&gt;</text>
      <sha1>ltm03dveey92fx6fqj99lpvlc8k9kdk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Doctor Who episodes</title>
    <ns>10</ns>
    <id>22255792</id>
    <revision>
      <id>825694415</id>
      <parentid>822402721</parentid>
      <timestamp>2018-02-14T21:20:58Z</timestamp>
      <contributor>
        <username>Netoholic</username>
        <id>41995</id>
      </contributor>
      <comment>bypass redirect after page move</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18114">{{Navbox
| name = Doctor Who episodes
| title = ''[[Doctor Who]]'' episodes
| state = {{{state|autocollapse}}}
| bodyclass = hlist

| above = 
: [[List of Doctor Who episodes (1963–1989)|1963–1989 episodes]]
: [[List of Doctor Who episodes (2005–present)|2005–present episodes]]

; Original series (1963–1989)
: [[Doctor Who (season 1)|1]]
: [[Doctor Who (season 2)|2]]
: [[Doctor Who (season 3)|3]]
: [[Doctor Who (season 4)|4]]
: [[Doctor Who (season 5)|5]]
: [[Doctor Who (season 6)|6]]
: [[Doctor Who (season 7)|7]]
: [[Doctor Who (season 8)|8]]
: [[Doctor Who (season 9)|9]]
: [[Doctor Who (season 10)|10]]
: [[Doctor Who (season 11)|11]]
: [[Doctor Who (season 12)|12]]
: [[Doctor Who (season 13)|13]]
: [[Doctor Who (season 14)|14]]
: [[Doctor Who (season 15)|15]]
: [[The Key to Time|16]]
: [[Doctor Who (season 17)|17]]
: [[Doctor Who (season 18)|18]]
: [[Doctor Who (season 19)|19]]
: [[Doctor Who (season 20)|20]]
: [[Doctor Who (season 21)|21]]
: [[Doctor Who (season 22)|22]]
: [[The Trial of a Time Lord|23]]
: [[Doctor Who (season 24)|24]]
: [[Doctor Who (season 25)|25]]
: [[Doctor Who (season 26)|26]]

; 1996 film
: ''[[Doctor Who (film)|Doctor Who]]''

; Revived series (2005–present)
: [[Doctor Who (series 1)|1]]
: [[Doctor Who (series 2)|2]]
: [[Doctor Who (series 3)|3]]
: [[Doctor Who (series 4)|4]]
: [[Doctor Who (2008–2010 specials)|2008–2010 specials]]
: [[Doctor Who (series 5)|5]]
: [[Doctor Who (series 6)|6]]
: [[Doctor Who (series 7)|7]]
: [[Doctor Who (2013 specials)|2013 specials]]
: [[Doctor Who (series 8)|8]]
: [[Doctor Who (series 9)|9]]
: [[Doctor Who (series 10)|10]]
: [[Doctor Who (series 11)|11]]

; Episodes
: {{DW episode count}} ([[Doctor Who missing episodes|97 missing]])
; Stories
: {{DW episode count|story}}

| group1 = [[Doctor Who (season 1)|Season 1]]
| list1 = {{#switch:{{{1|}}} || C1 =
* ''[[An Unearthly Child]]''
* ''[[The Daleks]]''
* ''[[The Edge of Destruction]]''
* ''[[Marco Polo (Doctor Who)|Marco Polo]]''
* ''[[The Keys of Marinus]]''
* ''[[The Aztecs (Doctor Who)|The Aztecs]]''
* ''[[The Sensorites]]''
* ''[[The Reign of Terror (Doctor Who)|The Reign of Terror]]''
}}

| group2 = [[Doctor Who (season 2)|Season 2]]
| list2 = {{#switch:{{{1|}}} || C2 =
* ''[[Planet of Giants]]''
* ''[[The Dalek Invasion of Earth]]''
* ''[[The Rescue (Doctor Who)|The Rescue]]''
* ''[[The Romans (Doctor Who)|The Romans]]''
* ''[[The Web Planet]]''
* ''[[The Crusade (Doctor Who)|The Crusade]]''
* ''[[The Space Museum]]''
* ''[[The Chase (Doctor Who)|The Chase]]''
* ''[[The Time Meddler]]''
}}

| group3 = [[Doctor Who (season 3)|Season 3]]
| list3 = {{#switch:{{{1|}}} || C3 =
* ''[[Galaxy 4]]''
* "[[Mission to the Unknown]]"
* ''[[The Myth Makers]]''
* ''[[The Daleks' Master Plan]]''
* ''[[The Massacre of St Bartholomew's Eve]]''
* ''[[The Ark (Doctor Who)|The Ark]]''
* ''[[The Celestial Toymaker]]''
* ''[[The Gunfighters]]''
* ''[[The Savages (Doctor Who)|The Savages]]''
* ''[[The War Machines]]''
}}

| group4 = [[Doctor Who (season 4)|Season 4]]
| list4 = {{#switch:{{{1|}}} || C4 =
* ''[[The Smugglers]]''
* ''[[The Tenth Planet]]''
* ''[[The Power of the Daleks]]''
* ''[[The Highlanders (Doctor Who)|The Highlanders]]''
* ''[[The Underwater Menace]]''
* ''[[The Moonbase]]''
* ''[[The Macra Terror]]''
* ''[[The Faceless Ones]]''
* ''[[The Evil of the Daleks]]''
}}

| group5 = [[Doctor Who (season 5)|Season 5]]
| list5 = {{#switch:{{{1|}}} || C5 =
* ''[[The Tomb of the Cybermen]]''
* ''[[The Abominable Snowmen]]''
* ''[[The Ice Warriors]]''
* ''[[The Enemy of the World]]''
* ''[[The Web of Fear]]''
* ''[[Fury from the Deep]]''
* ''[[The Wheel in Space]]''
}}

| group6 = [[Doctor Who (season 6)|Season 6]]
| list6 = {{#switch:{{{1|}}} || C6 =
* ''[[The Dominators]]''
* ''[[The Mind Robber]]''
* ''[[The Invasion (Doctor Who)|The Invasion]]''
* ''[[The Krotons]]''
* ''[[The Seeds of Death]]''
* ''[[The Space Pirates]]''
* ''[[The War Games]]''
}}

| group7 = [[Doctor Who (season 7)|Season 7]]
| list7 = {{#switch:{{{1|}}} || C7 =
* ''[[Spearhead from Space]]''
* ''[[Doctor Who and the Silurians]]''
* ''[[The Ambassadors of Death]]''
* ''[[Inferno (Doctor Who)|Inferno]]''
}}

| group8 = [[Doctor Who (season 8)|Season 8]]
| list8 = {{#switch:{{{1|}}} || C8 =
* ''[[Terror of the Autons]]''
* ''[[The Mind of Evil]]''
* ''[[The Claws of Axos]]''
* ''[[Colony in Space]]''
* ''[[The Dæmons]]''
}}

| group9 = [[Doctor Who (season 9)|Season 9]]
| list9 = {{#switch:{{{1|}}} || C9 =
* ''[[Day of the Daleks]]''
* ''[[The Curse of Peladon]]''
* ''[[The Sea Devils]]''
* ''[[The Mutants]]''
* ''[[The Time Monster]]''
}}

| group10 = [[Doctor Who (season 10)|Season 10]]
| list10 = {{#switch:{{{1|}}} || C10 =
* ''[[The Three Doctors (Doctor Who)|The Three Doctors]]''
* ''[[Carnival of Monsters]]''
* ''[[Frontier in Space]]''
* ''[[Planet of the Daleks]]''
* ''[[The Green Death]]''
}}

| group11 = [[Doctor Who (season 11)|Season 11]]
| list11 = {{#switch:{{{1|}}} || C11 =
* ''[[The Time Warrior]]''
* ''[[Invasion of the Dinosaurs]]''
* ''[[Death to the Daleks]]''
* ''[[The Monster of Peladon]]''
* ''[[Planet of the Spiders]]''
}}

| group12 = [[Doctor Who (season 12)|Season 12]]
| list12 = {{#switch:{{{1|}}} || C12 =
* ''[[Robot (Doctor Who)|Robot]]''
* ''[[The Ark in Space]]''
* ''[[The Sontaran Experiment]]''
* ''[[Genesis of the Daleks]]''
* ''[[Revenge of the Cybermen]]''
}}

| group13 = [[Doctor Who (season 13)|Season 13]]
| list13 = {{#switch:{{{1|}}} || C13 =
* ''[[Terror of the Zygons]]''
* ''[[Planet of Evil]]''
* ''[[Pyramids of Mars]]''
* ''[[The Android Invasion]]''
* ''[[The Brain of Morbius]]''
* ''[[The Seeds of Doom]]''
}}

| group14 = [[Doctor Who (season 14)|Season 14]]
| list14 = {{#switch:{{{1|}}} || C14 =
* ''[[The Masque of Mandragora]]''
* ''[[The Hand of Fear]]''
* ''[[The Deadly Assassin]]''
* ''[[The Face of Evil]]''
* ''[[The Robots of Death]]''
* ''[[The Talons of Weng-Chiang]]''
}}

| group15 = [[Doctor Who (season 15)|Season 15]]
| list15 = {{#switch:{{{1|}}} || C15 =
* ''[[Horror of Fang Rock]]''
* ''[[The Invisible Enemy (Doctor Who)|The Invisible Enemy]]''
* ''[[Image of the Fendahl]]''
* ''[[The Sun Makers]]''
* ''[[Underworld (Doctor Who)|Underworld]]''
* ''[[The Invasion of Time]]''
}}

| group16 = [[The Key to Time|Season 16]]
| list16 = {{#switch:{{{1|}}} || C16 =
* ''[[The Ribos Operation]]''
* ''[[The Pirate Planet]]''
* ''[[The Stones of Blood]]''
* ''[[The Androids of Tara]]''
* ''[[The Power of Kroll]]''
* ''[[The Armageddon Factor]]''
}}

| group17 = [[Doctor Who (season 17)|Season 17]]
| list17 = {{#switch:{{{1|}}} || C17 =
* ''[[Destiny of the Daleks]]''
* ''[[City of Death]]''
* ''[[The Creature from the Pit]]''
* ''[[Nightmare of Eden]]''
* ''[[The Horns of Nimon]]''
* ''[[Shada (Doctor Who)|Shada]]'' (unaired)
}}

| group18 = [[Doctor Who (season 18)|Season 18]]
| list18 = {{#switch:{{{1|}}} || C18 =
* ''[[The Leisure Hive]]''
* ''[[Meglos]]''
* ''[[Full Circle (Doctor Who)|Full Circle]]''
* ''[[State of Decay]]''
* ''[[Warriors' Gate]]''
* ''[[The Keeper of Traken]]''
* ''[[Logopolis]]''
}}

| group19 = [[Doctor Who (season 19)|Season 19]]
| list19 = {{#switch:{{{1|}}} || C19 =
* ''[[Castrovalva (Doctor Who)|Castrovalva]]''
* ''[[Four to Doomsday]]''
* ''[[Kinda (Doctor Who)|Kinda]]''
* ''[[The Visitation (Doctor Who)|The Visitation]]''
* ''[[Black Orchid (Doctor Who)|Black Orchid]]''
* ''[[Earthshock]]''
* ''[[Time-Flight]]''
}}

| group20 = [[Doctor Who (season 20)|Season 20]]
| list20 = {{#switch:{{{1|}}} || C20 =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Season
 | list1 =
* ''[[Arc of Infinity]]''
* ''[[Snakedance]]''
* ''[[Mawdryn Undead]]''
* ''[[Terminus (Doctor Who)|Terminus]]''
* ''[[Enlightenment (Doctor Who)|Enlightenment]]''
* ''[[The King's Demons]]''

 | group2 = Special
 | list2 = 
* ''[[The Five Doctors]]''
}}
}}

| group21 = [[Doctor Who (season 21)|Season 21]]
| list21 = {{#switch:{{{1|}}} || C21 =
* ''[[Warriors of the Deep]]''
* ''[[The Awakening (Doctor Who)|The Awakening]]''
* ''[[Frontios]]''
* ''[[Resurrection of the Daleks]]''
* ''[[Planet of Fire]]''
* ''[[The Caves of Androzani]]''
* ''[[The Twin Dilemma]]''
}}

| group22 = [[Doctor Who (season 22)|Season 22]]
| list22 = {{#switch:{{{1|}}} || C22 =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Season
 | list1 = 
* ''[[Attack of the Cybermen]]''
* ''[[Vengeance on Varos]]''
* ''[[The Mark of the Rani]]''
* ''[[The Two Doctors]]''
* ''[[Timelash]]''
* ''[[Revelation of the Daleks]]''

 | group2 = {{abbr|Supp.|Supplementary}}
 | list2 = 
* "[[A Fix with Sontarans]]"
}}
}}

| group23 = [[The Trial of a Time Lord|Season 23]]	
| list23 = {{#switch:{{{1|}}} || C23 =
* ''[[The Mysterious Planet]]''
* ''[[Mindwarp]]''
* ''[[Terror of the Vervoids]]''
* ''[[The Ultimate Foe]]''
}}

| group24 = [[Doctor Who (season 24)|Season 24]]
| list24 = {{#switch:{{{1|}}} || C24 =
* ''[[Time and the Rani]]''
* ''[[Paradise Towers]]''
* ''[[Delta and the Bannermen]]''
* ''[[Dragonfire (Doctor Who)|Dragonfire]]''
}}

| group25 = [[Doctor Who (season 25)|Season 25]]
| list25 = {{#switch:{{{1|}}} || C25 =
* ''[[Remembrance of the Daleks]]''
* ''[[The Happiness Patrol]]''
* ''[[Silver Nemesis]]''
* ''[[The Greatest Show in the Galaxy]]''
}}

| group26 = [[Doctor Who (season 26)|Season 26]]
| list26 = {{#switch:{{{1|}}} || C26 =
* ''[[Battlefield (Doctor Who)|Battlefield]]''
* ''[[Ghost Light (Doctor Who)|Ghost Light]]''
* ''[[The Curse of Fenric]]''
* ''[[Survival (Doctor Who)|Survival]]''
}}

| group27 = [[Doctor Who (series 1)|Series 1]]
| list27 = {{#switch:{{{1|}}} || N1 =
* "[[Rose (Doctor Who episode)|Rose]]"
* "[[The End of the World (Doctor Who)|The End of the World]]"
* "[[The Unquiet Dead]]"
* "[[Aliens of London]]" / "[[World War Three (Doctor Who)|World War Three]]"
* "[[Dalek (Doctor Who episode)|Dalek]]"
* "[[The Long Game]]"
* "[[Father's Day (Doctor Who)|Father's Day]]"
* "[[The Empty Child]]" / "[[The Doctor Dances]]"
* "[[Boom Town (Doctor Who)|Boom Town]]"
* "[[Bad Wolf]]" / "[[The Parting of the Ways]]"
}}

| group28 = [[Doctor Who (series 2)|Series 2]]
| list28 = {{#switch:{{{1|}}} || N2 =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Christmas
 | list1 = 
* "[[The Christmas Invasion]]"

 | group2 = Series
 | list2 = 
* "[[New Earth (Doctor Who)|New Earth]]"
* "[[Tooth and Claw (Doctor Who)|Tooth and Claw]]"
* "[[School Reunion (Doctor Who)|School Reunion]]"
* "[[The Girl in the Fireplace]]"
* "[[Rise of the Cybermen]]" / "[[The Age of Steel]]"
* "[[The Idiot's Lantern]]"
* "[[The Impossible Planet]]" / "[[The Satan Pit]]"
* "[[Love &amp; Monsters]]"
* "[[Fear Her]]"
* "[[Army of Ghosts]]" / "[[Doomsday (Doctor Who)|Doomsday]]"

 | group3 = {{abbr|Supp.|Supplementary}}
 | list3 = 
* "[[Doctor Who: Children in Need]]"
* "[[Attack of the Graske]]"
* ''[[Tardisode|Tardisodes]]''
}}
}}

| group29 = [[Doctor Who (series 3)|Series 3]]
| list29 = {{#switch:{{{1|}}} || N3 =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Christmas
 | list1 = "[[The Runaway Bride (Doctor Who)|The Runaway Bride]]"

 | group2 = Series
 | list2 = 
* "[[Smith and Jones (Doctor Who)|Smith and Jones]]"
* "[[The Shakespeare Code]]"
* "[[Gridlock (Doctor Who)|Gridlock]]"
* "[[Daleks in Manhattan]]" / "[[Evolution of the Daleks]]"
* "[[The Lazarus Experiment]]"
* "[[42 (Doctor Who)|42]]"
* "[[Human Nature (Doctor Who)|Human Nature]]" / "[[The Family of Blood]]"
* "[[Blink (Doctor Who)|Blink]]"
* "[[Utopia (Doctor Who)|Utopia]]" / "[[The Sound of Drums]]" / "[[Last of the Time Lords]]"

 | group3 = {{abbr|Supp.|Supplementary}}
 | list3 = 
* ''[[The Infinite Quest]]''
}}
}}

| group30 = [[Doctor Who (series 4)|Series 4]]
| list30 = {{#switch:{{{1|}}} || N4 =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Christmas
 | list1 = 
* "[[Voyage of the Damned (Doctor Who)|Voyage of the Damned]]"

 | group2 = Series
 | list2 = 
* "[[Partners in Crime (Doctor Who)|Partners in Crime]]"
* "[[The Fires of Pompeii]]"
* "[[Planet of the Ood]]"
* "[[The Sontaran Stratagem]]" / "[[The Poison Sky]]"
* "[[The Doctor's Daughter]]"
* "[[The Unicorn and the Wasp]]"
* "[[Silence in the Library]]" / "[[Forest of the Dead]]"
* "[[Midnight (Doctor Who)|Midnight]]"
* "[[Turn Left (Doctor Who)|Turn Left]]"
* "[[The Stolen Earth]]" / "[[Journey's End (Doctor Who)|Journey's End]]"

 | group3 = {{abbr|Supp.|Supplementary}}
 | list3 = 
* "[[Time Crash]]"
}}
}}

| group31 = [[Doctor Who (2008–2010 specials)|2008–2010&lt;br /&gt;specials]]
| list31 = {{#switch:{{{1|}}} || N4a =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Specials
 | list1 = 
* "[[The Next Doctor]]"
* "[[Planet of the Dead]]"
* "[[The Waters of Mars]]"
* ''[[The End of Time (Doctor Who)|The End of Time]]''

 | group2 = {{abbr|Supp.|Supplementary}}
 | list2 = 
* ''[[Dreamland (Doctor Who)|Dreamland]]''
* "[[Music of the Spheres (Doctor Who)|Music of the Spheres]]"
}}
}}

| group32 = [[Doctor Who (series 5)|Series 5]]
| list32 = {{#switch:{{{1|}}} || N5 =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Series
 | list1 = 
* "[[The Eleventh Hour (Doctor Who)|The Eleventh Hour]]"
* "[[The Beast Below]]"
* "[[Victory of the Daleks]]"
* "[[The Time of Angels]]" / "[[Flesh and Stone]]"
* "[[The Vampires of Venice]]"
* "[[Amy's Choice (Doctor Who)|Amy's Choice]]"
* "[[The Hungry Earth]]" / "[[Cold Blood (Doctor Who)|Cold Blood]]"
* "[[Vincent and the Doctor]]"
* "[[The Lodger (Doctor Who)|The Lodger]]"
* "[[The Pandorica Opens]]" / "[[The Big Bang (Doctor Who)|The Big Bang]]"

 | group2 = {{abbr|Supp.|Supplementary}}
 | list2 = 
* ''[[Doctor Who (series 5)#Supplemental episodes|Meanwhile in the TARDIS]]''
}}
}}

| group33 = [[Doctor Who (series 6)|Series 6]]
| list33 = {{#switch:{{{1|}}} || N6 =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Christmas
 | list1 = 
* "[[A Christmas Carol (Doctor Who)|A Christmas Carol]]"

 | group2 = Series
 | list2 = 
* "[[The Impossible Astronaut]]" / "[[Day of the Moon]]"
* "[[The Curse of the Black Spot]]"
* "[[The Doctor's Wife]]"
* "[[The Rebel Flesh]]" / "[[The Almost People]]"
* "[[A Good Man Goes to War]]"
* "[[Let's Kill Hitler]]"
* "[[Night Terrors (Doctor Who)|Night Terrors]]"
* "[[The Girl Who Waited]]"
* "[[The God Complex]]"
* "[[Closing Time (Doctor Who)|Closing Time]]"
* "[[The Wedding of River Song]]"

 | group3 = {{abbr|Supp.|Supplementary}}
 | list3 = 
* [[Space / Time|"Space" / "Time"]]
* "[[Death Is the Only Answer]]"
* ''[[Night and the Doctor]]''
}}
}}

| group34 = [[Doctor Who (series 7)|Series 7]]
| list34 = {{#switch:{{{1|}}} || N7 =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Christmas
 | list1 = 
* "[[The Doctor, the Widow and the Wardrobe]]"
* "[[The Snowmen]]"

 | group2 = Series
 | list2 = 
* "[[Asylum of the Daleks]]"
* "[[Dinosaurs on a Spaceship]]"
* "[[A Town Called Mercy]]"
* "[[The Power of Three (Doctor Who)|The Power of Three]]"
* "[[The Angels Take Manhattan]]"
* "[[The Bells of Saint John]]"
* "[[The Rings of Akhaten]]"
* "[[Cold War (Doctor Who)|Cold War]]"
* "[[Hide (Doctor Who)|Hide]]"
* "[[Journey to the Centre of the TARDIS]]"
* "[[The Crimson Horror]]"
* "[[Nightmare in Silver]]"
* "[[The Name of the Doctor]]"

 | group3 = {{abbr|Supp.|Supplementary}}
 | list3 = 
* "[[Good as Gold (Doctor Who)|Good as Gold]]"
* ''[[Pond Life (Doctor Who)|Pond Life]]''
* "[[P.S. (Doctor Who)|P.S.]]"
}}
}}

| group35 = [[Doctor Who (2013 specials)|2013&lt;br /&gt;specials]]
| list35 = {{#switch:{{{1|}}} || N7a =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Specials
 | list1 = 
* "[[The Day of the Doctor]]"
* "[[The Time of the Doctor]]"

 | group2 = {{abbr|Supp.|Supplementary}}
 | list2 = 
* "[[The Night of the Doctor]]"
* "[[The Last Day (Doctor Who)|The Last Day]]"
}}
}}

| group36 = [[Doctor Who (series 8)|Series 8]]
| list36 = {{#switch:{{{1|}}} || N8 =
* "[[Deep Breath (Doctor Who)|Deep Breath]]"
* "[[Into the Dalek]]"
* "[[Robot of Sherwood]]"
* "[[Listen (Doctor Who)|Listen]]"
* "[[Time Heist]]"
* "[[The Caretaker (Doctor Who)|The Caretaker]]"
* "[[Kill the Moon]]"
* "[[Mummy on the Orient Express]]"
* "[[Flatline (Doctor Who)|Flatline]]"
* "[[In the Forest of the Night]]"
* "[[Dark Water (Doctor Who)|Dark Water]]" / "[[Death in Heaven]]"
}}

| group37 = [[Doctor Who (series 9)|Series 9]]
| list37 = {{#switch:{{{1|}}} || N9 =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Christmas
 | list1 = 
* "[[Last Christmas (Doctor Who)|Last Christmas]]"
* "[[The Husbands of River Song]]"

 | group2 = Series
 | list2 = 
* "[[The Magician's Apprentice (Doctor Who)|The Magician's Apprentice]]" / "[[The Witch's Familiar]]"
* "[[Under the Lake]]" / "[[Before the Flood (Doctor Who)|Before the Flood]]"
* "[[The Girl Who Died]]"
* "[[The Woman Who Lived]]"
* "[[The Zygon Invasion]]" / "[[The Zygon Inversion]]"
* "[[Sleep No More (Doctor Who)|Sleep No More]]"
* "[[Face the Raven]]"
* "[[Heaven Sent (Doctor Who)|Heaven Sent]]"
* "[[Hell Bent (Doctor Who)|Hell Bent]]" &lt;!-- Do NOT add Prologue and Prequel as they lead to the same page as "The Magician's Apprentice".--&gt;
}}
}}

| group38 = [[Doctor Who (series 10)|Series 10]]
| list38 = {{#switch:{{{1|}}} || N10 =
{{Navbox|subgroup
 | groupwidth = 8%

 | group1 = Christmas
 | list1 = 
* "[[The Return of Doctor Mysterio]]"
* "[[Twice Upon a Time (Doctor Who)|Twice Upon a Time]]"

 | group2 = Series
 | list2 = 
* "[[The Pilot (Doctor Who)|The Pilot]]"
* "[[Smile (Doctor Who)|Smile]]"
* "[[Thin Ice (Doctor Who)|Thin Ice]]"
* "[[Knock Knock (Doctor Who)|Knock Knock]]"
* "[[Oxygen (Doctor Who)|Oxygen]]"
* "[[Extremis (Doctor Who)|Extremis]]"
* "[[The Pyramid at the End of the World]]"
* "[[The Lie of the Land]]"
* "[[Empress of Mars]]"
* "[[The Eaters of Light]]"
* "[[World Enough and Time (Doctor Who)|World Enough and Time]]" / "[[The Doctor Falls]]"
}}
}}
}}&lt;noinclude&gt;
{{Documentation |content=
=== Usage ===
{{tlx|Doctor Who episodes|Number}}
=== Number ===
* All episodes = none/blank
* Classic seasons (1963–1989) = C1, C2, etc.
* Revived series (2005–present) = N1, N2, etc.
* 2008–2010 specials = N4a
* 2013 specials = N7a
{{collapsible option|default=autocollapse}}
}}
[[Category:Doctor Who navigational boxes]]
&lt;/noinclude&gt;</text>
      <sha1>p9enadkd5mwk2ptqc55o6e0c4fdzi8y</sha1>
    </revision>
  </page>
  <page>
    <title>Template:EditAtWikidata</title>
    <ns>10</ns>
    <id>51464314</id>
    <revision>
      <id>744260983</id>
      <parentid>737086609</parentid>
      <timestamp>2016-10-14T04:03:10Z</timestamp>
      <contributor>
        <username>BU Rob13</username>
        <id>25420061</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:EditAtWikidata]]": [[WP:High-risk templates|Highly visible template]] ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="124">{{#invoke:EditAtWikidata |showMessage |qid={{{qid|}}} |pid={{{pid|}}} |{{{1|}}} }}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>5qyvsyqqnqcagtajved2k1qmwpy13b0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:End date</title>
    <ns>10</ns>
    <id>12550992</id>
    <revision>
      <id>750708930</id>
      <parentid>493887702</parentid>
      <timestamp>2016-11-21T11:10:04Z</timestamp>
      <contributor>
        <username>Materialscientist</username>
        <id>7852030</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:End date]]": [[WP:High-risk templates|Highly visible template]] ([Edit=Require template editor access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1035">&lt;includeonly&gt;{{#if: {{{4|}}}
  |{{#if: {{{5|}}}
     |{{padleft:{{{4}}}|2|0}}:{{padleft:{{{5}}}|2|0}}{{#if: {{{6|}}}
                                                   |&amp;#58;{{padleft:{{{6}}}|2|0}} }},&amp;#32;}} }}&lt;!--ABOVE FOR TIME; BELOW FOR DATE
--&gt;{{#if: {{{1|}}}
     |{{#if: {{{2|}}}
        |{{#if: {{{3|}}}
           |{{#if:{{{df|}}}|{{#expr:{{{3}}}}}&amp;nbsp;{{MONTHNAME|{{{2}}}}}|{{MONTHNAME|{{{2}}}}}&amp;nbsp;{{#expr:{{{3}}}}},}}&amp;nbsp;{{{1}}}|{{MONTHNAME|{{{2}}}}}&amp;nbsp;{{{1}}}}}|{{{1}}}}}}}{{#if: {{{7|}}}
              |&amp;#32;({{#ifeq: {{{7}}}|Z|UTC|{{{7}}}}})}}&lt;!-- BELOW FOR hCalendar
--&gt;&lt;span style="display:none"&gt;&amp;#160;(&lt;span class="dtend"&gt;{{#if: {{{1|}}}
  | {{{1}}}{{#if: {{{2|}}}
     | -{{padleft:{{{2}}}|2|0}}{{#if: {{{3|}}}
        | -{{padleft:{{{3}}}|2|0}} }} }}&lt;!--
--&gt;{{#if: {{{4|}}}
     | T{{padleft:{{{4}}}|2|0}}{{#if: {{{5|}}}
        | &amp;#58;{{padleft:{{{5}}}|2|0}}{{#if: {{{6|}}}
           | &amp;#58;{{padleft:{{{6}}}|2|0}} }} }} }} }}{{{7|}}}&lt;/span&gt;)&lt;/span&gt;&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>mchdg0qf9g1tdfvky4cmaj4r7e3ei1b</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Error-small</title>
    <ns>10</ns>
    <id>55072963</id>
    <revision>
      <id>799379119</id>
      <parentid>797851439</parentid>
      <timestamp>2017-09-07T10:40:18Z</timestamp>
      <contributor>
        <username>The Anome</username>
        <id>76</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Error-small]]": [[WP:High-risk templates|Highly visible template]] ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="94">{{#invoke:Error|error|{{{message|{{{1}}}}}}|tag=span}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>mmp4mio3xf3ajmqs6mv2pzi1u0i96x1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:External links</title>
    <ns>10</ns>
    <id>5490805</id>
    <revision>
      <id>827250701</id>
      <parentid>733182444</parentid>
      <timestamp>2018-02-23T17:02:14Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:External links]]": [[WP:HIGHRISK|high-risk]] template with 2000+ transclusions ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="939">{{ {{{|safesubst:}}}#invoke:Unsubst||date=__DATE__ |$B=
&lt;!--{{External links}} begin--&gt;{{Ambox
| name  = External links
| subst = &lt;includeonly&gt;{{subst:substcheck}}&lt;/includeonly&gt;
| type  = style
| class = ambox-external_links
| issue = This {{{1|article}}}'s '''use of [[Wikipedia:External links|external links]] may not follow Wikipedia's policies or guidelines'''.
| fix   = Please [{{fullurl:{{FULLPAGENAME}}|action=edit}} improve this article] by removing [[Wikipedia:What Wikipedia is not#Wikipedia is not a mirror or a repository of links, images, or media files|excessive]] or [[Wikipedia:External links|inappropriate]] external links, and converting useful links where appropriate into [[Wikipedia:Citing sources|footnote references]].
| removalnotice = yes
| date  = {{{date|}}}
| cat   = Wikipedia external links cleanup
| cat2  = Wikipedia spam cleanup
}}&lt;!--{{External links}} end--&gt;
}}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>oswxw585s6irmfqbnk1ad7r07yrmnr7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:FULLROOTPAGENAME</title>
    <ns>10</ns>
    <id>34701984</id>
    <revision>
      <id>774489771</id>
      <parentid>476439833</parentid>
      <timestamp>2017-04-08T20:24:42Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:FULLROOTPAGENAME]]": [[WP:High-risk templates|Highly visible template]]: Allowing template editors ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="420">{{ {{{|safesubst:}}}#if: {{ {{{|safesubst:}}}Ns has subpages | {{ {{{|safesubst:}}}#if:{{{1|}}}|{{ {{{|safesubst:}}}NAMESPACE:{{{1}}}}}|{{ {{{|safesubst:}}}NAMESPACE}}}} }} 
  | {{ {{{|safesubst:}}}#titleparts:{{ {{{|safesubst:}}}#if:{{{1|}}}|{{{1}}}|{{ {{{|safesubst:}}}FULLPAGENAME}}}}|1}}
  | {{ {{{|safesubst:}}}#if:{{{1|}}}|{{{1}}}|{{ {{{|safesubst:}}}FULLPAGENAME}}}}
}}&lt;noinclude&gt;

{{documentation}}

&lt;/noinclude&gt;</text>
      <sha1>t4jn967jlk6ph7qu71w2b8f5083yjrl</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Fix</title>
    <ns>10</ns>
    <id>5632010</id>
    <revision>
      <id>814292698</id>
      <parentid>713657347</parentid>
      <timestamp>2017-12-07T23:00:24Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>replaced self-closed &lt;nowiki/&gt; and space with numeric space entity;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1113">{{#switch:{{{subst|¬}}}
 |¬={{category handler
  |template=[[Category:Templates needing substitution checking]]
  |nocat={{{nocat|&lt;noinclude&gt;true&lt;/noinclude&gt;}}}
 }}
 |SUBST=[[Category:Pages with incorrectly substituted templates]]
}}{{Category handler
 |main={{Fix/category
  |cat-date={{{cat-date|}}} 
  |cat={{{cat|}}} 
  |cat-date2={{{cat-date2|}}} 
  |cat2={{{cat2|}}} 
  |cat-date3={{{cat-date3|}}} 
  |cat3={{{cat3|}}} 
  |date={{{date|}}}
 }}
 |template={{#if:{{{name|}}}|{{#ifeq:{{{name}}}|{{ROOTPAGENAME}}||{{#if:{{{date|}}}||[[Category:Templates including undated clean-up tags]]}}}}}} 
 |subpage=no
}}{{#if:{{{text|}}}
 |&lt;sup class="noprint Inline-Template {{{class|}}}" style="white-space:nowrap;"&gt;&amp;#91;&lt;i&gt;{{#if:{{{pre-text|}}}
  |{{{pre-text}}}&amp;#32;
 }}[[{{{link|Wikipedia:Cleanup}}}|&lt;span title="{{delink|1={{{title|{{{link|Wikipedia:Cleanup}}}}}}{{#if:{{{date|}}}|&amp;#32;({{{date}}})}}}}"&gt;{{{text|}}}&lt;/span&gt;]]{{#if:{{{post-text|}}}
  |&amp;#32;{{{post-text}}}
 }}&lt;/i&gt;&amp;#93;&lt;/sup&gt;|{{{special|}}}
}}&lt;noinclude&gt;
{{Documentation}}
&lt;!-- Add cats and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>owg7pdp6e9nqycfh3g7fuee1rm3t159</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Fix/category</title>
    <ns>10</ns>
    <id>34017846</id>
    <revision>
      <id>774489703</id>
      <parentid>471928517</parentid>
      <timestamp>2017-04-08T20:24:09Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Fix/category]]": [[WP:High-risk templates|Highly visible template]]: Allowing template editors ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="858">&lt;noinclude&gt;{{pp-template|small=yes}}&lt;/noinclude&gt;{{{cat|[[Category:All pages needing cleanup]]}}}{{#if:{{{cat-date|}}}
  |[[{{{cat-date}}} {{#if:{{{date|}}}
   |from {{{date}}}
  }}]]{{#if:{{{date|}}}
   |{{#ifexist:{{{cat-date}}} from {{{date}}}|
    |[[Category:Articles with invalid date parameter in template]]
   }}
  }}
 }}{{#if:{{{cat2|}}}|{{{cat2}}}}}{{#if:{{{cat-date2|}}}
  |[[{{{cat-date2}}} {{#if:{{{date|}}}
   |from {{{date}}}
  }}]]{{#if:{{{date|}}}
   |{{#ifexist:{{{cat-date2}}} from {{{date}}}|
    |[[Category:Articles with invalid date parameter in template]]
   }}
  }}
 }}{{#if:{{{cat3|}}}|{{{cat3}}}}}{{#if:{{{cat-date3|}}}
  |[[{{{cat-date3}}} {{#if:{{{date|}}}
   |from {{{date}}}
  }}]]{{#if:{{{date|}}}
   |{{#ifexist:{{{cat-date3}}} from {{{date}}}|
    |[[Category:Articles with invalid date parameter in template]]
   }}
  }}
 }}</text>
      <sha1>gpikm5p2yggfosi6w5maxtx5my3u9im</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Further</title>
    <ns>10</ns>
    <id>1721317</id>
    <revision>
      <id>852258832</id>
      <parentid>827708293</parentid>
      <timestamp>2018-07-27T17:29:22Z</timestamp>
      <contributor>
        <username>Galobtter</username>
        <id>19502780</id>
      </contributor>
      <comment>fix so that don't need [[Module:Further]] anymore</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="251">&lt;includeonly&gt;{{#invoke:labelled list hatnote|labelledList|Further information{{#if:{{{topic|}}}|&amp;#32;on {{{topic|}}}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>pu1ae8is2dmdurv2yovsfwxjajnhn2s</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Hugo Award for Best Dramatic Presentation, Short Form</title>
    <ns>10</ns>
    <id>20827920</id>
    <revision>
      <id>798310864</id>
      <parentid>747670757</parentid>
      <timestamp>2017-09-01T04:53:26Z</timestamp>
      <contributor>
        <username>IJVin</username>
        <id>13511889</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1602">{{navbox
| name   = Hugo Award for Best Dramatic Presentation, Short Form
| title  = [[Hugo Award for Best Dramatic Presentation#Short Form|Hugo Award for Best Dramatic Presentation, Short Form]]
| state = {{{state|autocollapse}}}
|listclass = hlist
| titlestyle = background: #DBD7D2
| belowstyle = background: #DBD7D2

| list1  =
* "[[Conversations with Dead People]]" (''[[Buffy the Vampire Slayer]]'') (2003)
* [[Gollum]]'s Acceptance Speech at the [[2003 MTV Movie Awards]] (2004)
* "[[33 (Battlestar Galactica)|33]]" (''[[Battlestar Galactica (2004 TV series)|Battlestar Galactica]]'') (2005)
* "[[The Empty Child]]" / "[[The Doctor Dances]]" (''[[Doctor Who]]'') (2006)
* "[[The Girl in the Fireplace]]" (''[[Doctor Who]]'') (2007)
* "[[Blink (Doctor Who)|Blink]]" (''[[Doctor Who]]'') (2008)
* ''[[Dr. Horrible's Sing-Along Blog]]'' (2009)
* "[[The Waters of Mars]]" (''[[Doctor Who]]'') (2010)
* "[[The Pandorica Opens]]" / "[[The Big Bang (Doctor Who)|The Big Bang]]" (''[[Doctor Who]]'') (2011)
* "[[The Doctor's Wife (Doctor Who)|The Doctor's Wife]]" (''[[Doctor Who]]'') (2012)
* "[[Blackwater (Game of Thrones)|Blackwater]]" (''[[Game of Thrones]]'') (2013)
* "[[The Rains of Castamere]]" (''[[Game of Thrones]]'') (2014)
* "By Means Which Have Never Yet Been Tried" (''[[Orphan Black]]'') (2015)
* "AKA Smile" (''[[Jessica Jones (TV series)|Jessica Jones]]'') (2016)
* "Leviathan Wakes" (''[[The Expanse (TV series)|The Expanse]]'') (2017)

| belowclass = hlist

}}&lt;noinclude&gt;
{{collapsible option}}
[[Category:Hugo Award navigational boxes|Dramatic Presentation Short Form]]&lt;/noinclude&gt;</text>
      <sha1>ds42ufne83eo3a1r05rjwq6ew8p8yt0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:IMDb title</title>
    <ns>10</ns>
    <id>942373</id>
    <revision>
      <id>854585198</id>
      <parentid>854580378</parentid>
      <timestamp>2018-08-12T11:36:43Z</timestamp>
      <contributor>
        <username>Zyxw</username>
        <id>473593</id>
      </contributor>
      <comment>fix for #if removing leading space output by EditAtWikidata</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1049">[https://www.imdb.com/{{#if: {{{1|{{{id|}}}}}}
  | title/{{#ifeq: {{Str left|{{{1|{{{id}}}}}}|2}} | tt
    | {{{1|{{{id}}}}}}
    | tt{{#if: {{Str len|{{{1|{{{id}}}}}}}} &lt; 7
      | {{Str rightmost|000000{{Trim|{{{1|{{{id}}}}}}}}|7}}
      }}
    }}
  | {{#if: {{#property:P345}}
    | title/{{First word|1={{#property:P345}}|sep=,}}
    | Title?{{urlencode:{{PAGENAME}}}}
    }}
  }}/{{#switch: {{lc:{{{section|}}}}}
  | award | awards = awards Awards for
  }} {{Trim|{{#if:{{{quotes|}}}|"|''}}{{#if: {{{2|{{{title|}}}}}}
  | {{{2|{{{title}}}}}}
  | {{PAGENAMEBASE}}
  }}{{#if:{{{quotes|}}}|"|''}} {{{3|{{{description|}}}}}}}}] on [[IMDb]]&lt;includeonly&gt;{{#if: {{{1|{{{id|}}}}}}{{#property:P345}}
  | &amp;#32;{{EditAtWikidata|pid=P345|{{{1|{{{id|}}}}}}}}
  | {{Main other|[[Category:IMDb template with no id set]]}}
  }}{{#ifeq: {{Str left|{{{1|{{{id}}}}}}|2}} | tt
  | {{#ifeq: {{Str len|{{{1|{{{id}}}}}}}} | 9
    |
    | {{Main other|[[Category:IMDb template with invalid id set]]}}
    }}
  }}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>abvphtk451glfxii6l795v33xp9pegy</sha1>
    </revision>
  </page>
  <page>
    <title>Template:ISBN</title>
    <ns>10</ns>
    <id>51604275</id>
    <revision>
      <id>817040127</id>
      <parentid>816696697</parentid>
      <timestamp>2017-12-25T17:39:41Z</timestamp>
      <contributor>
        <username>Headbomb</username>
        <id>1461430</id>
      </contributor>
      <comment>don't like to redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3397">{{#if:{{{1|&lt;noinclude&gt;$&lt;/noinclude&gt;}}}|{{Catalog lookup link|{{{1|}}}|{{{2|}}}|{{{3|}}}|{{{4|}}}|{{{5|}}}|{{{6|}}}|{{{7|}}}|{{{8|}}}|{{{9|}}}|article-link={{#ifeq:{{yesno-no|{{{plainlink|}}}}}|yes||International Standard Book Number}}|article-name={{#ifeq:{{yesno-no|{{{plainlink|}}}}}|yes||ISBN}}|link-prefix=[Special:BookSources/|item-prefix={{!}}|item-postfix=]|list-leadout={{{leadout|}}}}}{{#if:{{trim|{{{1|}}}}}|{{#ifeq:{{yesno-no|{{{invalid1|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{1|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|isbn&lt;!-- ISBN --&gt;}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{2|}}}}}|{{#ifeq:{{yesno-no|{{{invalid2|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{2|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|isbn&lt;!-- ISBN --&gt;}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{3|}}}}}|{{#ifeq:{{yesno-no|{{{invalid3|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{3|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|isbn&lt;!-- ISBN --&gt;}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{4|}}}}}|{{#ifeq:{{yesno-no|{{{invalid4|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{4|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|isbn&lt;!-- ISBN --&gt;}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{5|}}}}}|{{#ifeq:{{yesno-no|{{{invalid5|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{5|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|isbn&lt;!-- ISBN --&gt;}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{6|}}}}}|{{#ifeq:{{yesno-no|{{{invalid6|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{6|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|isbn&lt;!-- ISBN --&gt;}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{7|}}}}}|{{#ifeq:{{yesno-no|{{{invalid7|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{7|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|isbn&lt;!-- ISBN --&gt;}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{8|}}}}}|{{#ifeq:{{yesno-no|{{{invalid8|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{8|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|isbn&lt;!-- ISBN --&gt;}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{9|}}}}}|{{#ifeq:{{yesno-no|{{{invalid9|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{9|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|isbn&lt;!-- ISBN --&gt;}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}}}}}}}}}}}}}}}}}}}|{{error-small|Parameter error in {{tl|isbn&lt;!-- ISBN --&gt;}}: Missing [[ISBN]].}}}}&lt;noinclude&gt;{{documentation}}&lt;!-- Add categories and interwiki lines to the /doc subpage, not here! --&gt;&lt;/noinclude&gt;</text>
      <sha1>5bzfl5yo5chykn0se0i9zyszdx18fvs</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Icon</title>
    <ns>10</ns>
    <id>10964158</id>
    <revision>
      <id>643803499</id>
      <parentid>623318300</parentid>
      <timestamp>2015-01-23T10:29:55Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>switch this to use [[Module:Icon]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="138">{{#invoke:Icon|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>m4ab9noabl8v4ki5cx6t5ksjcjh5u8o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Infobox</title>
    <ns>10</ns>
    <id>891845</id>
    <revision>
      <id>844984935</id>
      <parentid>844983838</parentid>
      <timestamp>2018-06-08T14:52:46Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <comment>don't know how I messed that one up...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="340">{{#invoke:Infobox|infobox}}&lt;includeonly&gt;{{template other|{{#ifeq:{{PAGENAME}}|Infobox||{{#ifeq:{{str left|{{SUBPAGENAME}}|7}}|Infobox|[[Category:Infobox templates|{{remove first word|{{SUBPAGENAME}}}}]]}}}}|}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go in the /doc subpage, and interwikis go in Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>f4hgwrnr11ahhwyo266vcd10dpi92pe</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Infobox television</title>
    <ns>10</ns>
    <id>21000399</id>
    <revision>
      <id>851516388</id>
      <parentid>851515945</parentid>
      <timestamp>2018-07-22T21:04:14Z</timestamp>
      <contributor>
        <username>TrueCRaysball</username>
        <id>2469229</id>
      </contributor>
      <comment>change terminology to match description in template documentation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6830">{{Infobox
| italic title= {{{italic_title|&lt;noinclude&gt;no&lt;/noinclude&gt;}}}
| bodyclass   = vevent
| abovestyle  = font-style: italic; background: #CCCCFF; padding: 0.25em 1em; line-height: 1.5em;
| aboveclass  = summary
| headerclass  = summary
| headerstyle = background: #CCCCFF; padding: 0.25em 1em; line-height: 1.5em;

| above       = {{{show_name|{{{name|&lt;includeonly&gt;{{PAGENAMEBASE}}&lt;/includeonly&gt;}}}}}}
| image       = {{#invoke:InfoboxImage|InfoboxImage|image={{{image|}}}|size={{{image_size|}}}|sizedefault=frameless|upright={{{image_upright|1.13}}}&lt;!-- 1.13 is the most common size used in TV articles. --&gt;|alt={{{image_alt|{{{alt|}}}}}}}}
| caption     = {{{caption|}}}

| label1      = Also known as
| data1       = {{#if:{{{show_name_2|}}}|''{{{show_name_2}}}''}}
| class2      = description
| data2       = {{{native_name|}}}

| label3      = Genre
| class3      = category
| data3       = {{{genre|}}}
| label4      = Created by
| data4       = {{{creator|}}}
| label5      = Based on
| data5       = {{{based_on|}}}
| label6      = Developed by
| data6       = {{{developer|}}}
| label7      = Written by
| data7       = {{{writer|}}}
| label8      = Screenplay by
| data8       = {{{screenplay|}}}
| label9      = Story by
| data9       = {{{story|}}}
| label10     = Directed by
| class10     = attendee
| data10      = {{{director|}}}
| label11     = Creative &lt;span class="nowrap"&gt;director(s)&lt;/span&gt;
| class11     = attendee
| data11      = {{{creative_director|}}}
| label12     = Presented by
| class12     = attendee
| data12      = {{{presenter|{{{host|}}}}}}
| label13     = Starring
| class13     = attendee
| data13      = {{{starring|}}}
| label14     = Judges
| class14     = attendee
| data14      = {{{judges|}}}
| label15     = Voices of
| class15     = attendee
| data15      = {{{voices|}}}
| label16     = Narrated by
| class16     = attendee
| data16      = {{{narrated|}}}
| label17     = {{#if:{{{music|}}}|Music by|Theme music composer}}
| data17      = {{{theme_music_composer|{{{music|}}}}}}
| label18     = Opening theme
| data18      = {{{opentheme|}}}
| label19     = Ending theme
| data19      = {{{endtheme|}}}
| label20     = Composer(s)
| data20      = {{{composer|}}}
| label21     = Country of origin
| data21      = {{{country|}}}
| label22     = Original &lt;span class="nowrap"&gt;language(s)&lt;/span&gt;
| data22      = {{{language|}}}
| label23     = &lt;abbr title="Number"&gt;No.&lt;/abbr&gt; of {{#if:{{{num_seasons|}}}|seasons|series}}
| data23      = {{{num_seasons|{{{num_series|}}}}}}
| label24     = {{#ifeq:{{{show_name|}}}|Doctor Who|&lt;abbr title="Number"&gt;No.&lt;/abbr&gt; of series }}
| data24      = {{#ifeq:{{{show_name|}}}|Doctor Who|{{{num_series|}}} }}
| label25     = &lt;abbr title="Number"&gt;No.&lt;/abbr&gt; of episodes
| data25      = {{{num_episodes|}}} {{#if:{{{list_episodes|}}}| &lt;span class="nowrap"&gt;([[{{{list_episodes}}}|list of episodes]])&lt;/span&gt;}}

| header26    = {{#if:{{{producer|}}}{{{executive_producer|}}}{{{location|}}}{{{camera|}}}{{{runtime|}}}|Production }}

| label27     = Executive &lt;span class="nowrap"&gt;producer(s)&lt;/span&gt;
| data27      = {{{executive_producer|}}}
| label28     = &lt;span class="nowrap"&gt;Producer(s)&lt;/span&gt;
| data28      = {{{producer|}}}
| label29     = News editor(s)
| data29      = {{{news_editor|}}}
| label30     = Production location(s)
| data30      = {{{location|}}}
| label31     = Cinematography
| data31      = {{{cinematography|}}}
| label32     = Editor(s)
| data32      = {{{editor|}}}

| label33     = Camera setup
| data33      = {{{camera|}}}
| label34     = Running time
| data34      = {{{runtime|}}}
| label35     = Production &lt;span class="nowrap"&gt;company(s)&lt;/span&gt;
| data35      = {{{company|{{{studio|}}}}}}
| label36     = Distributor
| data36      = {{{distributor|}}}
| label37     = Budget
| data37      = {{{budget|}}}

| header38    = {{#if:{{{network|}}}{{{channel|}}}{{{picture_format|}}}{{{audio_format|}}}{{{first_run|}}}{{{first_aired|}}}{{{last_aired|}}}{{{released|}}}|Release}}

| label39     = Original network
| data39      = {{{network|{{{channel|}}}}}}
| label40     = Picture format
| data40      = {{{picture_format|}}}
| label41     = Audio format
| data41      = {{{audio_format|}}}
| label42     = First shown in
| data42      = {{{first_run|}}}
| label43     = Original release
| data43      = {{#invoke:Infobox/dates|dates|{{{first_aired|{{{released|}}}}}}|{{{last_aired|}}}}}

| header44    = {{#if:{{{preceded_by|}}}{{{followed_by|}}}{{{related|}}}|Chronology}}

| label45     = Preceded by
| data45      = {{{preceded_by|}}}
| label46     = Followed by
| data46      = {{{followed_by|}}}
| label47     = Related shows
| data47      = {{{related|}}}

| header48    = {{#if:{{{website|{{#property:P856}}}}}{{{production_website|}}}|{{#ifeq:{{{website|}}}|hide|{{#if:{{{production_website|}}}|External links}}|External links}}}}
| data49      = {{#if:{{{website|{{#property:P856}}}}}|[{{{website|{{#property:P856}}}}} {{#if:{{{website_title|}}}|{{{website_title}}}|Website}}]}}
| class49     = url
| data50      = {{#if:{{{production_website|}}}|[{{{production_website}}} {{#if:{{{production_website_title|}}}|{{{production_website_title}}}|Production website}}]}}
| class50     = url

}}{{main other|{{#ifeq:{{{host|♠}}}{{{name|♠}}}{{{studio|♠}}}|♠♠♠||[[Category:Pages using infobox television with alias parameters|{{#ifeq:{{{host|♠}}}|♠||H}}{{#ifeq:{{{name|♠}}}|♠||N}}{{#ifeq:{{{studio|♠}}}|♠||S}}]]}}}}&lt;!-- 
--&gt;&lt;!-- {{#if:{{{location|}}}|{{main other|[[Category:Pages using infobox television with potentially unnecessary parameters]]}}}} --&gt;{{#if:{{{editor|}}}|{{main other|[[Category:Pages using infobox television with editor parameter]]}}}}{{#invoke:Check for unknown parameters|check|unknown={{main other|[[Category:Pages using infobox television with unknown parameters|_VALUE_{{PAGENAME}}]]}}|preview=Page using [[Template:Infobox television]] with unknown parameter "_VALUE_"|ignoreblank=y| alt | audio_format | based_on | budget | camera | caption | channel | cinematography | company | composer | country | creative_director | creator | developer | director | distributor | editor | endtheme | executive_producer | first_aired | first_run | followed_by | genre | host | image | image_alt | image_size | image_upright | italic_title | judges | language | last_aired | list_episodes | location | music | name | narrated | native_name | network | news_editor | num_episodes | num_seasons | num_series | opentheme | picture_format | preceded_by | presenter | producer | production_website | production_website_title | related | released | runtime | screenplay | show_name | show_name_2 | starring | story | studio | theme_music_composer | voices | website | website_title | writer }}&lt;noinclude&gt;
{{documentation}}
&lt;!-- category and language links go on /doc, not here --&gt;
&lt;/noinclude&gt;</text>
      <sha1>bg2civwotl79amisyq59xnu9wumxvfq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Italic title</title>
    <ns>10</ns>
    <id>21067859</id>
    <revision>
      <id>622162216</id>
      <parentid>602792355</parentid>
      <timestamp>2014-08-21T07:06:15Z</timestamp>
      <contributor>
        <username>Paine Ellsworth</username>
        <id>9092818</id>
      </contributor>
      <minor/>
      <comment>punct. - comma used only with 2 independent clauses</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="143">{{#invoke:Italic title|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories to the /doc subpage and interwikis to Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>gq73v288e92yfb6g7cxbhpw5m6qnqpa</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Listen</title>
    <ns>10</ns>
    <id>1489759</id>
    <revision>
      <id>846120847</id>
      <parentid>611334265</parentid>
      <timestamp>2018-06-16T13:14:35Z</timestamp>
      <contributor>
        <username>Nardog</username>
        <id>5908908</id>
      </contributor>
      <comment>includeonly</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="167">&lt;includeonly&gt;{{#invoke:Listen|main}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>hrgupcux3r81j1cr9hj6di8wz9bpl12</sha1>
    </revision>
  </page>
  <page>
    <title>Template:MONTHNAME</title>
    <ns>10</ns>
    <id>4858813</id>
    <revision>
      <id>772147331</id>
      <parentid>388698949</parentid>
      <timestamp>2017-03-25T16:04:13Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:MONTHNAME]]": Allowing template editors on some templates with full protection dating back to pre-[[WP:TPROT]] times which aren't too often or too sensitively used. ([Edit=Require template editor access] (indefi...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="387">&lt;includeonly&gt;{{#if:{{{1|}}}|{{#switch:{{MONTHNUMBER|{{{1}}}}}|1=January|2=February|3=March|4=April|5=May|6=June|7=July|8=August|9=September|10=October|11=November|12=December|Incorrect required parameter 1=''month''!}}|Missing required parameter 1=''month''!}}&lt;/includeonly&gt;&lt;noinclude&gt;

{{Documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>4cf5sge5nt8b4gwjre9u8yifa3kstt2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:MONTHNUMBER</title>
    <ns>10</ns>
    <id>4859929</id>
    <restrictions>edit=sysop:move=sysop</restrictions>
    <revision>
      <id>388698933</id>
      <parentid>383624540</parentid>
      <timestamp>2010-10-04T15:40:33Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <comment>remove {{pp-template}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="655">&lt;includeonly&gt;{{#if:{{{1|}}}
 |{{#switch:{{lc:{{{1}}}}}
  |january|jan=1
  |february|feb=2
  |march|mar=3
  |apr|april=4
  |may=5
  |june|jun=6
  |july|jul=7
  |august|aug=8
  |september|sep|sept=9
  |october|oct=10
  |november|nov=11
  |december|dec=12
  |{{#ifexpr:{{{1}}}&lt;0
   |{{#ifexpr:(({{{1}}})round 0)!=({{{1}}})
    |{{#expr:12-(((0.5-({{{1}}}))round 0)mod 12)}}
    |{{#expr:12-(((11.5-({{{1}}}))round 0)mod 12)}}
   }}
  |{{#expr:(((10.5+{{{1}}})round 0)mod 12)+1}}
  }}
 }}
 |Missing required parameter 1=''month''!
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>mqnyq8bnd6mmrrl70a3uwqgeo8aevfc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Main</title>
    <ns>10</ns>
    <id>1208356</id>
    <revision>
      <id>849583277</id>
      <parentid>847627972</parentid>
      <timestamp>2018-07-10T00:29:46Z</timestamp>
      <contributor>
        <username>Pppery</username>
        <id>28032115</id>
      </contributor>
      <comment>Clarify</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="366">{{#ifeq:{{NAMESPACE}}|Category|{{Template for discussion/dated|action=removal from category pages|page=Main|link=Wikipedia:Templates for discussion/Log/2018 June 26#Module:Main|bigbox={{#invoke:Noinclude|noinclude|text=yes}}}}}}{{#invoke:main|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>0yt2exowxytm30d7hv49pteienyrp5r</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Main other</title>
    <ns>10</ns>
    <id>17220251</id>
    <revision>
      <id>388689011</id>
      <parentid>334818505</parentid>
      <timestamp>2010-10-04T14:46:48Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <comment>remove {{pp-template}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="409">{{#switch:
  &lt;!--If no or empty "demospace" parameter then detect namespace--&gt;
  {{#if:{{{demospace|}}} 
  | {{lc: {{{demospace}}} }}    &lt;!--Use lower case "demospace"--&gt;
  | {{#ifeq:{{NAMESPACE}}|{{ns:0}}
    | main
    | other
    }} 
  }}
| main     = {{{1|}}}
| other
| #default = {{{2|}}}
}}&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>ngt28vb1n5t4bh1su57btnqyofkd1d5</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Media in Cardiff</title>
    <ns>10</ns>
    <id>22878485</id>
    <revision>
      <id>818830247</id>
      <parentid>815853315</parentid>
      <timestamp>2018-01-05T21:09:01Z</timestamp>
      <contributor>
        <username>Cpqueeley89</username>
        <id>28218534</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2935">{{navbox
|name=Media in Cardiff
|title=[[Media in Cardiff]]
|state={{{state|autocollapse}}}
|listclass=hlist
|image=[[File:Media Wales, Six Park Street, Cardiff 001.jpg|85px]]
|group1=Television and&lt;br&gt;film production
|list1=
*[[Aspect Television]]
*[[Bay TV Swansea]]
*[[BBC Cymru Wales|BBC Wales]]
*[[ITV Wales &amp; West|ITV Wales]]
*[[S4C]]
*[[Made in Cardiff]]
*[[Broadcasting House, Cardiff]]
*[[Roath Lock|BBC Roath Lock]]
*[[BAFTA Cymru]]
*[[Hartswood Films]]
*[[Calon (TV production company)|Calon]]
*[[Cardiff Film Festival]]
|group2=Television&lt;br&gt;series
|list2={{Navbox|subgroup
 |evenodd=swap
 |group1=Drama
 |list1=
*''[[Doctor Who]]''
*''[[Torchwood]]''
*''[[The Sarah Jane Adventures]]''
*''[[Class (2016 TV series)|Class]]''
*''[[Caerdydd (TV series)|Caerdydd]]''
*''[[Being Human (UK TV series)|Being Human]]''
*''[[Crash (2009 TV series)|Crash]]''
*''[[Merlin (2008 TV series)|Merlin]]''
*''[[Sherlock (TV series)|Sherlock]]''
*''[[Upstairs Downstairs (2010 TV series)|Upstairs Downstairs]]''
*''[[Casualty (TV series)|Casualty]]''
*''[[Pobol y Cwm]]''
*''[[Atlantis (TV series)|Atlantis]]''
*''[[Wizards vs Aliens]]''
*''[[Alys (TV series)|Alys]]''
 |group2=Comedy
 |list2=
*''[[Gavin &amp; Stacey]]''
*''[[Satellite City]]''
*''[[High Hopes (Welsh TV series)|High Hopes]]''
 |group3=Factual
 |list3=
*''[[BBC Wales Today]]''
*''[[Hospital 24/7]]''
*''[[Newyddion]]''
*''[[Wales at Six|ITV News: Wales at Six]]''
*''[[Cardiff News|#CardiffNews]]''
*''[[CF99]]''
 |group4=Reality
 |list4=
*''[[The Valleys (TV series)|The Valleys]]''
 |group5=Quiz shows
 |list5=
*''[[Only Connect]]''
 |group6=Children's
 |list6=
*''[[SuperTed]]''
*''[[Fireman Sam]]''
*''[[The Story of Tracy Beaker (TV series)|The Story of Tracy Beaker]]''
*''[[Wil Cwac Cwac]]''
}}
|group3=Film
|list3=
*''[[Tiger Bay (1959 film)|Tiger Bay]]''
*''[[Human Traffic]]''
*''[[The Contractor (2007 film)|The Contractor]]''
*''[[Flick (2008 film)|Flick]]''
*''[[Skellig (film)|Skellig]]''
*''[[Patagonia (film)|Patagonia]]''
*''[[The Big I Am]]''
*''[[Panic Button (2011 film)|Panic Button]]''
*''[[Killer Elite (film)|Killer Elite]]''

|group4=Press
|list4=
*''[[Western Mail (Wales)|Western Mail]]''
*''[[South Wales Echo]]''
*[[South Wales Echo#Echo Extra|Echo Extra]]
*''[[Y Dinesydd]]''
*''[[gair rhydd]]''
*''[[Buzz (magazine)|Buzz]]''
*''[[Metro (British newspaper)|Metro]]''
|group5=Radio
|list5=
*[[BBC Radio Wales]]
*[[BBC Radio Cymru]]
*[[Capital South Wales|Capital FM South Wales]]
*[[Nation Radio]]
*[[Gold (radio)|Gold]]
*[[Heart Wales|Heart South Wales]]
*[[Xpress Radio]]
*[[Radio Cardiff]]
|group6=Online
|list6=
*[[Media Wales#WalesOnline|WalesOnline]]
*[[Media Wales#CardiffOnline|CardiffOnline]]
*''[[Media Wales#Pizzaman|Pizzaman]]''
|below={{icon|category}}  [[:Category:Media in Cardiff|category]]
}}&lt;noinclude&gt;
{{collapsible option}}
[[Category:Cardiff templates]]
[[Category:United Kingdom media company templates|Cardiff]]&lt;/noinclude&gt;</text>
      <sha1>alvtspbmtoeiwe3dinn7bsgjkr61isj</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Navbox</title>
    <ns>10</ns>
    <id>995954</id>
    <revision>
      <id>630098073</id>
      <parentid>622579838</parentid>
      <timestamp>2014-10-18T12:29:00Z</timestamp>
      <contributor>
        <username>Edokter</username>
        <id>1624037</id>
      </contributor>
      <minor/>
      <comment>linebreaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="94">&lt;includeonly&gt;{{#invoke:Navbox|navbox}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>tqodcaa2vvhehqaod229udlla0wimek</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Navboxes</title>
    <ns>10</ns>
    <id>17110335</id>
    <revision>
      <id>816419878</id>
      <parentid>816100179</parentid>
      <timestamp>2017-12-21T06:12:43Z</timestamp>
      <contributor>
        <username>Corkythehornetfan</username>
        <id>16927144</id>
      </contributor>
      <comment>Undid revision 816100179 by [[Special:Contributions/Paine Ellsworth|Paine Ellsworth]] ([[User talk:Paine Ellsworth|talk]]) color is too purple-ly. Waiting until we can get a consensus</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="872">{{#invoke:navbox|navbox
|navbar = {{#ifeq:{{{state|}}}|off |off |plain}}
|title = {{{title|Links to related articles}}}
|list1 = {{{list1|{{{list|}}}}}}
|state = {{{state|&lt;includeonly&gt;collapsed&lt;/includeonly&gt;}}}
|titlestyle = background:{{{bg|#e8e8ff}}};{{#if:{{{fg|}}}|color:{{{fg}}};}}{{#if:{{{bordercolor|}}}|border: 1px solid {{{bordercolor}}};}}{{{titlestyle|}}}
|liststyle = font-size:114%;
|listpadding = 0px;
|tracking = no
}}{{#if:{{{list1|{{{list|}}}}}}||{{main other|[[Category:Navboxes template with no content]]}}}}{{#invoke:Check for unknown parameters|check|unknown={{main other|[[Category:Pages using navboxes with unknown parameters|_VALUE_{{PAGENAME}}]]}}|preview=Page using [[Template:Navboxes]] with unknown parameter "_VALUE_"|ignoreblank=y| bg | bordercolor | fg | list | list1 | state | title | titlestyle }}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>ripoyqkx6v32bwgv7p2zuzla7y4u6qk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Nebula Award for Best Script/Bradbury Award</title>
    <ns>10</ns>
    <id>34710682</id>
    <revision>
      <id>847518325</id>
      <parentid>811253986</parentid>
      <timestamp>2018-06-25T22:55:44Z</timestamp>
      <contributor>
        <username>Coder Dan</username>
        <id>3187090</id>
      </contributor>
      <comment>added line breaks to reduce wasted space</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2798">{{Navbox
| titlestyle = 
| groupstyle = 
| belowstyle = 
| name       = Nebula Award for Best Script/Bradbury Award
| title      = [[Nebula Award for Best Script]]/[[Ray Bradbury Award]]
| state      = {{{state|autocollapse}}}
|listclass   = hlist
|group1      = Nebula Award&lt;br /&gt;for Best Script
|list1       = 
* ''[[Soylent Green]]'' – Stanley R. Greenberg (1973)
* ''[[Sleeper (1973 film)|Sleeper]]'' – [[Woody Allen]] (1974)
* ''[[Young Frankenstein]]'' – [[Mel Brooks]] and [[Gene Wilder]] (1975)
* ''[[Star Wars (film)|Star Wars]]'' – [[George Lucas]] (1977)
* ''[[The Sixth Sense]]'' – [[M. Night Shyamalan]] (1999)
* ''[[Galaxy Quest]]'' – David Howard and [[Robert Gordon (screenwriter)|Robert Gordon]] (2000)
* ''[[Crouching Tiger, Hidden Dragon]]'' [[James Schamus]], Kuo Jung Tsai, and Hui-Ling Wang (2001)
* ''[[The Lord of the Rings: The Fellowship of the Ring]]'' – [[Fran Walsh]], [[Philippa Boyens]], and [[Peter Jackson]] (2002)
* ''[[The Lord of the Rings: The Two Towers]]'' – [[Fran Walsh]], [[Philippa Boyens]], [[Stephen Sinclair]], and [[Peter Jackson]] (2003)
* ''[[The Lord of the Rings: The Return of the King]]'' – [[Fran Walsh]], [[Philippa Boyens]], and [[Peter Jackson]] (2004)
* ''[[Serenity (2005 film)|Serenity]]'' – [[Joss Whedon]] (2005)
* ''[[Howl's Moving Castle (film)|Howl's Moving Castle]]'' – [[Hayao Miyazaki]], Cindy Davis Hewitt, and Donald H. Hewitt (2006)
* ''[[Pan's Labyrinth]]'' – [[Guillermo del Toro]] (2007)
* ''[[WALL-E]]'' – [[Andrew Stanton]], [[Jim Reardon]], and [[Pete Docter]] (2008)

|group2 = Ray Bradbury Award&lt;br /&gt;for Outstanding&lt;br /&gt;Dramatic Presentation
|list2  = 
* ''[[Terminator 2: Judgment Day]]'' – [[James Cameron]] (1992)
* ''[[Babylon 5]]'' – [[J. Michael Straczynski]] (1999)
* ''[[2000X|2000X – Tales of the Next Millennia]]'' – [[Yuri Rasovsky]] and [[Harlan Ellison]] (2001)
* [[Joss Whedon]] (2008)
* ''[[District 9]]'' – [[Neill Blomkamp]] and [[Terri Tatchell]] (2009)
* ''[[Inception]]'' – [[Christopher Nolan]] (2010)
* ''[[Doctor Who]]'': "[[The Doctor's Wife (Doctor Who)|The Doctor's Wife]]" – [[Richard Clark (director)|Richard Clark]] and [[Neil Gaiman]] (2011)
* ''[[Beasts of the Southern Wild]]'' – [[Benh Zeitlin]], [[Lucy Alibar]] (2012)
* ''[[Gravity (2013 film)|Gravity]]'' – [[Alfonso Cuarón]] and [[Jonás Cuarón]] (2013)
* ''[[Guardians of the Galaxy (film)|Guardians of the Galaxy]]'' – [[James Gunn]] and [[Nicole Perlman]] (2014)
* ''[[Mad Max: Fury Road]]'' – [[George Miller (director)|George Miller]], [[Brendan McCarthy]], and [[Nico Lathouris]] (2015)
* ''[[Arrival (film)|Arrival]]'' – [[Eric Heisserer]] (2016)
}}&lt;noinclude&gt;
{{collapsible option}}

[[Category:Nebula Award navigational boxes|Nebula Award for Best Script]]
&lt;/noinclude&gt;</text>
      <sha1>j1hyljpfdimg95vk62js957pswqtwzl</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Nebula Award for Best Script/Bradbury Award 2001–2020</title>
    <ns>10</ns>
    <id>34710860</id>
    <redirect title="Template:Nebula Award for Best Script/Bradbury Award" />
    <revision>
      <id>584532318</id>
      <parentid>580383746</parentid>
      <timestamp>2013-12-04T15:26:19Z</timestamp>
      <contributor>
        <username>Woodensuperman</username>
        <id>1412854</id>
      </contributor>
      <comment>duplicate info</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="66">#REDIRECT [[Template:Nebula Award for Best Script/Bradbury Award]]</text>
      <sha1>hdixfwlpt17wr1vxx2nmji36br6q8b0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Noitalic</title>
    <ns>10</ns>
    <id>12525543</id>
    <revision>
      <id>772147416</id>
      <parentid>456761055</parentid>
      <timestamp>2017-03-25T16:04:17Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Noitalic]]": Allowing template editors on some templates with full protection dating back to pre-[[WP:TPROT]] times which aren't too often or too sensitively used. ([Edit=Require template editor access] (indefin...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="163">&lt;span style="font-style:normal;"&gt;{{{1}}}&lt;/span&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- PLEASE ADD CATEGORIES AND INTERWIKIS TO THE /doc SUBPAGE, THANKS --&gt;
&lt;/noinclude&gt;</text>
      <sha1>gthkczmvzrkqtqwsi8thy1il8wm1ddj</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Noitalics</title>
    <ns>10</ns>
    <id>20841804</id>
    <redirect title="Template:Noitalic" />
    <revision>
      <id>814254065</id>
      <parentid>634134841</parentid>
      <timestamp>2017-12-07T18:31:19Z</timestamp>
      <contributor>
        <username>Geni</username>
        <id>55582</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Noitalics]]": match protection level of template it is redirecting to. ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="89">#REDIRECT [[Template:Noitalic]]

[[Category:Wikipedia formatting and function templates]]</text>
      <sha1>qkjqfu03ovpxia5yu5mdj9lkqd650qa</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ns0</title>
    <ns>10</ns>
    <id>24382166</id>
    <redirect title="Template:Main other" />
    <revision>
      <id>826702645</id>
      <parentid>323931230</parentid>
      <timestamp>2018-02-20T15:44:55Z</timestamp>
      <contributor>
        <username>Xaosflux</username>
        <id>502540</id>
      </contributor>
      <comment>{{Rcat shell|{{R with history}}{{R from template shortcut}}}} requested on talk</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="96">#REDIRECT [[Template:Main other]]

{{Rcat shell|{{R with history}}{{R from template shortcut}}}}</text>
      <sha1>gybu6zu4ujxrpyyuxw1bssm8mym0j8n</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ns has subpages</title>
    <ns>10</ns>
    <id>22589696</id>
    <revision>
      <id>637438114</id>
      <parentid>637437596</parentid>
      <timestamp>2014-12-10T06:37:09Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>convert this to use [[Module:Ns has subpages]] - this gets the subpage status directly from MediaWiki, avoiding the need to update the template when namespaces change</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="185">{{&lt;includeonly&gt;safesubst:&lt;/includeonly&gt;#invoke:Ns has subpages|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>0pg457y46td6p53rdt8tyc76jeg9pa8</sha1>
    </revision>
  </page>
  <page>
    <title>Template:PAGENAMEBASE</title>
    <ns>10</ns>
    <id>29780699</id>
    <revision>
      <id>708575225</id>
      <parentid>636280634</parentid>
      <timestamp>2016-03-06T09:37:56Z</timestamp>
      <contributor>
        <username>Cabayi</username>
        <id>6561336</id>
      </contributor>
      <comment>per edit request &amp; discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="141">{{{{{|safesubst:}}}#Invoke:String|replace|{{{1|{{{{{|safesubst:}}}PAGENAME}}}}}|%s+%b()$||1|false}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>sam8aetb68ekom4findu6pp900ngldr</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Portal</title>
    <ns>10</ns>
    <id>1780010</id>
    <revision>
      <id>583050805</id>
      <parentid>583049721</parentid>
      <timestamp>2013-11-24T05:37:16Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Portal: [[WP:High-risk templates|Highly visible template]]: allow template editors ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="168">&lt;includeonly&gt;{{#invoke:Portal|portal}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata --&gt;
&lt;/noinclude&gt;</text>
      <sha1>eu0a2ons0y70cfblniy3kcxuib58bvt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Refbegin</title>
    <ns>10</ns>
    <id>9391283</id>
    <revision>
      <id>852806489</id>
      <parentid>780001198</parentid>
      <timestamp>2018-07-31T13:56:40Z</timestamp>
      <contributor>
        <username>TheDJ</username>
        <id>244887</id>
      </contributor>
      <minor/>
      <comment>Use template styles for ref begin hanging indents etc</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="889">&lt;includeonly&gt;&lt;templatestyles src="Template:Refbegin/styles.css" /&gt;&lt;!--
--&gt;&lt;div class="refbegin &lt;!--
--&gt;{{#if: {{{indent|}}}
    | refbegin-hanging-indents }} &lt;!--
 --&gt;{{#if: {{{normalfont|}}}
    | refbegin-100 }} &lt;!--
 --&gt;{{#if: {{{1|}}}
    | columns {{#iferror: {{#ifexpr: {{{1|1}}} &gt; 1 }}
      | references-column-width 
      | references-column-count references-column-count-{{#if:1|{{{1}}}}} }}
    | {{#if: {{{colwidth|}}}
      | references-column-width }} }}" style="&lt;!--
 --&gt;{{#if: {{{1|}}}
    | {{#iferror: {{#ifexpr: {{{1|1}}} &gt; 1 }}
      | {{column-width|{{#if:1|{{{1}}}}}}}
      | {{column-count|{{#if:1|{{{1}}}}}}} }}
    | {{#if: {{{colwidth|}}}
      | {{column-width|{{{colwidth}}}}} }} }}"&gt;&lt;!--
 --&gt;{{#if: {{{normalfont|}}}
    | [[Category:Pages using refbegin with normalfont parameter]]}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
{{/TemplateData}}
&lt;/noinclude&gt;</text>
      <sha1>okpqg75c4jczdich3iipf3hsjzepss2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Refbegin/styles.css</title>
    <ns>10</ns>
    <id>58037900</id>
    <revision>
      <id>853264625</id>
      <parentid>852805940</parentid>
      <timestamp>2018-08-03T14:30:37Z</timestamp>
      <contributor>
        <username>Amorymeltzer</username>
        <id>141948</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Refbegin/styles.css]]": Match parent template, see [[WP:TSTYLE]] ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text xml:space="preserve" bytes="498">.refbegin {
	font-size: 90%;            /* Default font-size */
	margin-bottom: 0.5em;
}
/* Hanging indentation for Template:Refbegin */
.refbegin-hanging-indents &gt; ul {
	list-style-type: none;
	margin-left: 0;
}
/* Definition list version is deprecated */
.refbegin-hanging-indents &gt; ul &gt; li,
.refbegin-hanging-indents &gt; dl &gt; dd {
	margin-left: 0;
	padding-left: 3.2em;
	text-indent: -3.2em;
	list-style: none;
}
/* Option for normal fontsize in {{refbegin}} */
.refbegin-100 {
	font-size: 100%;
}</text>
      <sha1>any0axch82o6cq2ata6whl55aohnlhk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Refend</title>
    <ns>10</ns>
    <id>10023179</id>
    <revision>
      <id>792167400</id>
      <parentid>772120878</parentid>
      <timestamp>2017-07-24T21:40:56Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <comment>remove &lt;/dl&gt; since no &lt;dl&gt; in Template:Refbegin</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="246">&lt;includeonly&gt;&lt;/div&gt;&lt;/includeonly&gt;&lt;noinclude&gt;
{{template doc|Template:refbegin/doc}}
{{TemplateDataHeader}}
&lt;templatedata&gt;
{
    "description": "Ends a reference lists started by {{refbegin}}.",
    "params": {
    }
}
&lt;/templatedata&gt;
&lt;/noinclude&gt;</text>
      <sha1>kcrxzrf6v4rvbl0yhnfcb5labufpnsp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Reflist</title>
    <ns>10</ns>
    <id>7585648</id>
    <revision>
      <id>794499661</id>
      <parentid>794499298</parentid>
      <timestamp>2017-08-08T12:05:27Z</timestamp>
      <contributor>
        <username>Anomie</username>
        <id>301903</id>
      </contributor>
      <comment>Please stop, you apparently don't know what you're doing here and shouldn't fool around with heavily-used live templates. I'll post an explanation to the talk page momentarily.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1008">&lt;div class="reflist &lt;!--
 --&gt;{{#if: {{{1|}}} {{{colwidth|}}}
    | columns references-column-width
	}}" style="&lt;!--
 --&gt;{{#if: {{{1|}}}
    | {{#iferror: {{#ifexpr: {{{1|1}}} &gt; 1 }}
      | {{column-width|1={{{1}}}}}
      | {{#switch:{{{1|}}}|1=|2={{column-width|1=30em}}|#default={{column-width|1=25em}}}} }}
    | {{#if: {{{colwidth|}}}
      | {{column-width|1={{{colwidth}}}}} }} }} list-style-type: &lt;!--
 --&gt;{{{liststyle|{{#switch: {{{group|}}}
    | upper-alpha
    | upper-roman
    | lower-alpha
    | lower-greek
    | lower-roman = {{{group}}}
    | #default = decimal}}}}};"&gt;
{{#tag:references|{{{refs|}}}|group={{{group|}}}|responsive={{#if:{{{1|}}}{{{colwidth|}}}|0|1}}}}&lt;/div&gt;{{#invoke:Check for unknown parameters|check|unknown={{main other|[[Category:Pages using reflist with unknown parameters|_VALUE_{{PAGENAME}}]]}}|preview=Page using [[Template:Reflist]] with unknown parameter "_VALUE_"|ignoreblank=y| 1 | colwidth | group | liststyle | refs }}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>2k096ppl7lxbcjqmfluu9x2sc91rmzl</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Russell T Davies</title>
    <ns>10</ns>
    <id>28154127</id>
    <revision>
      <id>846157344</id>
      <parentid>805777424</parentid>
      <timestamp>2018-06-16T18:38:39Z</timestamp>
      <contributor>
        <username>Dunarc</username>
        <id>14652890</id>
      </contributor>
      <comment>Adding Category:Television writer templates</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1354">{{navbox
| name  = Russell T Davies
| title = [[Russell T Davies]]
| state = {{{state|autocollapse}}}
| bodyclass = hlist

| group1 = TV series&lt;br&gt;created
| list1 = 
* ''[[Dark Season]]'' (1991)
* ''[[Century Falls]]'' (1993)
* ''[[Revelations (1994 TV series)|Revelations]]'' (1994–96)
* ''[[The Grand (TV series)|The Grand]]'' (1997–98)
* ''[[Queer as Folk (UK TV series)|Queer as Folk]]'' (1999–2000)
* ''[[Bob &amp; Rose]]'' (2001)
* ''[[The Second Coming (TV serial)|The Second Coming]]'' (2003)
* ''[[Mine All Mine]]'' (2004)
* ''[[Casanova (2005 TV serial)|Casanova]]'' (2005)
* ''[[Doctor Who]]'' (2005–10)
* ''[[Torchwood]]'' (2006–11)
* ''[[The Sarah Jane Adventures]]'' (2007–11)
* ''[[Wizards vs Aliens]]'' (2012–13) &lt;!-- Do NOT change to 2012-14 as Davies only worked on the show's first two series. --&gt;
* ''[[Cucumber (TV series)|Cucumber]]'' (2015)
* ''[[Banana (TV series)|Banana]]'' (2015)
* ''[[Tofu (web series)|Tofu]]'' (2015)
* ''[[A Very English Scandal (TV series)|A Very English Scandal]]'' (2018)

| group2 = Novel
| list2 = 
* ''[[Damaged Goods (Davies novel)|Damaged Goods]]''

}}&lt;noinclude&gt;
{{collapsible option}}
{{DEFAULTSORT:Davies, Russell T}}
[[Category:United Kingdom television personality navigational boxes]]
[[Category:Welsh writer navigational boxes]]
[[Category:Television writer templates]]
&lt;/noinclude&gt;</text>
      <sha1>tdiua6lruvvpmo7i1lzqir89snisu3v</sha1>
    </revision>
  </page>
  <page>
    <title>Template:SUBJECTSPACE formatted</title>
    <ns>10</ns>
    <id>28963741</id>
    <revision>
      <id>772120951</id>
      <parentid>413219381</parentid>
      <timestamp>2017-03-25T12:38:48Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:SUBJECTSPACE formatted]]": Allowing template editors on some templates with full protection dating back to pre-[[WP:TPROT|TPROT]] times which aren't too often or too sensitively used. ([Edit=Require template edi...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="215">{{#switch: {{SUBJECTSPACE}}
| {{ns:0}}  = article
| {{ns:4}}  = Wikipedia page
| {{ns:2}}
| {{ns:12}} = {{lc:{{SUBJECTSPACE}}}} page
| #default  = {{lc:{{SUBJECTSPACE}}}}
}}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>9ae6s1q65qparzetdf0woikw8gehejp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Saturn Award for Best Television Presentation</title>
    <ns>10</ns>
    <id>33846650</id>
    <revision>
      <id>848132688</id>
      <parentid>792767035</parentid>
      <timestamp>2018-06-30T00:08:03Z</timestamp>
      <contributor>
        <username>Hyliad</username>
        <id>14119537</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1885">{{Navbox
| name      = Saturn Award for Best Television Presentation
| title     = [[Saturn Award for Best Television Presentation]]
| state     = {{{state&lt;includeonly&gt;|collapsed&lt;/includeonly&gt;}}}
| bodyclass = hlist
| nowrapitems = yes
| list1     = 
* ''[[Alien Nation (TV series)|Alien Nation]]: [[Alien Nation: Millennium|Millennium]]'' (1994)
* ''[[Alien Nation (TV series)|Alien Nation]]: [[Alien Nation: Dark Horizon|Dark Horizon]]'' (1995)
* ''[[Doctor Who (film)|Doctor Who]]'' (1996)
* ''[[The Shining (miniseries)|The Shining]]'' (1997)
* ''[[Storm of the Century]]'' (1999)
* ''[[Fail Safe (2000 film)|Fail Safe]]'' (2000)
* ''[[Jack and the Beanstalk: The Real Story]]'' (2001)
* ''[[Taken (miniseries)|Steven Spielberg Presents Taken]]'' (2002)
* ''[[Battlestar Galactica (miniseries)|Battlestar Galactica]]'' (2003)
* ''[[Farscape]]'': ''[[Farscape: The Peacekeeper Wars|The Peacekeeper Wars]]'' (2004)
* ''[[Masters of Horror]]'' / ''[[The Triangle (miniseries)|The Triangle]]'' (2005)
* ''[[The Librarian (franchise)|The Librarian]]: [[The Librarian: Return to King Solomon's Mines|Return to King Solomon's Mines]]'' (2006)
* ''[[Family Guy]]'' ("[[Blue Harvest]]") (2007)
* ''[[The Librarian (franchise)|The Librarian]]: [[The Librarian: Curse of the Judas Chalice|Curse of the Judas Chalice]]'' (2008)
* ''[[Torchwood]]: [[Torchwood: Children of Earth|Children of Earth]]'' (2009)
* ''[[The Walking Dead (TV series)|The Walking Dead]]'' (2010)
* ''[[The Walking Dead (TV series)|The Walking Dead]]'' (2011)
* ''[[Breaking Bad]]'' (2012)
* ''[[Breaking Bad]]'' (2013)
* ''[[Game of Thrones]]'' (2014)
* ''[[Doctor Who]]'': "[[The Husbands of River Song]]'" (2015)
* ''[[11.22.63]]'' (2016)
* ''[[Twin Peaks (2017 TV series)|Twin Peaks: The Return]]'' (2017)

}}&lt;noinclude&gt;
{{collapsible option}}
[[Category:Saturn Award templates|Television Presentation]]
&lt;/noinclude&gt;</text>
      <sha1>tltwaz9toe4puv3v4wo78p0qd5xt6un</sha1>
    </revision>
  </page>
  <page>
    <title>Template:See also</title>
    <ns>10</ns>
    <id>1721254</id>
    <revision>
      <id>763260609</id>
      <parentid>725632232</parentid>
      <timestamp>2017-02-02T05:40:25Z</timestamp>
      <contributor>
        <username>Nihiltres</username>
        <id>236191</id>
      </contributor>
      <comment>Updated from sandbox to use [[Module:Labelled list hatnote]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="199">&lt;includeonly&gt;{{#invoke:Labelled list hatnote|labelledList|See also}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>dn9i3dv2bt8lqifr6vkbycoya78rnav</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Side box</title>
    <ns>10</ns>
    <id>20504849</id>
    <revision>
      <id>774482268</id>
      <parentid>611333719</parentid>
      <timestamp>2017-04-08T19:24:23Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Side box]]": [[WP:High-risk templates|Highly visible template]]: Allowing template editors ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="142">{{#invoke:Side box|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>s1zpy5c500y28mjgve7gykq14088u4e</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Sister project</title>
    <ns>10</ns>
    <id>20505184</id>
    <revision>
      <id>787938066</id>
      <parentid>777927888</parentid>
      <timestamp>2017-06-28T13:37:35Z</timestamp>
      <contributor>
        <username>Train2104</username>
        <id>10341578</id>
      </contributor>
      <minor/>
      <comment>wkt logo renamed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1403">{{Side box
| metadata=no
| position = {{{position|}}}
| image    = 
  {{#switch: {{{image|}}}
  | none =    &lt;!-- "image=none", do nothing --&gt;
  |      =    &lt;!-- No image fed, select an image --&gt;
    [[File:{{#switch: {{lc: {{{project|}}} }}
    | commons                = Commons-logo.svg
    | meta|metawiki|m        = Wikimedia Community Logo.svg
    | wikibooks|wbk|wb|b     = Wikibooks-logo-en-noslogan.svg
    | wikidata|data          = Wikidata-logo.svg
    | wikiquote|quote|wqt|q  = Wikiquote-logo.svg
    | wikipedia|wp|w         = Wikipedia-logo-v2.svg
    | wikisource|source|ws|s = Wikisource-logo.svg
    | wiktionary|wkt|wdy|d   = Wiktionary-logo-en-v2.svg
    | wikinews|news|wnw|n    = Wikinews-logo.svg
    | wikispecies|species    = Wikispecies-logo.svg
    | wikiversity|wvy|v      = Wikiversity-logo.svg
    | wikivoyage|voyage|voy  = Wikivoyage-Logo-v3-icon.svg
    | mediawiki|mw           = Mediawiki.png
    | outreachwiki|outreach  = Wikimedia Outreach.png
    | incubator              = Incubator-notext.svg
    | #default               = Wikimedia-logo.svg
    }}|40x40px|class=noviewer|alt=|link=
    ]]
  | #default = {{{image|}}}
  }}
| text       = {{{text}}}
| below      = {{{below|}}}
| imageright = {{{imageright|}}}
| class      = plainlinks sistersitebox
}}&lt;noinclude&gt;{{Documentation}}&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;&lt;/noinclude&gt;</text>
      <sha1>ourm3r954byna7jozjp47ggyjuoy2zn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Spoken Wikipedia</title>
    <ns>10</ns>
    <id>1732573</id>
    <revision>
      <id>785552952</id>
      <parentid>785552814</parentid>
      <timestamp>2017-06-14T05:06:14Z</timestamp>
      <contributor>
        <username>Moxy</username>
        <id>8729451</id>
      </contributor>
      <comment>Undid revision 785552814 by [[Special:Contributions/Moxy|Moxy]] ([[User talk:Moxy|talk]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="669">&lt;div id="section_SpokenWikipedia" class="infobox sisterproject plainlinks haudio"&gt;&lt;div style="text-align: center; white-space:nowrap"&gt;'''Listen to this {{#if: {{NAMESPACE}} |page|article}}''' ([[:Image:{{{1}}}|info/dl]])
[[Image:{{{1}}}|noicon|200px|center]]
&lt;/div&gt;
{{ #if: {{{simple|}}} | This is [[{{{simple}}}|a simplified revision]] of the article [[Category:Simplified spoken articles]]}}
{{ #if: {{{3|}}} | Note: this file is approximately {{{3}}}bytes &lt;br&gt;}}
{{Spoken Wikipedia boilerplate|{{{2|}}}|{{{1|}}} }}{{ns0|[[Category:Articles with hAudio microformats]]}}&lt;noinclude&gt;
{{documentation}} &lt;!-- add categories and interwiki links to /doc page --&gt;&lt;/noinclude&gt;</text>
      <sha1>bsujnuo8g9cv0ja1tng5uimfyvhd7d6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Spoken Wikipedia boilerplate</title>
    <ns>10</ns>
    <id>4112363</id>
    <revision>
      <id>799467576</id>
      <parentid>799467527</parentid>
      <timestamp>2017-09-07T22:16:45Z</timestamp>
      <contributor>
        <username>Ahecht</username>
        <id>2016996</id>
      </contributor>
      <comment>rm extra "article"</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="887">&lt;div style="float: left; margin-left: 5px;"&gt;[[Image:Sound-icon.svg|45px|none|alt=|link=|Spoken Wikipedia]]&lt;/div&gt;
&lt;div style="font-size: xx-small; line-height: 1.6em; margin-left: 60px;"&gt;This audio file was created from a revision of the article "&lt;span class="fn"&gt;{{PAGENAME}}&lt;/span&gt;" dated {{{1}}}, and does not reflect subsequent edits to the {{#if:{{NAMESPACE}}|page|article}}. ([[Wikipedia:Media help|Audio help]])&lt;/div&gt;
&lt;div style="text-align: center; clear: both"&gt;'''[[{{SITENAME}}:Spoken articles|More spoken {{#if:{{NAMESPACE}}|page|article}}s]]'''&lt;/div&gt;
{{#if:{{NAMESPACE}}||[[Category:Spoken articles]]}}
&lt;/div&gt;
{{#if:{{NAMESPACE}}
 |
 | {{Top icon
  | imagename = Sound-icon.svg
  | wikilink  = {{#if:{{{2|}}}|File:{{{2}}}|Wikipedia:WikiProject Spoken Wikipedia}}
  | text      = Listen to this article
  | id        = spoken-icon
}}}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>g1ph7twevxiwfv8p4is35iyvbtbbp66</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Start date</title>
    <ns>10</ns>
    <id>12549672</id>
    <revision>
      <id>772120960</id>
      <parentid>538210213</parentid>
      <timestamp>2017-03-25T12:38:48Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Start date]]": Allowing template editors on some templates with full protection dating back to pre-[[WP:TPROT|TPROT]] times which aren't too often or too sensitively used. ([Edit=Require template editor access]...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1061">&lt;includeonly&gt;{{#if: {{{4|}}}
  |{{#if: {{{5|}}}
     |{{padleft:{{{4}}}|2|0}}:{{padleft:{{{5}}}|2|0}}{{#if: {{{6|}}}
                                                   |&amp;#58;{{padleft:{{{6}}}|2|0}} }},&amp;#32;}} }}&lt;!--ABOVE FOR TIME; BELOW FOR DATE
--&gt;{{#if: {{{1|}}}
     |{{#if: {{{2|}}}
        |{{#if: {{{3|}}}
           |{{#if: {{{df|}}}|{{#expr:{{{3}}}}}&amp;nbsp;{{MONTHNAME|{{{2}}}}}|{{MONTHNAME|{{{2}}}}}&amp;nbsp;{{#expr:{{{3}}}}},}}&amp;nbsp;{{{1}}}|{{MONTHNAME|{{{2}}}}}&amp;nbsp;{{{1}}}}}|{{{1}}}}}}}{{#if: {{{7|}}}
              |&amp;#32;({{#ifeq: {{{7}}}|Z|UTC|{{{7}}}}})}}&lt;!-- BELOW FOR hCalendar
--&gt;&lt;span style="display:none"&gt;&amp;#160;(&lt;span class="bday dtstart published updated"&gt;{{#if: {{{1|}}}
  | {{{1}}}{{#if: {{{2|}}}
     | -{{padleft:{{{2}}}|2|0}}{{#if: {{{3|}}}
        | -{{padleft:{{{3}}}|2|0}} }} }}&lt;!--
--&gt;{{#if: {{{4|}}}
     | T{{padleft:{{{4}}}|2|0}}{{#if: {{{5|}}}
        | &amp;#58;{{padleft:{{{5}}}|2|0}}{{#if: {{{6|}}}
           | &amp;#58;{{padleft:{{{6}}}|2|0}} }} }} }} }}{{{7|}}}&lt;/span&gt;)&lt;/span&gt;&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>54fwv20s84ezu8i8wtmpuk7xe8rjb0i</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Steven Moffat</title>
    <ns>10</ns>
    <id>21858142</id>
    <revision>
      <id>846157289</id>
      <parentid>840443769</parentid>
      <timestamp>2018-06-16T18:38:11Z</timestamp>
      <contributor>
        <username>Dunarc</username>
        <id>14652890</id>
      </contributor>
      <comment>Adding Category:Television writer templates</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="821">{{Navbox
|name   = Steven Moffat
|title  = [[Steven Moffat]]
|listclass = hlist
|state = {{{state|autocollapse}}}|

| group1 = Series written&lt;br /&gt;and produced
| list1  =
* ''[[Press Gang]]'' (1989–93)
* ''[[Joking Apart]]'' (1993–95)
* ''[[Chalk (TV series)|Chalk]]'' (1997)
* ''[[Coupling (UK TV series)|Coupling]]'' (2000–04)
* ''[[Jekyll (TV series)|Jekyll]]'' (2007)
* ''[[Doctor Who]]'' (2010–17) 
* ''[[Sherlock (TV series)|Sherlock]]'' (2010–present)

| group2 = Films written
| list2  = 
* ''[[The Adventures of Tintin (film)|The Adventures of Tintin]]'' (2011)

}}&lt;noinclude&gt;
{{collapsible option}}
{{DEFAULTSORT:Moffat, Steven}}
[[Category:United Kingdom television personality navigational boxes]]
[[Category:Television writer templates]]
[[Category:Scottish writer navigational boxes]]
&lt;/noinclude&gt;</text>
      <sha1>sswcu4iadevj2gwhs8b8d3468op0uj9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Str left</title>
    <ns>10</ns>
    <id>21696393</id>
    <revision>
      <id>741880261</id>
      <parentid>605122708</parentid>
      <timestamp>2016-09-30T07:01:19Z</timestamp>
      <contributor>
        <username>Ymblanter</username>
        <id>14596827</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Str left: [[WP:High-risk templates|Highly visible template]]: RFPP request ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="184">&lt;includeonly&gt;{{safesubst:padleft:|{{{2|1}}}|{{{1}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>3rrdme1fpv80h1kdk9b7zwlkqd34dfk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Str len</title>
    <ns>10</ns>
    <id>22144387</id>
    <revision>
      <id>774485346</id>
      <parentid>538982020</parentid>
      <timestamp>2017-04-08T19:49:02Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Str len]]": [[WP:High-risk templates|Highly visible template]]: Allowing template editors ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="163">{{{{{|safesubst:}}}#invoke:String|len|s={{{1|}}}}}&lt;noinclude&gt;
{{documentation}}

&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>b1x8qcqpdocnua2ihkd8pr5jd1jn7xn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Str rightmost</title>
    <ns>10</ns>
    <id>24238541</id>
    <revision>
      <id>741880623</id>
      <parentid>542656299</parentid>
      <timestamp>2016-09-30T07:06:30Z</timestamp>
      <contributor>
        <username>Ymblanter</username>
        <id>14596827</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Str rightmost: [[WP:High-risk templates|Highly visible template]]: RFPP request ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="144">&lt;includeonly&gt;{{#iferror: {{#invoke:String | sub | s={{{1}}} | -{{{2}}} }} | {{{1}}} }}&lt;/includeonly&gt;&lt;noinclude&gt;

{{documentation}}

&lt;/noinclude&gt;</text>
      <sha1>6juuuih7rh83u06840sbo5e3w28zo6o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Str trim</title>
    <ns>10</ns>
    <id>30806460</id>
    <redirect title="Template:Trim" />
    <revision>
      <id>412919930</id>
      <timestamp>2011-02-09T15:02:43Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>moved [[Template:Str trim]] to [[Template:Trim]]: merge duplicate templates</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[Template:Trim]]</text>
      <sha1>4ggt8eee4n8hiu0d5n8ped6zl6n81pf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:TOC limit</title>
    <ns>10</ns>
    <id>10794362</id>
    <revision>
      <id>645375001</id>
      <parentid>388761389</parentid>
      <timestamp>2015-02-02T23:24:35Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:TOC limit: [[WP:High-risk templates|Highly visible template]]: allow template editors ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="99">&lt;div class="toclimit-{{{1|{{{limit|3}}}}}}"&gt;__TOC__&lt;/div&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>bh7ohpliyqceamavoe13nsjqjl553wn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:TV.com show</title>
    <ns>10</ns>
    <id>1202581</id>
    <revision>
      <id>853291790</id>
      <parentid>853169516</parentid>
      <timestamp>2018-08-03T18:24:53Z</timestamp>
      <contributor>
        <username>Ansh666</username>
        <id>5305553</id>
      </contributor>
      <minor/>
      <comment>Ansh666 moved page [[Template:Tv.com show]] to [[Template:TV.com show]]: Match name of source [[TV.com]] (same as four other templates for this site), similar to [[Template:IMDb title]] matching formatting of source [[IMDb]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1273">{{#if: {{{1|{{{id&lt;includeonly&gt;|&lt;/includeonly&gt;}}}}}}

| [http://www.tv.com/{{#ifeq: {{{type|}}} | web
  | web
  | shows
  }}/{{#if:1 | {{{1|{{{id}}}}}} }}/ ''{{#if: {{{2|{{{name|{{{title&lt;includeonly&gt;|&lt;/includeonly&gt;}}}}}}}}}
  | {{{2|{{{name|{{{title}}}}}}}}}
  | {{PAGENAMEBASE}}
  }}''] at [[TV.com]]{{#iferror: {{#expr: 0 + {{{1|{{{id}}}}}} }}
  | &lt;!--non-numeric id--&gt;
  | [[Category:TV.com template using numeric id]]
  }}{{#if: {{#titleparts:{{{1|{{{id|}}}}}}|1|2}}
  | [[Category:TV.com template with unexpected input]]
  }}{{WikidataCheck |property=P2638 |value={{#ifeq: {{{type|}}} | web
  | web 
  | shows
  }}/{{#if:1
  | {{{1|{{{id}}}}}}
  }} |category=TV.com template with ID |namespaces=0}}

| {{#if: {{#property:P2638}}

  | [http://www.tv.com/{{First word|1={{#property:P2638}}|sep=,}}/ ''{{#if: {{{2|{{{name|{{{title|}}}}}}}}}
  | {{{2|{{{name|{{{title}}}}}}}}}
  | {{PAGENAMEBASE}}
  }}''] at [[TV.com]]{{EditAtWikidata|pid=P2638}}{{Main other|[[Category:TV.com template using Wikidata]]}}

  | &lt;span class="error"&gt;&amp;#123;&amp;#123;[[Template:TV.com show|TV.com show]]&amp;#125;&amp;#125; template missing ID and not present in Wikidata.&lt;/span&gt;{{Main other|[[Category:TV.com template missing ID and not in Wikidata]]}}

  }}

}}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>58q2tvfepmdwsvubnjjl02sovsk1c06</sha1>
    </revision>
  </page>
  <page>
    <title>Template:TardisDataCore</title>
    <ns>10</ns>
    <id>11436937</id>
    <revision>
      <id>786713871</id>
      <parentid>733298095</parentid>
      <timestamp>2017-06-21T04:46:31Z</timestamp>
      <contributor>
        <username>SmallerOnTheOutside</username>
        <id>20903463</id>
      </contributor>
      <comment>Our name is lower-case "Tardis Data Core", per consensus at http://tardis.wikia.com/wiki/Thread:119861 (I am a Tardis admin)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="257">* {{Wikia|tardis|Tardis Data Core|{{{1| {{PAGENAME}}}}}|{{{2| {{{1| {{PAGENAME}} }}} }}} }}&lt;noinclude&gt;

{{Documentation|content=
{{Bad documentation}}
[[Category:Doctor Who external link templates|{{PAGENAME}}]]
[[Category:Wikia templates]]


}}&lt;/noinclude&gt;</text>
      <sha1>tqgkputpoz77snwyp50gfcbascc5xef</sha1>
    </revision>
  </page>
  <page>
    <title>Template:TardisIndexFile</title>
    <ns>10</ns>
    <id>38182800</id>
    <redirect title="Template:TardisDataCore" />
    <revision>
      <id>819688107</id>
      <parentid>532285056</parentid>
      <timestamp>2018-01-10T19:22:20Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:TardisIndexFile]]": [[WP:SEMI|semi-protecting]] highly-visible templates in response to recent template-space vandalism ([Edit=Require autoconfirmed or confirmed access] (indefinite) [Move=Require autoconfirmed or confirmed access...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[Template:TardisDataCore]]</text>
      <sha1>evbgk27vbsquru0hdrbjwbrkr4u5yyo</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Template other</title>
    <ns>10</ns>
    <id>21418395</id>
    <revision>
      <id>774731050</id>
      <parentid>388689098</parentid>
      <timestamp>2017-04-10T09:49:10Z</timestamp>
      <contributor>
        <username>CambridgeBayWeather</username>
        <id>294180</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Template other]]": Request at RFPP ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="435">{{#switch:
  &lt;!--If no or empty "demospace" parameter then detect namespace--&gt;
  {{#if:{{{demospace|}}}
  | {{lc: {{{demospace}}} }}    &lt;!--Use lower case "demospace"--&gt;
  | {{#ifeq:{{NAMESPACE}}|{{ns:Template}}
    | template
    | other
    }}
  }}
| template = {{{1|}}}
| other
| #default = {{{2|}}}
}}&lt;!--End switch--&gt;&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>0tcssjmltwl7y5v3f5wj2kqciaabqly</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Tl</title>
    <ns>10</ns>
    <id>1487430</id>
    <revision>
      <id>836995080</id>
      <parentid>776260390</parentid>
      <timestamp>2018-04-18T02:46:37Z</timestamp>
      <contributor>
        <username>Xaosflux</username>
        <id>502540</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Tl]]": used in the mediawiki interface ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="168">&amp;#123;&amp;#123;[[Template:{{{1}}}|{{{1}}}]]&amp;#125;&amp;#125;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>h0vr3yvr9jdyd17x82vnav21ngwmxuk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Top icon</title>
    <ns>10</ns>
    <id>20101811</id>
    <revision>
      <id>828918653</id>
      <parentid>723232837</parentid>
      <timestamp>2018-03-05T15:26:59Z</timestamp>
      <contributor>
        <username>Bellezzasolo</username>
        <id>20006949</id>
      </contributor>
      <comment>Per edit request by [[User:Mr rnddude]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="709">&lt;includeonly&gt;&lt;nowiki /&gt;&lt;!-- This nowiki tag helps prevent whitespace at the top of articles. --&gt;{{#tag:indicator|[[File:{{{image|{{{imagename|{{{1|}}}}}}}}}|{{#if:{{{width|}}}|{{{width}}}|20}}x{{#if:{{{height|}}}|{{{height}}}|20}}px
 |{{#if:{{{link|{{{wikilink|{{{2|}}}}}}}}}|link={{{link|{{{wikilink|{{{2|}}}}}}}}}}}
 |{{#if:{{{alt|}}}|alt={{{alt}}}}}
 |{{{text|{{{description|{{{3|}}}}}}}}}]]
|name = {{#if:{{{sortkey|}}}|{{{sortkey}}}-}}{{#if:{{{name|}}}|{{{name}}}|{{#if:{{{id|}}}|{{{id}}}|{{{image|{{{imagename|{{{1|}}}}}}}}}}}}}}}{{Category handler
|user = {{{usercat|}}}
|main = {{{maincat|}}}
|subpage = {{{subpage|no}}}
|nocat = {{{nocat|}}}
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>lpc6h6ubpj5uixmvrctipzgxz5t38mu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Trim</title>
    <ns>10</ns>
    <id>21815705</id>
    <revision>
      <id>668935791</id>
      <parentid>412919929</parentid>
      <timestamp>2015-06-27T18:27:45Z</timestamp>
      <contributor>
        <username>Plastikspork</username>
        <id>5075409</id>
      </contributor>
      <comment>Merging [[Template:Strip whitespace]] per TfD</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="114">&lt;includeonly&gt;{{ {{{|safesubst:}}}#if:1|{{{x|{{{1|}}}}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;

{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>h9devvk8f6nt34tp7zb17s39ge5wquh</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Unbulleted list</title>
    <ns>10</ns>
    <id>27486458</id>
    <revision>
      <id>610144010</id>
      <parentid>581683946</parentid>
      <timestamp>2014-05-26T01:21:32Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>switch to using [[Module:List]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="181">{{&lt;includeonly&gt;safesubst:&lt;/includeonly&gt;#invoke:list|unbulleted}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>g28jpumica8ycuimxbfi2qlrcbowsb3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Update</title>
    <ns>10</ns>
    <id>1721338</id>
    <revision>
      <id>784071013</id>
      <parentid>766374200</parentid>
      <timestamp>2017-06-06T09:04:49Z</timestamp>
      <contributor>
        <username>UsuallyNonviolentBot</username>
        <id>31197275</id>
      </contributor>
      <minor/>
      <comment>/* top */Remove deprecated parameter $N from [[Module:Unsubst]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3181">{{ {{{|safesubst:}}}#invoke:Unsubst||date=__DATE__ |$B=
{{main other
 | demospace = {{{demospace|}}} 
 |{{ambox
  | name  = Update
  | subst = &lt;includeonly&gt;{{subst:substcheck}}&lt;/includeonly&gt;
  | type  = content
  | class = ambox-Update
  | image = [[File:Ambox current red.svg|42px|link=]]
  | issue = {{#if:{{{part|{{{1|}}}}}}
   |{{#ifeq:{{{part|{{{1|}}}}}}|section
     |{{#if:{{{inaccurate|}}}
      |This section's '''[[Wikipedia:Accuracy dispute|factual accuracy]] may be compromised due to out-of-date information'''
      |This section needs to be '''updated'''}}
     |{{#if:{{{inaccurate|}}}
      |The '''[[Wikipedia:Accuracy dispute|factual accuracy]]''' of parts of this article (those related to {{{part|{{{1|}}}}}}) '''may be compromised due to out-of-date information'''
      |Parts of this article (those related to {{{part|{{{1|}}}}}}) need to be '''updated'''}}
     }}
   |{{#if:{{{inaccurate|}}}
    |This article's '''[[Wikipedia:Accuracy dispute|factual accuracy]] may be compromised due to out-of-date information'''
    |This article needs to be '''updated'''}}
  }}. {{#if:{{{reason|}}}|In particular: {{{reason}}}.}} 
  | fix   =  Please update this {{{type|{{SUBJECTSPACE formatted}}}}} to reflect recent events or newly available information. {{#if:{{{2|{{{updated|}}}}}}
   |&lt;br /&gt;&lt;small&gt;Last update: {{{2|{{{updated}}}}}}&lt;/small&gt;
  }}
  | talk  = {{{talk|{{{talksection|{{{discuss|}}}}}}}}}
  | date  = {{{date|}}}
  | cat   = {{#if:{{{inaccurate|}}}|Articles with obsolete information|Wikipedia articles in need of updating}}
  | all   = All Wikipedia articles in need of updating
  | all2  = {{{cat|}}}
 }}
 |{{mbox
  | name  = Update
  | subst = &lt;includeonly&gt;{{subst:substcheck}}&lt;/includeonly&gt;
  | type  = content
  | class = ambox-Update
  | image = [[File:Ambox current red.svg|42px|link=]]
  | text  = {{#if:{{{part|{{{1|}}}}}}
   |{{#if:{{{inaccurate|}}}
    |The '''[[Wikipedia:Accuracy dispute|factual accuracy]]''' of parts of this {{{type|{{SUBJECTSPACE formatted}}}}} (those related to {{{part|{{{1|}}}}}}) '''may be compromised due to out-of-date information'''
    |Parts of this {{{type|{{SUBJECTSPACE formatted}}}}} (those related to {{{part|{{{1|}}}}}}) need to be '''updated'''}}
   |{{#if:{{{inaccurate|}}}
    |The '''[[Wikipedia:Accuracy dispute|factual accuracy]]''' of this {{{type|{{SUBJECTSPACE formatted}}}}} '''may be compromised due to out-of-date information'''
    |This {{{type|{{SUBJECTSPACE formatted}}}}} needs to be '''updated'''}}
  }}. {{#if:{{{reason|}}}|In particular: {{{reason}}}.}} Please update this {{{type|{{SUBJECTSPACE formatted}}}}} to reflect recent events or newly available information. {{#ifexist: {{TALKPAGENAME}}
   |Relevant discussion may be found on {{#if: {{{talk|{{{talksection|{{{discuss|}}}}}}}}} | [[{{TALKPAGENAME}}#{{{talk|{{{talksection|{{{discuss}}}}}}}}}|the talk page]] | [[{{TALKPAGENAME}}| the talk page]] }}.}} {{#if:{{{date|}}}|&lt;small&gt;''({{{date}}})''&lt;/small&gt;}} {{#if:{{{2|{{{updated|}}}}}}
   |&lt;br /&gt;&lt;small&gt;Last update: {{{2|{{{updated}}}}}}&lt;/small&gt;
  }}
 }}
}}
}}&lt;noinclude&gt;
&lt;!-- Place categories on /doc subpage; interwikis go to Wikidata. --&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>dum3ie7rjedly86b5y49ttjnvdzmz75</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Update section</title>
    <ns>10</ns>
    <id>18784466</id>
    <revision>
      <id>653962308</id>
      <parentid>653955279</parentid>
      <timestamp>2015-03-28T23:45:53Z</timestamp>
      <contributor>
        <username>Redrose64</username>
        <id>9612106</id>
      </contributor>
      <comment>noinclude must follow "real" template code directly, without intervening spaces or line breaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="223">{{ {{{|safesubst:}}}#invoke:Unsubst||date=__DATE__|$B=
{{Update|section|date={{{date|}}}|cat={{{cat|}}}}}
}}&lt;noinclude&gt;

{{Documentation}}
&lt;!-- Add categories and inter-wikis to the /doc subpage, not here! --&gt;

&lt;/noinclude&gt;</text>
      <sha1>mgk1s1fd4svyy4lfeatxgpvhnrqzaz2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Use British English</title>
    <ns>10</ns>
    <id>27566674</id>
    <revision>
      <id>828632443</id>
      <parentid>826977388</parentid>
      <timestamp>2018-03-03T20:03:57Z</timestamp>
      <contributor>
        <username>Plastikspork</username>
        <id>5075409</id>
      </contributor>
      <comment>TFD closed as do not merge ([[WP:XFDC|XFDcloser]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="144">{{ {{{|safesubst:}}}#invoke:Unsubst||date=__DATE__ |$B=
{{DMCA|Use British English|from|{{{date|}}}}}
}}&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>k4i5jn2t0nisy1zb6e8ouv4snocf9n6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Use dmy dates</title>
    <ns>10</ns>
    <id>21044097</id>
    <revision>
      <id>784071134</id>
      <parentid>778226301</parentid>
      <timestamp>2017-06-06T09:05:49Z</timestamp>
      <contributor>
        <username>UsuallyNonviolentBot</username>
        <id>31197275</id>
      </contributor>
      <minor/>
      <comment>/* top */Remove deprecated parameter $N from [[Module:Unsubst]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="138">{{ {{{|safesubst:}}}#invoke:Unsubst||date=__DATE__ |$B=
{{DMCA|Use dmy dates|from|{{{date|}}}}}
}}&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>bp7zcbjc9uasbebcc8ijm5fqmeb3052</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Webarchive</title>
    <ns>10</ns>
    <id>22577742</id>
    <revision>
      <id>769654926</id>
      <parentid>750709028</parentid>
      <timestamp>2017-03-10T21:29:55Z</timestamp>
      <contributor>
        <username>Rich Farmbrough</username>
        <id>82835</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="176">&lt;includeonly&gt;{{#invoke:webarchive|webarchive}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- PLEASE ADD CATEGORIES AND INTERWIKIS TO THE /doc SUBPAGE, THANKS --&gt;
&lt;/noinclude&gt;</text>
      <sha1>af0jh9wqwfjf3uyx3ywwvb039disnpm</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Wikia</title>
    <ns>10</ns>
    <id>1723807</id>
    <revision>
      <id>577889072</id>
      <parentid>388328475</parentid>
      <timestamp>2013-10-19T20:47:35Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Wikia: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="695">&lt;!--

To add a wiki to the list of identified Wikia wikis, edit Template:Wikia/list

Inputs:
 1= WikiName
 2= WikiTitle    (ONLY used if input 1 is not found in Template:Wikia/list)
 3= ArticleName
 4= ArticleTitle

--&gt;&lt;includeonly&gt;{{#if:{{{3|}}}&lt;!--
1     1st link --&gt;|[{{fullurl:wikiasite:{{str_trim|{{{1|{{PAGENAME}}}}}}}:{{str_trim|{{{3|}}}}}}} {{{4|{{{3|{{{2|{{{1|{{PAGENAME}}}}}}}}}}}}}}]&lt;!-- 
2          /if --&gt; on&amp;#32;}}&lt;!--
3     2nd link --&gt;[{{fullurl:wikiasite:{{str_trim|{{{1|{{PAGENAME}}}}}}}}} {{Template:Wikia/list&lt;!--
4  (1st input) --&gt;|{{{1 | {{PAGENAME}} }}}&lt;!--
5  (2nd input) --&gt;|{{{2 | {{{1 | {{PAGENAME}} }}} }}} }}]&lt;/includeonly&gt;&lt;noinclude&gt;

{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>9xacp99urax86irbpsm9fpq9bnxrnx9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Wikia/list</title>
    <ns>10</ns>
    <id>22266818</id>
    <revision>
      <id>854396908</id>
      <parentid>849785471</parentid>
      <timestamp>2018-08-11T01:43:08Z</timestamp>
      <contributor>
        <username>Izno</username>
        <id>2927383</id>
      </contributor>
      <comment>add cnc wiki</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1767">&lt;includeonly&gt;{{#switch:{{lc:{{{1|}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;{{doc|content=&lt;pre&gt;&lt;/noinclude&gt;
| 24            = 24 Wiki
| adventuretime = Adventure Time Wiki
| ahs           = American Horror Story Wiki
| assassinscreed = The Assassin's Creed Wiki
| batenkaitos   = ''Baten Kaitos'' Wiki
| bladerunner   = Off-world: The ''Blade Runner'' Wiki
| clashofclans  = Clash of Clans Wiki
| cnc           = Command &amp; Conquer Wiki
| comics        = Comic Book Series Wiki
| conan         = Conan Wiki
| conlang       = Constructed Languages wiki
| cybernations  = Cyber Nations Wiki
| delphi        = Delphi Wiki
| diablo        = Diablo Wiki
| doom          = ''Doom'' Wiki
| ewrestling    = eWrestling Encyclopedia
| familypedia   = Familypedia
| ffxiclopedia  = FFXIclopedia
| firefly       = The ''Firefly'' and ''Serenity'' Database
| furry         = WikiFur
| gearsofwar    = Gearspedia: The ''Gears of War'' Wiki
| guildwars     = GuildWiki
| gunz          = GunZ.Wikia
| halo          = Halo Nation
| marvel        = Marvel Database
| memoryalpha|enmemoryalpha = Memory Alpha
| muppet        = Muppet Wiki 
| museums       = MuseumsWiki
| outlander     = Outlander Wiki
| ratchetandclank  = ''Ratchet &amp; Clank'' Wiki
| runescape     = ''RuneScape'' Wiki
| stargate      = ''Stargate'' Wiki
| startrek      = Memory Beta
| starwars      = Wookieepedia: a ''Star Wars'' Wiki
| terminator    = The Terminator Wiki
| tibia         = TibiaWiki, an external wiki
| wizardry      = Wizardry Wiki, an external wiki
| wot           = ''A Wheel of Time'' Wiki
| wow|wowwiki   = WoWWiki
| www|wikia     = Wikia
| xbox          = Xbox Wiki
| yugioh        = Yu-Gi-Oh!
| #default      = {{#if:{{{2}}} | {{{2|}}} | {{{1}}} }},&amp;#32; an external wiki
}}&lt;noinclude&gt;&lt;/pre&gt;}}&lt;/noinclude&gt;</text>
      <sha1>7c2oruqqd179jbcmwt1bss643ekdegv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:WikidataCheck</title>
    <ns>10</ns>
    <id>39241122</id>
    <revision>
      <id>825510301</id>
      <parentid>679939569</parentid>
      <timestamp>2018-02-13T20:28:10Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <comment>separate pp-template not needed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="205">&lt;includeonly&gt;{{#invoke:WikidataCheck|wikidatacheck|property={{{property|}}}|value={{{value|}}}|category={{{category|}}}|namespaces={{{namespaces|0}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>a8vpp6hzfq36v4chm2r0pcns09h56vd</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Wikinews</title>
    <ns>10</ns>
    <id>1335312</id>
    <revision>
      <id>663515960</id>
      <parentid>644418715</parentid>
      <timestamp>2015-05-22T08:55:40Z</timestamp>
      <contributor>
        <username>Ianblair23</username>
        <id>145927</id>
      </contributor>
      <comment>sister → sister project</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="526">&lt;includeonly&gt;{{#if:{{{1|}}}|&lt;/includeonly&gt;
{{Sister project
| project = wikinews
| position = {{{position|}}}
| text = Wikinews has related news:
'''''[[wikinews: {{{1|Special:Search/{{PAGENAME}}}}}| {{{2|{{{1|{{PAGENAME}}}}}}}}]]'''''
}}&lt;includeonly&gt;|&lt;span class="error"&gt;The template {{tl|Wikinews}} requires a link to an article. To link to a category, use {{tl|Wikinews category}}.&lt;/span&gt;}}&lt;/includeonly&gt;&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add cats to the /doc subpage and interwikis to Wikidata, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>dupm4c0znvutaqxxqqy2asdt8txf3p1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Wikipedia books</title>
    <ns>10</ns>
    <id>22464693</id>
    <revision>
      <id>831114331</id>
      <parentid>827246197</parentid>
      <timestamp>2018-03-18T20:53:12Z</timestamp>
      <contributor>
        <username>Matt Fitzpatrick</username>
        <id>291848</id>
      </contributor>
      <comment>null alt attribute for decorative image; adjacent text "Book" is sufficient alternative text</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="711">{{ side box
| position = {{{position|}}}
| image    = [[file:Office-book.svg|30px|link=|alt=]]
| text     = &lt;ul style="font-weight: bold"&gt;
&lt;li&gt;[[Book:{{{1|{{PAGENAME}}}}}|Book: {{{2|{{{1|{{PAGENAME}}}}}}}}]]&lt;/li&gt;{{#if:{{{3|}}}|
&lt;li&gt;[[Book:{{{3|{{PAGENAME}}}}}|Book: {{{4|{{{3|{{PAGENAME}}}}}}}}]]&lt;/li&gt;}}{{#if:{{{5|}}}|
&lt;li&gt;[[Book:{{{5|{{PAGENAME}}}}}|Book: {{{6|{{{5|{{PAGENAME}}}}}}}}]]&lt;/li&gt;}}{{#if:{{{7|}}}|
&lt;li&gt;[[Book:{{{7|{{PAGENAME}}}}}|Book: {{{8|{{{7|{{PAGENAME}}}}}}}}]]&lt;/li&gt;}}{{#if:{{{9|}}}|
&lt;li&gt;[[Book:{{{9|{{PAGENAME}}}}}|Book: {{{10|{{{9|{{PAGENAME}}}}}}}}]]&lt;/li&gt;}}
&lt;/ul&gt;
}}&lt;noinclude&gt;
&lt;!-- Add categories to the /doc subpage; interwikis go to Wikidata, thank you! --&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>mb3xsespbzbg3j21q6ch1qaw5h2thot</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Wikiquote</title>
    <ns>10</ns>
    <id>958937</id>
    <revision>
      <id>663515314</id>
      <parentid>620903590</parentid>
      <timestamp>2015-05-22T08:45:25Z</timestamp>
      <contributor>
        <username>Ianblair23</username>
        <id>145927</id>
      </contributor>
      <comment>sister → sister project</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="205">{{Sister project
|project=wikiquote
|text=Wikiquote has quotations related to: '''''[[q:{{{1|Special:Search/{{PAGENAME}}}}}|{{{2|{{{1|{{PAGENAME}}}}}}}}]]''''' 
}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>gbwtjl8qf5ym9tjp9bnci7pr1dfe0go</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Yesno</title>
    <ns>10</ns>
    <id>22255088</id>
    <revision>
      <id>821904792</id>
      <parentid>669640856</parentid>
      <timestamp>2018-01-23T08:37:08Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>add support for on/off, per discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="366">{{&lt;includeonly&gt;safesubst:&lt;/includeonly&gt;#switch: {{&lt;includeonly&gt;safesubst:&lt;/includeonly&gt;lc: {{{1|¬}}} }}
 |no
 |n
 |false
 |off
 |0        = {{{no|&lt;!-- null --&gt;}}}
 |         = {{{blank|{{{no|&lt;!-- null --&gt;}}}}}}
 |¬        = {{{¬|}}}
 |yes
 |y
 |true
 |on
 |1        = {{{yes|yes}}}
 |#default = {{{def|{{{yes|yes}}}}}}
}}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>r1wh7ajnm478r67owpatavjany80n9e</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Yesno-no</title>
    <ns>10</ns>
    <id>48375573</id>
    <revision>
      <id>825510157</id>
      <parentid>804450734</parentid>
      <timestamp>2018-02-13T20:27:17Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <comment>separate pp-template not needed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="269">{{safesubst:&lt;noinclude /&gt;yesno|{{{1}}}|yes={{{yes|yes}}}|no={{{no|no}}}|blank={{{blank|no}}}|¬={{{¬|no}}}|def={{{def|no}}}}}&lt;noinclude&gt;
{{Documentation|Template:Yesno/doc}}
&lt;!--Categories go in the doc page referenced above; interwikis go in Wikidata.--&gt;
&lt;/noinclude&gt;</text>
      <sha1>34vmtxa9ubuh1vz2ulp78m5ela68riu</sha1>
    </revision>
  </page>
  <page>
    <title>Module:About</title>
    <ns>828</ns>
    <id>50080208</id>
    <revision>
      <id>833407229</id>
      <parentid>730125083</parentid>
      <timestamp>2018-03-31T10:24:13Z</timestamp>
      <contributor>
        <username>Galobtter</username>
        <id>19502780</id>
      </contributor>
      <comment>add selfref and "text=" options; use pagetype module for detecting namespace</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="1532">local mArguments --initialize lazily
local mHatnote = require('Module:Hatnote')
local mHatList = require('Module:Hatnote list')
local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType
local p = {}

function p.about (frame)
	-- A passthrough that gets args from the frame and all
	mArguments = require('Module:Arguments')
	args = mArguments.getArgs(frame)
	return p._about(args)
end


function p._about (args, options)
	-- Produces "about" hatnote.

	-- Type checks and defaults
	checkType('_about', 1, args, 'table', true)
	args = args or {}
	checkType('_about', 2, options, 'table', true)
	options = options or {}
	local defaultOptions = {
		aboutForm = 'This %s is about %s. ',
		PageType = require('Module:Pagetype').main(),
		namespace = mw.title.getCurrentTitle().namespace,
		otherText = nil, --included for complete list
		sectionString = 'section'
	}
	for k, v in pairs(defaultOptions) do
		if options[k] == nil then options[k] = v end
	end

	-- Set initial "about" string
	local pageType = (args.section and options.sectionString) or options.PageType
	local about = ''
	if args[1] then
		about = string.format(options.aboutForm, pageType, args[1])
	end
	
	--Allow passing through certain options
	local fsOptions = {
		otherText = options.otherText,
		extratext = args.text
	}
	local hnOptions = {
		selfref = args.selfref
	}

	-- Set for-see list
	local forSee = mHatList._forSee(args, 2, fsOptions)

	-- Concatenate and return
	return mHatnote._hatnote(about .. forSee, hnOptions)
end

return p</text>
      <sha1>sues5orgepkp4a2wup57qbry8xl812l</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Arguments</title>
    <ns>828</ns>
    <id>41298065</id>
    <revision>
      <id>696500078</id>
      <parentid>668829606</parentid>
      <timestamp>2015-12-23T16:07:27Z</timestamp>
      <contributor>
        <username>Xaosflux</username>
        <id>502540</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Module:Arguments: used in the mediawiki interface ex: [[MediaWiki:Watchlist-details]] ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="10054">-- This module provides easy processing of arguments passed to Scribunto from
-- #invoke. It is intended for use by other Lua modules, and should not be
-- called from #invoke directly.

local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType

local arguments = {}

-- Generate four different tidyVal functions, so that we don't have to check the
-- options every time we call it.

local function tidyValDefault(key, val)
	if type(val) == 'string' then
		val = val:match('^%s*(.-)%s*$')
		if val == '' then
			return nil
		else
			return val
		end
	else
		return val
	end
end

local function tidyValTrimOnly(key, val)
	if type(val) == 'string' then
		return val:match('^%s*(.-)%s*$')
	else
		return val
	end
end

local function tidyValRemoveBlanksOnly(key, val)
	if type(val) == 'string' then
		if val:find('%S') then
			return val
		else
			return nil
		end
	else
		return val
	end
end

local function tidyValNoChange(key, val)
	return val
end

local function matchesTitle(given, title)
	local tp = type( given )
	return (tp == 'string' or tp == 'number') and mw.title.new( given ).prefixedText == title
end

local translate_mt = { __index = function(t, k) return k end }

function arguments.getArgs(frame, options)
	checkType('getArgs', 1, frame, 'table', true)
	checkType('getArgs', 2, options, 'table', true)
	frame = frame or {}
	options = options or {}

	--[[
	-- Set up argument translation.
	--]]
	options.translate = options.translate or {}
	if getmetatable(options.translate) == nil then
		setmetatable(options.translate, translate_mt)
	end
	if options.backtranslate == nil then
		options.backtranslate = {}
		for k,v in pairs(options.translate) do
			options.backtranslate[v] = k
		end
	end
	if options.backtranslate and getmetatable(options.backtranslate) == nil then
		setmetatable(options.backtranslate, {
			__index = function(t, k)
				if options.translate[k] ~= k then
					return nil
				else
					return k
				end
			end
		})
	end

	--[[
	-- Get the argument tables. If we were passed a valid frame object, get the
	-- frame arguments (fargs) and the parent frame arguments (pargs), depending
	-- on the options set and on the parent frame's availability. If we weren't
	-- passed a valid frame object, we are being called from another Lua module
	-- or from the debug console, so assume that we were passed a table of args
	-- directly, and assign it to a new variable (luaArgs).
	--]]
	local fargs, pargs, luaArgs
	if type(frame.args) == 'table' and type(frame.getParent) == 'function' then
		if options.wrappers then
			--[[
			-- The wrappers option makes Module:Arguments look up arguments in
			-- either the frame argument table or the parent argument table, but
			-- not both. This means that users can use either the #invoke syntax
			-- or a wrapper template without the loss of performance associated
			-- with looking arguments up in both the frame and the parent frame.
			-- Module:Arguments will look up arguments in the parent frame
			-- if it finds the parent frame's title in options.wrapper;
			-- otherwise it will look up arguments in the frame object passed
			-- to getArgs.
			--]]
			local parent = frame:getParent()
			if not parent then
				fargs = frame.args
			else
				local title = parent:getTitle():gsub('/sandbox$', '')
				local found = false
				if matchesTitle(options.wrappers, title) then
					found = true
				elseif type(options.wrappers) == 'table' then
					for _,v in pairs(options.wrappers) do
						if matchesTitle(v, title) then
							found = true
							break
						end
					end
				end

				-- We test for false specifically here so that nil (the default) acts like true.
				if found or options.frameOnly == false then
					pargs = parent.args
				end
				if not found or options.parentOnly == false then
					fargs = frame.args
				end
			end
		else
			-- options.wrapper isn't set, so check the other options.
			if not options.parentOnly then
				fargs = frame.args
			end
			if not options.frameOnly then
				local parent = frame:getParent()
				pargs = parent and parent.args or nil
			end
		end
		if options.parentFirst then
			fargs, pargs = pargs, fargs
		end
	else
		luaArgs = frame
	end

	-- Set the order of precedence of the argument tables. If the variables are
	-- nil, nothing will be added to the table, which is how we avoid clashes
	-- between the frame/parent args and the Lua args.
	local argTables = {fargs}
	argTables[#argTables + 1] = pargs
	argTables[#argTables + 1] = luaArgs

	--[[
	-- Generate the tidyVal function. If it has been specified by the user, we
	-- use that; if not, we choose one of four functions depending on the
	-- options chosen. This is so that we don't have to call the options table
	-- every time the function is called.
	--]]
	local tidyVal = options.valueFunc
	if tidyVal then
		if type(tidyVal) ~= 'function' then
			error(
				"bad value assigned to option 'valueFunc'"
					.. '(function expected, got '
					.. type(tidyVal)
					.. ')',
				2
			)
		end
	elseif options.trim ~= false then
		if options.removeBlanks ~= false then
			tidyVal = tidyValDefault
		else
			tidyVal = tidyValTrimOnly
		end
	else
		if options.removeBlanks ~= false then
			tidyVal = tidyValRemoveBlanksOnly
		else
			tidyVal = tidyValNoChange
		end
	end

	--[[
	-- Set up the args, metaArgs and nilArgs tables. args will be the one
	-- accessed from functions, and metaArgs will hold the actual arguments. Nil
	-- arguments are memoized in nilArgs, and the metatable connects all of them
	-- together.
	--]]
	local args, metaArgs, nilArgs, metatable = {}, {}, {}, {}
	setmetatable(args, metatable)

	local function mergeArgs(tables)
		--[[
		-- Accepts multiple tables as input and merges their keys and values
		-- into one table. If a value is already present it is not overwritten;
		-- tables listed earlier have precedence. We are also memoizing nil
		-- values, which can be overwritten if they are 's' (soft).
		--]]
		for _, t in ipairs(tables) do
			for key, val in pairs(t) do
				if metaArgs[key] == nil and nilArgs[key] ~= 'h' then
					local tidiedVal = tidyVal(key, val)
					if tidiedVal == nil then
						nilArgs[key] = 's'
					else
						metaArgs[key] = tidiedVal
					end
				end
			end
		end
	end

	--[[
	-- Define metatable behaviour. Arguments are memoized in the metaArgs table,
	-- and are only fetched from the argument tables once. Fetching arguments
	-- from the argument tables is the most resource-intensive step in this
	-- module, so we try and avoid it where possible. For this reason, nil
	-- arguments are also memoized, in the nilArgs table. Also, we keep a record
	-- in the metatable of when pairs and ipairs have been called, so we do not
	-- run pairs and ipairs on the argument tables more than once. We also do
	-- not run ipairs on fargs and pargs if pairs has already been run, as all
	-- the arguments will already have been copied over.
	--]]

	metatable.__index = function (t, key)
		--[[
		-- Fetches an argument when the args table is indexed. First we check
		-- to see if the value is memoized, and if not we try and fetch it from
		-- the argument tables. When we check memoization, we need to check
		-- metaArgs before nilArgs, as both can be non-nil at the same time.
		-- If the argument is not present in metaArgs, we also check whether
		-- pairs has been run yet. If pairs has already been run, we return nil.
		-- This is because all the arguments will have already been copied into
		-- metaArgs by the mergeArgs function, meaning that any other arguments
		-- must be nil.
		--]]
		if type(key) == 'string' then
			key = options.translate[key]
		end
		local val = metaArgs[key]
		if val ~= nil then
			return val
		elseif metatable.donePairs or nilArgs[key] then
			return nil
		end
		for _, argTable in ipairs(argTables) do
			local argTableVal = tidyVal(key, argTable[key])
			if argTableVal ~= nil then
				metaArgs[key] = argTableVal
				return argTableVal
			end
		end
		nilArgs[key] = 'h'
		return nil
	end

	metatable.__newindex = function (t, key, val)
		-- This function is called when a module tries to add a new value to the
		-- args table, or tries to change an existing value.
		if type(key) == 'string' then
			key = options.translate[key]
		end
		if options.readOnly then
			error(
				'could not write to argument table key "'
					.. tostring(key)
					.. '"; the table is read-only',
				2
			)
		elseif options.noOverwrite and args[key] ~= nil then
			error(
				'could not write to argument table key "'
					.. tostring(key)
					.. '"; overwriting existing arguments is not permitted',
				2
			)
		elseif val == nil then
			--[[
			-- If the argument is to be overwritten with nil, we need to erase
			-- the value in metaArgs, so that __index, __pairs and __ipairs do
			-- not use a previous existing value, if present; and we also need
			-- to memoize the nil in nilArgs, so that the value isn't looked
			-- up in the argument tables if it is accessed again.
			--]]
			metaArgs[key] = nil
			nilArgs[key] = 'h'
		else
			metaArgs[key] = val
		end
	end

	local function translatenext(invariant)
		local k, v = next(invariant.t, invariant.k)
		invariant.k = k
		if k == nil then
			return nil
		elseif type(k) ~= 'string' or not options.backtranslate then
			return k, v
		else
			local backtranslate = options.backtranslate[k]
			if backtranslate == nil then
				-- Skip this one. This is a tail call, so this won't cause stack overflow
				return translatenext(invariant)
			else
				return backtranslate, v
			end
		end
	end

	metatable.__pairs = function ()
		-- Called when pairs is run on the args table.
		if not metatable.donePairs then
			mergeArgs(argTables)
			metatable.donePairs = true
		end
		return translatenext, { t = metaArgs }
	end

	local function inext(t, i)
		-- This uses our __index metamethod
		local v = t[i + 1]
		if v ~= nil then
			return i + 1, v
		end
	end

	metatable.__ipairs = function (t)
		-- Called when ipairs is run on the args table.
		return inext, t, 0
	end

	return args
end

return arguments</text>
      <sha1>5qx9tzlul9ser30uxj9nbasjt92cevn</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler</title>
    <ns>828</ns>
    <id>39772274</id>
    <revision>
      <id>617942873</id>
      <parentid>616811662</parentid>
      <timestamp>2014-07-22T05:08:26Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>allow invocations specifying the page parameter to use the mw.loadData optimisations, and don't call mw.title.new every time</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="7871">--------------------------------------------------------------------------------
--                                                                            --
--                              CATEGORY HANDLER                              --
--                                                                            --
--      This module implements the {{category handler}} template in Lua,      --
--      with a few improvements: all namespaces and all namespace aliases     --
--      are supported, and namespace names are detected automatically for     --
--      the local wiki. This module requires [[Module:Namespace detect]]      --
--      and [[Module:Yesno]] to be available on the local wiki. It can be     --
--      configured for different wikis by altering the values in              --
--      [[Module:Category handler/config]], and pages can be blacklisted      --
--      from categorisation by using [[Module:Category handler/blacklist]].   --
--                                                                            --
--------------------------------------------------------------------------------

-- Load required modules
local yesno = require('Module:Yesno')

-- Lazily load things we don't always need
local mShared, mappings

local p = {}

--------------------------------------------------------------------------------
-- Helper functions
--------------------------------------------------------------------------------

local function trimWhitespace(s, removeBlanks)
	if type(s) ~= 'string' then
		return s
	end
	s = s:match('^%s*(.-)%s*$')
	if removeBlanks then
		if s ~= '' then
			return s
		else
			return nil
		end
	else
		return s
	end
end

--------------------------------------------------------------------------------
-- CategoryHandler class
--------------------------------------------------------------------------------

local CategoryHandler = {}
CategoryHandler.__index = CategoryHandler

function CategoryHandler.new(data, args)
	local obj = setmetatable({ _data = data, _args = args }, CategoryHandler)
	
	-- Set the title object
	do
		local pagename = obj:parameter('demopage')
		local success, titleObj
		if pagename then
			success, titleObj = pcall(mw.title.new, pagename)
		end
		if success and titleObj then
			obj.title = titleObj
			if titleObj == mw.title.getCurrentTitle() then
				obj._usesCurrentTitle = true
			end
		else
			obj.title = mw.title.getCurrentTitle()
			obj._usesCurrentTitle = true
		end
	end

	-- Set suppression parameter values
	for _, key in ipairs{'nocat', 'categories'} do
		local value = obj:parameter(key)
		value = trimWhitespace(value, true)
		obj['_' .. key] = yesno(value)
	end
	do
		local subpage = obj:parameter('subpage')
		local category2 = obj:parameter('category2')
		if type(subpage) == 'string' then
			subpage = mw.ustring.lower(subpage)
		end
		if type(category2) == 'string' then
			subpage = mw.ustring.lower(category2)
		end
		obj._subpage = trimWhitespace(subpage, true)
		obj._category2 = trimWhitespace(category2) -- don't remove blank values
	end
	return obj
end

function CategoryHandler:parameter(key)
	local parameterNames = self._data.parameters[key]
	local pntype = type(parameterNames)
	if pntype == 'string' or pntype == 'number' then
		return self._args[parameterNames]
	elseif pntype == 'table' then
		for _, name in ipairs(parameterNames) do
			local value = self._args[name]
			if value ~= nil then
				return value
			end
		end
		return nil
	else
		error(string.format(
			'invalid config key "%s"',
			tostring(key)
		), 2)
	end
end

function CategoryHandler:isSuppressedByArguments()
	return
		-- See if a category suppression argument has been set.
		self._nocat == true
		or self._categories == false
		or (
			self._category2
			and self._category2 ~= self._data.category2Yes
			and self._category2 ~= self._data.category2Negative
		)

		-- Check whether we are on a subpage, and see if categories are
		-- suppressed based on our subpage status.
		or self._subpage == self._data.subpageNo and self.title.isSubpage
		or self._subpage == self._data.subpageOnly and not self.title.isSubpage
end

function CategoryHandler:shouldSkipBlacklistCheck()
	-- Check whether the category suppression arguments indicate we
	-- should skip the blacklist check.
	return self._nocat == false
		or self._categories == true
		or self._category2 == self._data.category2Yes
end

function CategoryHandler:matchesBlacklist()
	if self._usesCurrentTitle then
		return self._data.currentTitleMatchesBlacklist
	else
		mShared = mShared or require('Module:Category handler/shared')
		return mShared.matchesBlacklist(
			self.title.prefixedText,
			mw.loadData('Module:Category handler/blacklist')
		)
	end
end

function CategoryHandler:isSuppressed()
	-- Find if categories are suppressed by either the arguments or by
	-- matching the blacklist.
	return self:isSuppressedByArguments()
		or not self:shouldSkipBlacklistCheck() and self:matchesBlacklist()
end

function CategoryHandler:getNamespaceParameters()
	if self._usesCurrentTitle then
		return self._data.currentTitleNamespaceParameters
	else
		if not mappings then
			mShared = mShared or require('Module:Category handler/shared')
			mappings = mShared.getParamMappings(true) -- gets mappings with mw.loadData
		end
		return mShared.getNamespaceParameters(
			self.title,
			mappings
		)
	end
end

function CategoryHandler:namespaceParametersExist()
	-- Find whether any namespace parameters have been specified.
	-- We use the order "all" --&gt; namespace params --&gt; "other" as this is what
	-- the old template did.
	if self:parameter('all') then
		return true
	end
	if not mappings then
		mShared = mShared or require('Module:Category handler/shared')
		mappings = mShared.getParamMappings(true) -- gets mappings with mw.loadData
	end
	for ns, params in pairs(mappings) do
		for i, param in ipairs(params) do
			if self._args[param] then
				return true
			end
		end
	end
	if self:parameter('other') then
		return true
	end
	return false
end

function CategoryHandler:getCategories()
	local params = self:getNamespaceParameters()
	local nsCategory
	for i, param in ipairs(params) do
		local value = self._args[param]
		if value ~= nil then
			nsCategory = value
			break
		end
	end
	if nsCategory ~= nil or self:namespaceParametersExist() then
		-- Namespace parameters exist - advanced usage.
		if nsCategory == nil then
			nsCategory = self:parameter('other')
		end
		local ret = {self:parameter('all')}
		local numParam = tonumber(nsCategory)
		if numParam and numParam &gt;= 1 and math.floor(numParam) == numParam then
			-- nsCategory is an integer
			ret[#ret + 1] = self._args[numParam]
		else
			ret[#ret + 1] = nsCategory
		end
		if #ret &lt; 1 then
			return nil
		else
			return table.concat(ret)
		end
	elseif self._data.defaultNamespaces[self.title.namespace] then
		-- Namespace parameters don't exist, simple usage.
		return self._args[1]
	end
	return nil
end

--------------------------------------------------------------------------------
-- Exports
--------------------------------------------------------------------------------

local p = {}

function p._exportClasses()
	-- Used for testing purposes.
	return {
		CategoryHandler = CategoryHandler
	}
end

function p._main(args, data)
	data = data or mw.loadData('Module:Category handler/data')
	local handler = CategoryHandler.new(data, args)
	if handler:isSuppressed() then
		return nil
	end
	return handler:getCategories()
end

function p.main(frame, data)
	data = data or mw.loadData('Module:Category handler/data')
	local args = require('Module:Arguments').getArgs(frame, {
		wrappers = data.wrappers,
		valueFunc = function (k, v)
			v = trimWhitespace(v)
			if type(k) == 'number' then
				if v ~= '' then
					return v
				else
					return nil
				end
			else
				return v
			end
		end
	})
	return p._main(args, data)
end

return p</text>
      <sha1>letwavu3yvlayfzew66uuwixmwebq5b</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/blacklist</title>
    <ns>828</ns>
    <id>43232926</id>
    <revision>
      <id>757409491</id>
      <parentid>757402070</parentid>
      <timestamp>2016-12-30T14:53:53Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>on second thoughts, blacklisting sandboxes for all templates is probably a bad idea</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="764">-- This module contains the blacklist used by [[Module:Category handler]].
-- Pages that match Lua patterns in this list will not be categorised unless
-- categorisation is explicitly requested.

return {
	'^Main Page$', -- don't categorise the main page.

	-- Don't categorise the following pages or their subpages.
	-- "%f[/\0]" matches if the next character is "/" or the end of the string.
	'^Wikipedia:Cascade%-protected items%f[/\0]',
	'^User:UBX%f[/\0]', -- The userbox "template" space.
	'^User talk:UBX%f[/\0]',

	-- Don't categorise subpages of these pages, but allow
	-- categorisation of the base page.
	'^Wikipedia:Template messages/.*$',

	-- Don't categorise archives.
	'/[aA]rchive',
	"^Wikipedia:Administrators' noticeboard/IncidentArchive%d+$",
}</text>
      <sha1>hwue3i1eua4tsdxlsbcs4f5syudywbe</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/config</title>
    <ns>828</ns>
    <id>42291997</id>
    <revision>
      <id>616764079</id>
      <parentid>616045566</parentid>
      <timestamp>2014-07-13T09:05:36Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:Category handler/config: [[WP:High-risk templates|High-risk Lua module]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="5755">--------------------------------------------------------------------------------
--            [[Module:Category handler]] configuration data                  --
--       Language-specific parameter names and values can be set here.        --
--       For blacklist config, see [[Module:Category handler/blacklist]].     --
--------------------------------------------------------------------------------

local cfg = {} -- Don't edit this line.

--------------------------------------------------------------------------------
--                       Start configuration data                             --
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--                              Parameter names                               --
-- These configuration items specify custom parameter names.                  --
-- To add one extra name, you can use this format:                            --
--                                                                            --
-- foo = 'parameter name',                                                    --
--                                                                            --
-- To add multiple names, you can use this format:                            --
--                                                                            --
-- foo = {'parameter name 1', 'parameter name 2', 'parameter name 3'},        --
--------------------------------------------------------------------------------

cfg.parameters = {
	
	-- The nocat and categories parameter suppress
	-- categorisation. They are used with Module:Yesno, and work as follows:
	--
	-- cfg.nocat:
	-- Result of yesno()                        Effect
	-- true                                     Categorisation is suppressed
	-- false                                    Categorisation is allowed, and
	--                                          the blacklist check is skipped
	-- nil                                      Categorisation is allowed
	--
	-- cfg.categories:
	-- Result of yesno()                        Effect
	-- true                                     Categorisation is allowed, and
	--                                          the blacklist check is skipped
	-- false                                    Categorisation is suppressed
	-- nil                                      Categorisation is allowed
	nocat = 'nocat',
	categories = 'categories',
	
	-- The parameter name for the legacy "category2" parameter. This skips the
	-- blacklist if set to the cfg.category2Yes value, and suppresses
	-- categorisation if present but equal to anything other than
	-- cfg.category2Yes or cfg.category2Negative.
	category2 = 'category2',
	
	-- cfg.subpage is the parameter name to specify how to behave on subpages.
	subpage = 'subpage',
	
	-- The parameter for data to return in all namespaces.
	all = 'all',
	
	-- The parameter name for data to return if no data is specified for the
	-- namespace that is detected.
	other = 'other',
	
	-- The parameter name used to specify a page other than the current page;
	-- used for testing and demonstration.
	demopage = 'page',
}

--------------------------------------------------------------------------------
--                              Parameter values                              --
-- These are set values that can be used with certain parameters. Only one    --
-- value can be specified, like this:                                         --
--                                                                            --
-- cfg.foo = 'value name'                                                     --                                               --
--------------------------------------------------------------------------------

-- The following settings are used with the cfg.category2 parameter. Setting
-- cfg.category2 to cfg.category2Yes skips the blacklist, and if cfg.category2
-- is present but equal to anything other than cfg.category2Yes or
-- cfg.category2Negative then it supresses cateogrisation.
cfg.category2Yes = 'yes'
cfg.category2Negative = '¬'

-- The following settings are used with the cfg.subpage parameter.
-- cfg.subpageNo is the value to specify to not categorise on subpages;
-- cfg.subpageOnly is the value to specify to only categorise on subpages.
cfg.subpageNo = 'no'
cfg.subpageOnly = 'only'

--------------------------------------------------------------------------------
--                           Default namespaces                               --
-- This is a table of namespaces to categorise by default. The keys are the   --
-- namespace numbers.                                                         --
--------------------------------------------------------------------------------

cfg.defaultNamespaces = {
	[  0] = true, -- main
	[  6] = true, -- file
	[ 12] = true, -- help
	[ 14] = true, -- category
	[100] = true, -- portal
	[108] = true, -- book
}

--------------------------------------------------------------------------------
--                                Wrappers                                    --
-- This is a wrapper template or a list of wrapper templates to be passed to  --
-- [[Module:Arguments]].                                                      --
--------------------------------------------------------------------------------

cfg.wrappers = 'Template:Category handler'

--------------------------------------------------------------------------------
--                           End configuration data                           --
--------------------------------------------------------------------------------

return cfg -- Don't edit this line.</text>
      <sha1>6ga9hbq2pdwalsvx68i53dmbr421rq5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/data</title>
    <ns>828</ns>
    <id>43233647</id>
    <revision>
      <id>616764105</id>
      <parentid>616020360</parentid>
      <timestamp>2014-07-13T09:05:55Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:Category handler/data: [[WP:High-risk templates|High-risk Lua module]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="631">-- This module assembles data to be passed to [[Module:Category handler]] using
-- mw.loadData. This includes the configuration data and whether the current
-- page matches the title blacklist.

local data = require('Module:Category handler/config')
local mShared = require('Module:Category handler/shared')
local blacklist = require('Module:Category handler/blacklist')
local title = mw.title.getCurrentTitle()

data.currentTitleMatchesBlacklist = mShared.matchesBlacklist(
	title.prefixedText,
	blacklist
)

data.currentTitleNamespaceParameters = mShared.getNamespaceParameters(
	title,
	mShared.getParamMappings()
)

return data</text>
      <sha1>k26mwixuaeijisfddb0sxkg82iux8v4</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/shared</title>
    <ns>828</ns>
    <id>43232937</id>
    <revision>
      <id>616764145</id>
      <parentid>616020201</parentid>
      <timestamp>2014-07-13T09:06:15Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:Category handler/shared: [[WP:High-risk templates|High-risk Lua module]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="888">-- This module contains shared functions used by [[Module:Category handler]]
-- and its submodules.

local p = {}

function p.matchesBlacklist(page, blacklist)
	for i, pattern in ipairs(blacklist) do
		local match = mw.ustring.match(page, pattern)
		if match then
			return true
		end
	end
	return false
end

function p.getParamMappings(useLoadData)
	local dataPage = 'Module:Namespace detect/data'
	if useLoadData then
		return mw.loadData(dataPage).mappings
	else
		return require(dataPage).mappings
	end
end

function p.getNamespaceParameters(titleObj, mappings)
	-- We don't use title.nsText for the namespace name because it adds
	-- underscores.
	local mappingsKey
	if titleObj.isTalkPage then
		mappingsKey = 'talk'
	else
		mappingsKey = mw.site.namespaces[titleObj.namespace].name
	end
	mappingsKey = mw.ustring.lower(mappingsKey)
	return mappings[mappingsKey] or {}
end

return p</text>
      <sha1>omlsnhudxz6juptvtxz7ns97jutbzc5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Check for unknown parameters</title>
    <ns>828</ns>
    <id>42286729</id>
    <revision>
      <id>726655795</id>
      <parentid>726655742</parentid>
      <timestamp>2016-06-23T14:41:43Z</timestamp>
      <contributor>
        <username>Frietjes</username>
        <id>13791031</id>
      </contributor>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="2400">-- This module may be used to compare the arguments passed to the parent
-- with a list of arguments, returning a specified result if an argument is
-- not on the list
local p = {}

local function trim(s)
	return s:match('^%s*(.-)%s*$')
end

local function isnotempty(s)
	return s and trim(s) ~= ''
end

function p.check (frame)
	local args = frame.args
	local pargs = frame:getParent().args
	local ignoreblank = isnotempty(frame.args['ignoreblank'])
	local showblankpos = isnotempty(frame.args['showblankpositional'])
	local knownargs = {}
	local unknown = frame.args['unknown'] or 'Found _VALUE_, '
	local preview = frame.args['preview']

	local values = {}
	local res = {}
	local regexps = {}

	-- create the list of known args, regular expressions, and the return string
	for k, v in pairs(args) do
		if type(k) == 'number' then
			v = trim(v)
			knownargs[v] = 1
		elseif k:find('^regexp[1-9][0-9]*$') then
			table.insert(regexps, '^' .. v .. '$')
		end
	end
	if isnotempty(preview) then 
		preview = '&lt;div class="hatnote" style="color:red"&gt;&lt;strong&gt;Warning:&lt;/strong&gt; ' .. preview .. ' (this message is shown only in preview).&lt;/div&gt;'
	elseif preview == nil then
		preview = unknown
	end

	-- loop over the parent args, and make sure they are on the list
	for k, v in pairs(pargs) do
		if type(k) == 'string' and knownargs[k] == nil then
			local knownflag = false
			for i, regexp in ipairs(regexps) do
				if mw.ustring.match(k, regexp) then
					knownflag = true
					break
				end
			end
			if not knownflag and ( not ignoreblank or isnotempty(v) )  then
				k = mw.ustring.gsub(k, '[^%w\-_ ]', '?')
				table.insert(values, k)
			end
		elseif type(k) == 'number' and 
			knownargs[tostring(k)] == nil and
			( showblankpos or isnotempty(v) )
		then
			local vlen = mw.ustring.len(v)
			v = mw.ustring.sub(v, 1, (vlen &lt; 25) and vlen or 25) 
			v = mw.ustring.gsub(v, '[^%w\-_ ]', '?')
			table.insert(values, k .. ' = ' .. v .. ((vlen &gt;= 25) and ' ...' or ''))
		end
	end

	-- add resuls to the output tables
	if #values &gt; 0 then
		if frame:preprocess( "{{REVISIONID}}" ) == "" then
			unknown = preview
		end
		for k, v in pairs(values) do
			if v == '' then
			-- Fix odd bug for | = which gets stripped to the empty string and
			-- breaks category links
			v = ' '
			end
			local r =  unknown:gsub('_VALUE_', v)
			table.insert(res, r)
		end
	end

	return table.concat(res)
end

return p</text>
      <sha1>hrayw1t1r2ij1wg65qi0jh0x6y31ba4</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Check isxn</title>
    <ns>828</ns>
    <id>47420247</id>
    <revision>
      <id>783139241</id>
      <parentid>712698918</parentid>
      <timestamp>2017-05-31T10:38:54Z</timestamp>
      <contributor>
        <username>The Anome</username>
        <id>76</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Check isxn]]": [[WP:High-risk templates|High-risk Lua module]] ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="5972">-- This template is a copy of the ISXN validation code from [[Module:Citation/CS1]]
-- which allows for validating ISBN, ISMN, and ISSN without invoking a citation template

local p = {}

--[[--------------------------&lt; IS _ V A L I D _ I S X N &gt;-----------------------------------------------------

ISBN-10 and ISSN validator code calculates checksum across all isbn/issn digits including the check digit. ISBN-13 is checked in check_isbn().
If the number is valid the result will be 0. Before calling this function, issbn/issn must be checked for length and stripped of dashes,
spaces and other non-isxn characters.

]]

local function is_valid_isxn (isxn_str, len)
	local temp = 0;
	isxn_str = { isxn_str:byte(1, len) };	-- make a table of byte values '0' → 0x30 .. '9'  → 0x39, 'X' → 0x58
	len = len+1;							-- adjust to be a loop counter
	for i, v in ipairs( isxn_str ) do		-- loop through all of the bytes and calculate the checksum
		if v == string.byte( "X" ) then		-- if checkdigit is X (compares the byte value of 'X' which is 0x58)
			temp = temp + 10*( len - i );	-- it represents 10 decimal
		else
			temp = temp + tonumber( string.char(v) )*(len-i);
		end
	end
	return temp % 11 == 0;					-- returns true if calculation result is zero
end


--[[--------------------------&lt; IS _ V A L I D _ I S X N  _ 1 3 &gt;----------------------------------------------

ISBN-13 and ISMN validator code calculates checksum across all 13 isbn/ismn digits including the check digit.
If the number is valid, the result will be 0. Before calling this function, isbn-13/ismn must be checked for length
and stripped of dashes, spaces and other non-isxn-13 characters.

]]

local function is_valid_isxn_13 (isxn_str)
	local temp=0;
	
	isxn_str = { isxn_str:byte(1, 13) };										-- make a table of byte values '0' → 0x30 .. '9'  → 0x39
	for i, v in ipairs( isxn_str ) do
		temp = temp + (3 - 2*(i % 2)) * tonumber( string.char(v) );				-- multiply odd index digits by 1, even index digits by 3 and sum; includes check digit
	end
	return temp % 10 == 0;														-- sum modulo 10 is zero when isbn-13/ismn is correct
end

--[[--------------------------&lt; C H E C K _ I S B N &gt;------------------------------------------------------------

Determines whether an ISBN string is valid

]]

local function check_isbn( isbn_str, error_string )
	if nil ~= isbn_str:match("[^%s-0-9X]") then -- fail if isbn_str contains anything but digits, hyphens, or the uppercase X
		return error_string;
	end
	isbn_str = isbn_str:gsub( "-", "" ):gsub( " ", "" );	-- remove hyphens and spaces
	local len = isbn_str:len();
 
	if len ~= 10 and len ~= 13 then
		return error_string;
	end

	if len == 10 then
		if isbn_str:match( "^%d*X?$" ) == nil then 
			return error_string; 
		end
		return is_valid_isxn(isbn_str, 10) and '' or error_string;
	else
		local temp = 0;
		if isbn_str:match( "^97[89]%d*$" ) == nil then -- isbn13 begins with 978 or 979; ismn begins with 979
			return error_string; 
		end
		return is_valid_isxn_13 (isbn_str) and '' or error_string;
	end
end

--[[--------------------------&lt; C H E C K _ I S M N &gt;------------------------------------------------------------

Determines whether an ISMN string is valid.  Similar to isbn-13, ismn is 13 digits begining 979-0-... and uses the
same check digit calculations.  See http://www.ismn-international.org/download/Web_ISMN_Users_Manual_2008-6.pdf
section 2, pages 9–12.

]]

local function check_ismn (id, error_string)
	local text;
	local valid_ismn = true;

	id=id:gsub( "[%s-–]", "" );													-- strip spaces, hyphens, and endashes from the ismn

	if 13 ~= id:len() or id:match( "^9790%d*$" ) == nil then					-- ismn must be 13 digits and begin 9790
		valid_ismn = false;
	else
		valid_ismn=is_valid_isxn_13 (id);										-- validate ismn
	end

	return valid_ismn and '' or error_string
end

--[[--------------------------&lt; I S S N &gt;----------------------------------------------------------------------

Validate and format an issn.  This code fixes the case where an editor has included an ISSN in the citation but has separated the two groups of four
digits with a space.  When that condition occurred, the resulting link looked like this:

	|issn=0819 4327 gives: [http://www.worldcat.org/issn/0819 4327 0819 4327]  -- can't have spaces in an external link
	
This code now prevents that by inserting a hyphen at the issn midpoint.  It also validates the issn for length and makes sure that the checkdigit agrees
with the calculated value.  Incorrect length (8 digits), characters other than 0-9 and X, or checkdigit / calculated value mismatch will all cause a check issn
error message.

]]

local function check_issn(id, error_string)
	local issn_copy = id;		-- save a copy of unadulterated issn; use this version for display if issn does not validate
	local text;
	local valid_issn = true;

	if not id:match ('^%d%d%d%d%-%d%d%d[%dX]$') then
		return error_string;
	end
	
	id=id:gsub( "[%s-–]", "" );									-- strip spaces, hyphens, and endashes from the issn

	if 8 ~= id:len() or nil == id:match( "^%d*X?$" ) then		-- validate the issn: 8 digits long, containing only 0-9 or X in the last position
		valid_issn=false;										-- wrong length or improper character
	else
		valid_issn=is_valid_isxn(id, 8);						-- validate issn
	end

	return valid_issn and '' or error_string
end


------------------------------&lt; E N T R Y   P O I N T S &gt;--------------------------------------------------====

function p.check_isbn(frame)
	return check_isbn(frame.args[1] or frame:getParent().args[1], frame.args['error'] or frame:getParent().args['error'] or 'error')
end

function p.check_ismn(frame)
	return check_ismn(frame.args[1] or frame:getParent().args[1], frame.args['error'] or frame:getParent().args['error'] or 'error')
end

function p.check_issn(frame)
	return check_issn(frame.args[1] or frame:getParent().args[1], frame.args['error'] or frame:getParent().args['error'] or 'error')
end

return p</text>
      <sha1>m39a8k5gmtbg6x3k2f7rizj3jk5on20</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1</title>
    <ns>828</ns>
    <id>38573037</id>
    <revision>
      <id>845307000</id>
      <parentid>845164999</parentid>
      <timestamp>2018-06-10T22:34:34Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>synch from sandbox;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="166876">
local cs1 ={};

--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local dates, year_date_check, reformat_dates, date_hyphen_to_dash,				-- functions in Module:Citation/CS1/Date_validation
	date_name_xlate

local is_set, in_array, substitute, error_comment, set_error, select_one,		-- functions in Module:Citation/CS1/Utilities
	add_maint_cat, wrap_style, safe_for_italics, is_wikilink, make_wikilink;

local z ={};																	-- tables in Module:Citation/CS1/Utilities

local extract_ids, extract_id_access_levels, build_id_list, is_embargoed;		-- functions in Module:Citation/CS1/Identifiers

local make_coins_title, get_coins_pages, COinS;									-- functions in Module:Citation/CS1/COinS

local cfg = {};																	-- table of configuration tables that are defined in Module:Citation/CS1/Configuration
local whitelist = {};															-- table of tables listing valid template parameter names; defined in Module:Citation/CS1/Whitelist


--[[--------------------------&lt; P A G E   S C O P E   V A R I A B L E S &gt;--------------------------------------

delare variables here that have page-wide scope that are not brought in from other modules; thatare created here
and used here

]]

local added_deprecated_cat;														-- boolean flag so that the category is added only once
local added_prop_cats = {};														-- list of property categories that have been added to z.properties_cats
local added_vanc_errs;															-- boolean flag so we only emit one Vancouver error / category

local Frame;																	-- holds the module's frame table


--[[--------------------------&lt; F I R S T _ S E T &gt;------------------------------------------------------------

Locates and returns the first set value in a table of values where the order established in the table,
left-to-right (or top-to-bottom), is the order in which the values are evaluated.  Returns nil if none are set.

This version replaces the original 'for _, val in pairs do' and a similar version that used ipairs.  With the pairs
version the order of evaluation could not be guaranteed.  With the ipairs version, a nil value would terminate
the for-loop before it reached the actual end of the list.

]]

local function first_set (list, count)
	local i = 1;
	while i &lt;= count do															-- loop through all items in list
		if is_set( list[i] ) then
			return list[i];														-- return the first set list member
		end
		i = i + 1;																-- point to next
	end
end


--[[--------------------------&lt; A D D _ P R O P _ C A T &gt;--------------------------------------------------------

Adds a category to z.properties_cats using names from the configuration file with additional text if any.

foreign_lang_source and foreign_lang_source_2 keys have a language code appended to them so that multiple languages
may be categorized but multiples of the same language are not categorized.

added_prop_cats is a table declared in page scope variables above

]]

local function add_prop_cat (key, arguments)
	if not added_prop_cats [key] then
		added_prop_cats [key] = true;											-- note that we've added this category
		key = key:gsub ('(foreign_lang_source_?2?)%a%a%a?', '%1');				-- strip lang code from keyname
		table.insert( z.properties_cats, substitute (cfg.prop_cats [key], arguments));		-- make name then add to table
	end
end


--[[--------------------------&lt; A D D _ V A N C _ E R R O R &gt;----------------------------------------------------

Adds a single Vancouver system error message to the template's output regardless of how many error actually exist.
To prevent duplication, added_vanc_errs is nil until an error message is emitted.

added_vanc_errs is a boolean declared in page scope variables above

]]

local function add_vanc_error (source)
	if not added_vanc_errs then
		added_vanc_errs = true;													-- note that we've added this category
		table.insert( z.message_tail, { set_error( 'vancouver', {source}, true ) } );
	end
end


--[[--------------------------&lt; I S _ S C H E M E &gt;------------------------------------------------------------

does this thing that purports to be a uri scheme seem to be a valid scheme?  The scheme is checked to see if it
is in agreement with http://tools.ietf.org/html/std66#section-3.1 which says:
	Scheme names consist of a sequence of characters beginning with a
   letter and followed by any combination of letters, digits, plus
   ("+"), period ("."), or hyphen ("-").

returns true if it does, else false

]]

local function is_scheme (scheme)
	return scheme and scheme:match ('^%a[%a%d%+%.%-]*:');						-- true if scheme is set and matches the pattern
end


--[=[-------------------------&lt; I S _ D O M A I N _ N A M E &gt;--------------------------------------------------

Does this thing that purports to be a domain name seem to be a valid domain name?

Syntax defined here: http://tools.ietf.org/html/rfc1034#section-3.5
BNF defined here: https://tools.ietf.org/html/rfc4234
Single character names are generally reserved; see https://tools.ietf.org/html/draft-ietf-dnsind-iana-dns-01#page-15;
	see also [[Single-letter second-level domain]]
list of tlds: https://www.iana.org/domains/root/db

rfc952 (modified by rfc 1123) requires the first and last character of a hostname to be a letter or a digit.  Between
the first and last characters the name may use letters, digits, and the hyphen.

Also allowed are IPv4 addresses. IPv6 not supported

domain is expected to be stripped of any path so that the last character in the last character of the tld.  tld
is two or more alpha characters.  Any preceding '//' (from splitting a url with a scheme) will be stripped
here.  Perhaps not necessary but retained incase it is necessary for IPv4 dot decimal.

There are several tests:
	the first character of the whole domain name including subdomains must be a letter or a digit
	internationalized domain name (ascii characters with .xn-- ASCII Compatible Encoding (ACE) prefix xn-- in the tld) see https://tools.ietf.org/html/rfc3490
	single-letter/digit second-level domains in the .org and .cash TLDs
	q, x, and z SL domains in the .com TLD
	i and q SL domains in the .net TLD
	single-letter SL domains in the ccTLDs (where the ccTLD is two letters)
	two-character SL domains in gTLDs (where the gTLD is two or more letters)
	three-plus-character SL domains in gTLDs (where the gTLD is two or more letters)
	IPv4 dot-decimal address format; TLD not allowed

returns true if domain appears to be a proper name and tld or IPv4 address, else false

]=]

local function is_domain_name (domain)
	if not domain then
		return false;															-- if not set, abandon
	end
	
	domain = domain:gsub ('^//', '');											-- strip '//' from domain name if present; done here so we only have to do it once
	
	if not domain:match ('^[%a%d]') then										-- first character must be letter or digit
		return false;
	end
																				-- Do most common case first
	if domain:match ('%f[%a%d][%a%d][%a%d%-]+[%a%d]%.%a%a+$') then				-- three or more character hostname.hostname or hostname.tld
		return true;
	elseif domain:match ('%f[%a%d][%a%d][%a%d%-]+[%a%d]%.xn%-%-[%a%d]+$') then	-- internationalized domain name with ACE prefix
		return true;
	elseif domain:match ('%f[%a%d][%a%d]%.cash$') then							-- one character/digit .cash hostname
		return true;
	elseif domain:match ('%f[%a%d][%a%d]%.org$') then							-- one character/digit .org hostname
		return true;
	elseif domain:match ('%f[%a][qxz]%.com$') then								-- assigned one character .com hostname (x.com times out 2015-12-10)
		return true;
	elseif domain:match ('%f[%a][iq]%.net$') then								-- assigned one character .net hostname (q.net registered but not active 2015-12-10)
		return true;
	elseif domain:match ('%f[%a%d][%a%d]%.%a%a$') then							-- one character hostname and cctld (2 chars)
		return true;
	elseif domain:match ('%f[%a%d][%a%d][%a%d]%.%a%a+$') then					-- two character hostname and tld
		return true;
	elseif domain:match ('^%d%d?%d?%.%d%d?%d?%.%d%d?%d?%.%d%d?%d?') then		-- IPv4 address
		return true;
	else
		return false;
	end
end


--[[--------------------------&lt; I S _ U R L &gt;------------------------------------------------------------------

returns true if the scheme and domain parts of a url appear to be a valid url; else false.

This function is the last step in the validation process.  This function is separate because there are cases that
are not covered by split_url(), for example is_parameter_ext_wikilink() which is looking for bracketted external
wikilinks.

]]

local function is_url (scheme, domain)
	if is_set (scheme) then														-- if scheme is set check it and domain
		return is_scheme (scheme) and is_domain_name (domain);
	else
		return is_domain_name (domain);											-- scheme not set when url is protocol relative
	end
end


--[[--------------------------&lt; S P L I T _ U R L &gt;------------------------------------------------------------

Split a url into a scheme, authority indicator, and domain.

First remove Fully Qualified Domain Name terminator (a dot following tld) (if any) and any path(/), query(?) or fragment(#).

If protocol relative url, return nil scheme and domain else return nil for both scheme and domain.

When not protocol relative, get scheme, authority indicator, and domain.  If there is an authority indicator (one
or more '/' characters immediately following the scheme's colon), make sure that there are only 2.

Strip off any port and path;

]]

local function split_url (url_str)
	local scheme, authority, domain;
	
	url_str = url_str:gsub ('([%a%d])%.?[/%?#].*$', '%1');						-- strip FQDN terminator and path(/), query(?), fragment (#) (the capture prevents false replacement of '//')

	if url_str:match ('^//%S*') then											-- if there is what appears to be a protocol relative url
		domain = url_str:match ('^//(%S*)')
	elseif url_str:match ('%S-:/*%S+') then										-- if there is what appears to be a scheme, optional authority indicator, and domain name
		scheme, authority, domain = url_str:match ('(%S-:)(/*)(%S+)');			-- extract the scheme, authority indicator, and domain portions
		authority = authority:gsub ('//', '', 1);								-- replace place 1 pair of '/' with nothing;
		if is_set(authority) then												-- if anything left (1 or 3+ '/' where authority should be) then
			return scheme;														-- return scheme only making domain nil which will cause an error message
		end
		domain = domain:gsub ('(%a):%d+', '%1');								-- strip port number if present
	end
	
	return scheme, domain;
end


--[[--------------------------&lt; L I N K _ P A R A M _ O K &gt;---------------------------------------------------

checks the content of |title-link=, |series-link=, |author-link= etc for properly formatted content: no wikilinks, no urls

Link parameters are to hold the title of a wikipedia article so none of the WP:TITLESPECIALCHARACTERS are allowed:
	# &lt; &gt; [ ] | { } _
except the underscore which is used as a space in wiki urls and # which is used for section links

returns false when the value contains any of these characters.

When there are no illegal characters, this function returns TRUE if value DOES NOT appear to be a valid url (the
|&lt;param&gt;-link= parameter is ok); else false when value appears to be a valid url (the |&lt;param&gt;-link= parameter is NOT ok).

]]

local function link_param_ok (value)
	local scheme, domain;
	if value:find ('[&lt;&gt;%[%]|{}]') then											-- if any prohibited characters
		return false;
	end

	scheme, domain = split_url (value);											-- get scheme or nil and domain or nil from url; 
	return not is_url (scheme, domain);											-- return true if value DOES NOT appear to be a valid url
end


--[[--------------------------&lt; L I N K _ T I T L E _ O K &gt;---------------------------------------------------

Use link_param_ok() to validate |&lt;param&gt;-link= value and its matching |&lt;title&gt;= value.

|&lt;title&gt;= may be wikilinked but not when |&lt;param&gt;-link= has a value.  This function emits an error message when
that condition exists

]]

local function link_title_ok (link, lorig, title, torig)
local orig;

	if is_set (link) then 														-- don't bother if &lt;param&gt;-link doesn't have a value
		if not link_param_ok (link) then										-- check |&lt;param&gt;-link= markup
			orig = lorig;														-- identify the failing link parameter
		elseif title:find ('%[%[') then											-- check |title= for wikilink markup
			orig = torig;														-- identify the failing |title= parameter
		end
	end

	if is_set (orig) then
		table.insert( z.message_tail, { set_error( 'bad_paramlink', orig)});	-- url or wikilink in |title= with |title-link=;
	end
end


--[[--------------------------&lt; C H E C K _ U R L &gt;------------------------------------------------------------

Determines whether a URL string appears to be valid.

First we test for space characters.  If any are found, return false.  Then split the url into scheme and domain
portions, or for protocol relative (//example.com) urls, just the domain.  Use is_url() to validate the two
portions of the url.  If both are valid, or for protocol relative if domain is valid, return true, else false.

Because it is different from a standard url, and because this module used external_link() to make external links
that work for standard and news: links, we validate newsgroup names here.  The specification for a newsgroup name
is at https://tools.ietf.org/html/rfc5536#section-3.1.4

]]

local function check_url( url_str )
	if nil == url_str:match ("^%S+$") then										-- if there are any spaces in |url=value it can't be a proper url
		return false;
	end
	local scheme, domain;

	scheme, domain = split_url (url_str);										-- get scheme or nil and domain or nil from url;
	
	if 'news:' == scheme then													-- special case for newsgroups
		return domain:match('^[%a%d%+%-_]+%.[%a%d%+%-_%.]*[%a%d%+%-_]$');
	end
	
	return is_url (scheme, domain);												-- return true if value appears to be a valid url
end


--[=[-------------------------&lt; I S _ P A R A M E T E R _ E X T _ W I K I L I N K &gt;----------------------------

Return true if a parameter value has a string that begins and ends with square brackets [ and ] and the first
non-space characters following the opening bracket appear to be a url.  The test will also find external wikilinks
that use protocol relative urls. Also finds bare urls.

The frontier pattern prevents a match on interwiki links which are similar to scheme:path urls.  The tests that
find bracketed urls are required because the parameters that call this test (currently |title=, |chapter=, |work=,
and |publisher=) may have wikilinks and there are articles or redirects like '//Hus' so, while uncommon, |title=[[//Hus]]
is possible as might be [[en://Hus]].

]=]

local function is_parameter_ext_wikilink (value)
local scheme, domain;

	if value:match ('%f[%[]%[%a%S*:%S+.*%]') then								-- if ext wikilink with scheme and domain: [xxxx://yyyyy.zzz]
		scheme, domain = split_url (value:match ('%f[%[]%[(%a%S*:%S+).*%]'));
	elseif value:match ('%f[%[]%[//%S+.*%]') then								-- if protocol relative ext wikilink: [//yyyyy.zzz]
		scheme, domain = split_url (value:match ('%f[%[]%[(//%S+).*%]'));
	elseif value:match ('%a%S*:%S+') then										-- if bare url with scheme; may have leading or trailing plain text
		scheme, domain = split_url (value:match ('(%a%S*:%S+)'));
	elseif value:match ('//%S+') then											-- if protocol relative bare url: //yyyyy.zzz; may have leading or trailing plain text
		scheme, domain = split_url (value:match ('(//%S+)'));					-- what is left should be the domain
	else
		return false;															-- didn't find anything that is obviously a url
	end

	return is_url (scheme, domain);												-- return true if value appears to be a valid url
end


--[[-------------------------&lt; C H E C K _ F O R _ U R L &gt;-----------------------------------------------------

loop through a list of parameters and their values.  Look at the value and if it has an external link, emit an error message.

]]

local function check_for_url (parameter_list)
local error_message = '';
	for k, v in pairs (parameter_list) do										-- for each parameter in the list
		if is_parameter_ext_wikilink (v) then									-- look at the value; if there is a url add an error message
			if is_set(error_message) then										-- once we've added the first portion of the error message ...
				error_message=error_message .. ", ";							-- ... add a comma space separator
			end
			error_message=error_message .. "&amp;#124;" .. k .. "=";				-- add the failed parameter
		end
	end
	if is_set (error_message) then												-- done looping, if there is an error message, display it
		table.insert( z.message_tail, { set_error( 'param_has_ext_link', {error_message}, true ) } );
	end
end


--[[--------------------------&lt; S A F E _ F O R _ U R L &gt;------------------------------------------------------

Escape sequences for content that will be used for URL descriptions

]]

local function safe_for_url( str )
	if str:match( "%[%[.-%]%]" ) ~= nil then 
		table.insert( z.message_tail, { set_error( 'wikilink_in_url', {}, true ) } );
	end
	
	return str:gsub( '[%[%]\n]', {	
		['['] = '&amp;#91;',
		[']'] = '&amp;#93;',
		['\n'] = ' ' } );
end


--[[--------------------------&lt; E X T E R N A L _ L I N K &gt;----------------------------------------------------

Format an external link with error checking

]]

local function external_link( URL, label, source, access)
	local error_str = "";
	local domain;
	local path;
	local base_url;
	
	if not is_set( label ) then
		label = URL;
		if is_set( source ) then
			error_str = set_error( 'bare_url_missing_title', { wrap_style ('parameter', source) }, false, " " );
		else
			error( cfg.messages["bare_url_no_origin"] );
		end			
	end
	if not check_url( URL ) then
		error_str = set_error( 'bad_url', {wrap_style ('parameter', source)}, false, " " ) .. error_str;
	end
	
	domain, path = URL:match ('^([/%.%-%+:%a%d]+)([/%?#].*)$');					-- split the url into scheme plus domain and path
	if path then																-- if there is a path portion
		path = path:gsub ('[%[%]]', {['[']='%5b',[']']='%5d'});					-- replace '[' and ']' with their percent encoded values
		URL=domain..path;														-- and reassemble
	end
	
	if is_set (access) then														-- access level (subscription, registration, limited)
		label = safe_for_url (label);											-- replace square brackets and newlines

		base_url = table.concat (												-- assemble external link with access signal
			{
			'&lt;span class="plainlinks"&gt;[',										-- opening css and url markup
			URL,																-- the url
			' ',																-- the required space
			label,
			'&lt;span style="padding-left:0.15em"&gt;',								-- signal spacing css
			cfg.presentation[access],											-- the appropriate icon
			'&lt;/span&gt;',															-- close signal spacing span
			']&lt;/span&gt;'															-- close url markup and plain links span
			});
	else
		base_url = table.concat({ "[", URL, " ", safe_for_url( label ), "]" });	-- no signal markup
	end
	
	return table.concat({ base_url, error_str });
end


--[[--------------------------&lt; D E P R E C A T E D _ P A R A M E T E R &gt;--------------------------------------

Categorize and emit an error message when the citation contains one or more deprecated parameters.  The function includes the
offending parameter name to the error message.  Only one error message is emitted regardless of the number of deprecated
parameters in the citation.

added_deprecated_cat is a boolean declared in page scope variables above

]]

local function deprecated_parameter(name)
	if not added_deprecated_cat then
		added_deprecated_cat = true;											-- note that we've added this category
		table.insert( z.message_tail, { set_error( 'deprecated_params', {name}, true ) } );		-- add error message
	end
end


--[=[-------------------------&lt; K E R N _ Q U O T E S &gt;--------------------------------------------------------

Apply kerning to open the space between the quote mark provided by the Module and a leading or trailing quote
mark contained in a |title= or |chapter= parameter's value.

This function will positive kern either single or double quotes:
	"'Unkerned title with leading and trailing single quote marks'"
	" 'Kerned title with leading and trailing single quote marks' " (in real life the kerning isn't as wide as this example)
Double single quotes (italic or bold wikimarkup) are not kerned.

Replaces unicode quotemarks in plain text or in the label portion of a [[L|D]] style wikilink with typewriter
quote marks regardless of the need for kerning.  Unicode quote marks are not replaced in simple [[D]] wikilinks.

Call this function for chapter titles, for website titles, etc; not for book titles.

]=]

local function kern_quotes (str)
	local cap='';
	local cap2='';
	local wl_type, label, link;

	wl_type, label, link = is_wikilink (str);									-- wl_type is: 0, no wl (text in label variable); 1, [[D]]; 2, [[L|D]]
	
	if 1 == wl_type then														-- [[D]] simple wikilink with or without quote marks
		if mw.ustring.match (str, '%[%[[\"“”\'‘’].+[\"“”\'‘’]%]%]') then		-- leading and trailing quote marks
			str = substitute (cfg.presentation['kern-wl-both'], str);
		elseif mw.ustring.match (str, '%[%[[\"“”\'‘’].+%]%]')	then			-- leading quote marks
			str = substitute (cfg.presentation['kern-wl-left'], str);
		elseif mw.ustring.match (str, '%[%[.+[\"“”\'‘’]%]%]') then				-- trailing quote marks
			str = substitute (cfg.presentation['kern-wl-right'], str);
		end

	else																		-- plain text or [[L|D]]; text in label variable
		label= mw.ustring.gsub (label, '[“”]', '\"');							-- replace “” (U+201C &amp; U+201D) with " (typewriter double quote mark)
		label= mw.ustring.gsub (label, '[‘’]', '\'');							-- replace ‘’ (U+2018 &amp; U+2019) with ' (typewriter single quote mark)

		cap, cap2 = mw.ustring.match (label, "^([\"\'])([^\'].+)");				-- match leading double or single quote but not doubled single quotes (italic markup)
		if is_set (cap) then
			label = substitute (cfg.presentation['kern-left'], {cap, cap2});
		end
	
		cap, cap2 = mw.ustring.match (label, "^(.+[^\'])([\"\'])$")				-- match trailing double or single quote but not doubled single quotes (italic markup)
		if is_set (cap) then
			label = substitute (cfg.presentation['kern-right'], {cap, cap2});
		end
		
		if 2 == wl_type then
			str = make_wikilink (link, label);									-- reassemble the wikilink
		else
			str = label;
		end
	end
	return str;
end


--[[--------------------------&lt; F O R M A T _ S C R I P T _ V A L U E &gt;----------------------------------------

|script-title= holds title parameters that are not written in Latin based scripts: Chinese, Japanese, Arabic, Hebrew, etc. These scripts should
not be italicized and may be written right-to-left.  The value supplied by |script-title= is concatenated onto Title after Title has been wrapped
in italic markup.

Regardless of language, all values provided by |script-title= are wrapped in &lt;bdi&gt;...&lt;/bdi&gt; tags to isolate rtl languages from the English left to right.

|script-title= provides a unique feature.  The value in |script-title= may be prefixed with a two-character ISO639-1 language code and a colon:
	|script-title=ja:*** *** (where * represents a Japanese character)
Spaces between the two-character code and the colon and the colon and the first script character are allowed:
	|script-title=ja : *** ***
	|script-title=ja: *** ***
	|script-title=ja :*** ***
Spaces preceding the prefix are allowed: |script-title = ja:*** ***

The prefix is checked for validity.  If it is a valid ISO639-1 language code, the lang attribute (lang="ja") is added to the &lt;bdi&gt; tag so that browsers can
know the language the tag contains.  This may help the browser render the script more correctly.  If the prefix is invalid, the lang attribute
is not added.  At this time there is no error message for this condition.

Supports |script-title= and |script-chapter=

TODO: error messages when prefix is invalid ISO639-1 code; when script_value has prefix but no script;
]]

local function format_script_value (script_value)
	local lang='';																-- initialize to empty string
	local name;
	if script_value:match('^%l%l%s*:') then										-- if first 3 non-space characters are script language prefix
		lang = script_value:match('^(%l%l)%s*:%s*%S.*');						-- get the language prefix or nil if there is no script
		if not is_set (lang) then
			return '';															-- script_value was just the prefix so return empty string
		end
																				-- if we get this far we have prefix and script
		name = cfg.lang_code_remap[lang] or mw.language.fetchLanguageName( lang, "en" );	-- get language name so that we can use it to categorize
		if is_set (name) then													-- is prefix a proper ISO 639-1 language code?
			script_value = script_value:gsub ('^%l%l%s*:%s*', '');				-- strip prefix from script
																				-- is prefix one of these language codes?
			if in_array (lang, cfg.script_lang_codes) then
				add_prop_cat ('script_with_name', {name, lang})
			else
				add_prop_cat ('script')
			end
			lang = ' lang="' .. lang .. '" ';									-- convert prefix into a lang attribute
		else
			lang = '';															-- invalid so set lang to empty string
		end
	end
	script_value = substitute (cfg.presentation['bdi'], {lang, script_value});	-- isolate in case script is rtl

	return script_value;
end


--[[--------------------------&lt; S C R I P T _ C O N C A T E N A T E &gt;------------------------------------------

Initially for |title= and |script-title=, this function concatenates those two parameter values after the script value has been 
wrapped in &lt;bdi&gt; tags.
]]

local function script_concatenate (title, script)
	if is_set (script) then
		script = format_script_value (script);									-- &lt;bdi&gt; tags, lang atribute, categorization, etc; returns empty string on error
		if is_set (script) then
			title = title .. ' ' .. script;										-- concatenate title and script title
		end
	end
	return title;
end


--[[--------------------------&lt; W R A P _ M S G &gt;--------------------------------------------------------------

Applies additional message text to various parameter values. Supplied string is wrapped using a message_list
configuration taking one argument.  Supports lower case text for {{citation}} templates.  Additional text taken
from citation_config.messages - the reason this function is similar to but separate from wrap_style().

]]

local function wrap_msg (key, str, lower)
	if not is_set( str ) then
		return "";
	end
	if true == lower then
		local msg;
		msg = cfg.messages[key]:lower();										-- set the message to lower case before 
		return substitute( msg, str );										-- including template text
	else
		return substitute( cfg.messages[key], str );
	end		
end


--[[--------------------------&lt; F O R M A T _ C H A P T E R _ T I T L E &gt;--------------------------------------

Format the four chapter parameters: |script-chapter=, |chapter=, |trans-chapter=, and |chapter-url= into a single Chapter meta-
parameter (chapter_url_source used for error messages).

]]

local function format_chapter_title (scriptchapter, chapter, transchapter, chapterurl, chapter_url_source, no_quotes, access)
	local chapter_error = '';
	
	if not is_set (chapter) then
		chapter = '';															-- to be safe for concatenation
	else
		if false == no_quotes then
			chapter = kern_quotes (chapter);									-- if necessary, separate chapter title's leading and trailing quote marks from Module provided quote marks
			chapter = wrap_style ('quoted-title', chapter);
		end
	end

	chapter = script_concatenate (chapter, scriptchapter)						-- &lt;bdi&gt; tags, lang atribute, categorization, etc; must be done after title is wrapped

	if is_set (chapterurl) then
		chapter = external_link (chapterurl, chapter, chapter_url_source, access);		-- adds bare_url_missing_title error if appropriate
	end

	if is_set (transchapter) then
		transchapter = wrap_style ('trans-quoted-title', transchapter);
		if is_set (chapter) then
			chapter = chapter ..  ' ' .. transchapter;
		else																	-- here when transchapter without chapter or script-chapter
			chapter = transchapter;												-- 
			chapter_error = ' ' .. set_error ('trans_missing_title', {'chapter'});
		end
	end

--	if is_set (chapterurl) then
--		chapter = external_link (chapterurl, chapter, chapter_url_source, access);		-- adds bare_url_missing_title error if appropriate
--	end

	return chapter .. chapter_error;
end


--[[--------------------------&lt; H A S _ I N V I S I B L E _ C H A R S &gt;----------------------------------------

This function searches a parameter's value for nonprintable or invisible characters.  The search stops at the
first match.

This function will detect the visible replacement character when it is part of the wikisource.

Detects but ignores nowiki and math stripmarkers.  Also detects other named stripmarkers (gallery, math, pre, ref)
and identifies them with a slightly different error message.  See also coins_cleanup().

Detects but ignores the character pattern that results from the transclusion of {{'}} templates.

Output of this function is an error message that identifies the character or the Unicode group, or the stripmarker
that was detected along with its position (or, for multi-byte characters, the position of its first byte) in the
parameter value.

]]

local function has_invisible_chars (param, v)
	local position = '';														-- position of invisible char or starting position of stripmarker
	local dummy;																-- end of matching string; not used but required to hold end position when a capture is returned
	local capture;																-- used by stripmarker detection to hold name of the stripmarker
	local i=1;
	local stripmarker, apostrophe;
	
	capture = string.match (v, '[%w%p ]*');										-- Test for values that are simple ASCII text and bypass other tests if true
	if capture == v then														-- if same there are no unicode characters
		return;
	end

	while cfg.invisible_chars[i] do
		local char=cfg.invisible_chars[i][1]									-- the character or group name
		local pattern=cfg.invisible_chars[i][2]									-- the pattern used to find it
		position, dummy, capture = mw.ustring.find (v, pattern)					-- see if the parameter value contains characters that match the pattern
		
		if position and (char == 'zero width joiner') then						-- if we found a zero width joiner character
			if mw.ustring.find (v, cfg.indic_script) then						-- its ok if one of the indic scripts
				position = nil;													-- unset position
			end
		end
		
		if position then
			if 'nowiki' == capture or 'math' == capture then 					-- nowiki, math stripmarker (not an error condition)
				stripmarker = true;												-- set a flag
			elseif true == stripmarker and 'delete' == char then				-- because stripmakers begin and end with the delete char, assume that we've found one end of a stripmarker
				position = nil;													-- unset
			else
				local err_msg;
				if capture then
					err_msg = capture .. ' ' .. char;
				else
					err_msg = char .. ' ' .. 'character';
				end

				table.insert( z.message_tail, { set_error( 'invisible_char', {err_msg, wrap_style ('parameter', param), position}, true ) } );	-- add error message
				return;															-- and done with this parameter
			end
		end
		i=i+1;																	-- bump our index
	end
end


--[[--------------------------&lt; A R G U M E N T _ W R A P P E R &gt;----------------------------------------------

Argument wrapper.  This function provides support for argument mapping defined in the configuration file so that
multiple names can be transparently aliased to single internal variable.

]]

local function argument_wrapper( args )
	local origin = {};
	
	return setmetatable({
		ORIGIN = function( self, k )
			local dummy = self[k]; --force the variable to be loaded.
			return origin[k];
		end
	},
	{
		__index = function ( tbl, k )
			if origin[k] ~= nil then
				return nil;
			end
			
			local args, list, v = args, cfg.aliases[k];
			
			if type( list ) == 'table' then
				v, origin[k] = select_one( args, list, 'redundant_parameters' );
				if origin[k] == nil then
					origin[k] = ''; -- Empty string, not nil
				end
			elseif list ~= nil then
				v, origin[k] = args[list], list;
			else
				-- maybe let through instead of raising an error?
				-- v, origin[k] = args[k], k;
				error( cfg.messages['unknown_argument_map'] );
			end
			
			-- Empty strings, not nil;
			if v == nil then
				v = cfg.defaults[k] or '';
				origin[k] = '';
			end
			
			tbl = rawset( tbl, k, v );
			return v;
		end,
	});
end


--[[--------------------------&lt; V A L I D A T E &gt;--------------------------------------------------------------

Looks for a parameter's name in one of several whitelists.

Parameters in the whitelist can have three values:
	true - active, supported parameters
	false - deprecated, supported parameters
	nil - unsupported parameters
	
]]

local function validate( name, cite_class )
	local name = tostring( name );
	local state;
	
	if in_array (cite_class, {'arxiv', 'biorxiv', 'citeseerx'}) then			-- limited parameter sets allowed for these templates
		state = whitelist.limited_basic_arguments[ name ];
		if true == state then return true; end									-- valid actively supported parameter
		if false == state then
			deprecated_parameter (name);										-- parameter is deprecated but still supported
			return true;
		end

		if 'arxiv' == cite_class then											-- basic parameters unique to these templates
			state = whitelist.arxiv_basic_arguments[name];
		end
		if 'biorxiv' == cite_class then
			state = whitelist.biorxiv_basic_arguments[name];
		end
		if 'citeseerx' == cite_class then
			state = whitelist.citeseerx_basic_arguments[name];
		end

		if true == state then return true; end									-- valid actively supported parameter
		if false == state then
			deprecated_parameter (name);										-- parameter is deprecated but still supported
			return true;
		end
																				-- limited enumerated parameters list
		name = name:gsub("%d+", "#" );											-- replace digit(s) with # (last25 becomes last#) (mw.ustring because non-Western 'local' digits)
		state = whitelist.limited_numbered_arguments[ name ];
		if true == state then return true; end									-- valid actively supported parameter
		if false == state then
			deprecated_parameter (name);										-- parameter is deprecated but still supported
			return true;
		end

		return false;															-- not supported because not found or name is set to nil
	end																			-- end limited parameter-set templates
		
	state = whitelist.basic_arguments[ name ];									-- all other templates; all normal parameters allowed
											
	if true == state then return true; end										-- valid actively supported parameter
	if false == state then
		deprecated_parameter (name);											-- parameter is deprecated but still supported
		return true;
	end
																				-- all enumerated parameters allowed
	name = name:gsub("%d+", "#" );												-- replace digit(s) with # (last25 becomes last#) (mw.ustring because non-Western 'local' digits)
	state = whitelist.numbered_arguments[ name ];

	if true == state then return true; end										-- valid actively supported parameter
	if false == state then
		deprecated_parameter (name);											-- parameter is deprecated but still supported
		return true;
	end
	
	return false;																-- not supported because not found or name is set to nil
end


--[[--------------------------&lt; N O W R A P _ D A T E &gt;--------------------------------------------------------

When date is YYYY-MM-DD format wrap in nowrap span: &lt;span ...&gt;YYYY-MM-DD&lt;/span&gt;.  When date is DD MMMM YYYY or is
MMMM DD, YYYY then wrap in nowrap span: &lt;span ...&gt;DD MMMM&lt;/span&gt; YYYY or &lt;span ...&gt;MMMM DD,&lt;/span&gt; YYYY

DOES NOT yet support MMMM YYYY or any of the date ranges.

]]

local function nowrap_date (date)
	local cap='';
	local cap2='';

	if date:match("^%d%d%d%d%-%d%d%-%d%d$") then
		date = substitute (cfg.presentation['nowrap1'], date);
	
	elseif date:match("^%a+%s*%d%d?,%s+%d%d%d%d$") or date:match ("^%d%d?%s*%a+%s+%d%d%d%d$") then
		cap, cap2 = string.match (date, "^(.*)%s+(%d%d%d%d)$");
		date = substitute (cfg.presentation['nowrap2'], {cap, cap2});
	end
	
	return date;
end


--[[--------------------------&lt; S E T _ T I T L E T Y P E &gt;----------------------------------------------------

This function sets default title types (equivalent to the citation including |type=&lt;default value&gt;) for those templates that have defaults.
Also handles the special case where it is desirable to omit the title type from the rendered citation (|type=none).

]]

local function set_titletype (cite_class, title_type)
	if is_set(title_type) then
		if "none" == title_type then
			title_type = "";													-- if |type=none then type parameter not displayed
		end
		return title_type;														-- if |type= has been set to any other value use that value
	end

	return cfg.title_types [cite_class] or '';									-- set template's default title type; else empty string for concatenation
end


--[[--------------------------&lt; H Y P H E N _ T O _ D A S H &gt;--------------------------------------------------

Converts a hyphen to a dash

]]

local function hyphen_to_dash( str )
	if not is_set(str) or str:match( "[%[%]{}&lt;&gt;]" ) ~= nil then
		return str;
	end	
	return str:gsub( '-', '–' );
end


--[[--------------------------&lt; S A F E _ J O I N &gt;------------------------------------------------------------

Joins a sequence of strings together while checking for duplicate separation characters.

]]

local function safe_join( tbl, duplicate_char )
	local f = {};																-- create a function table appropriate to type of 'dupicate character'
		if 1 == #duplicate_char then											-- for single byte ascii characters use the string library functions
			f.gsub=string.gsub
			f.match=string.match
			f.sub=string.sub
		else																	-- for multi-byte characters use the ustring library functions
			f.gsub=mw.ustring.gsub
			f.match=mw.ustring.match
			f.sub=mw.ustring.sub
		end

	local str = '';																-- the output string
	local comp = '';															-- what does 'comp' mean?
	local end_chr = '';
	local trim;
	for _, value in ipairs( tbl ) do
		if value == nil then value = ''; end
		
		if str == '' then														-- if output string is empty
			str = value;														-- assign value to it (first time through the loop)
		elseif value ~= '' then
			if value:sub(1,1) == '&lt;' then										-- Special case of values enclosed in spans and other markup.
				comp = value:gsub( "%b&lt;&gt;", "" );								-- remove html markup (&lt;span&gt;string&lt;/span&gt; -&gt; string)
			else
				comp = value;
			end
																				-- typically duplicate_char is sepc
			if f.sub(comp, 1,1) == duplicate_char then							-- is first character same as duplicate_char? why test first character?
																				--   Because individual string segments often (always?) begin with terminal punct for the
																				--   preceding segment: 'First element' .. 'sepc next element' .. etc?
				trim = false;
				end_chr = f.sub(str, -1,-1);									-- get the last character of the output string
				-- str = str .. "&lt;HERE(enchr=" .. end_chr.. ")"					-- debug stuff?
				if end_chr == duplicate_char then								-- if same as separator
					str = f.sub(str, 1,-2);										-- remove it
				elseif end_chr == "'" then										-- if it might be wikimarkup
					if f.sub(str, -3,-1) == duplicate_char .. "''" then			-- if last three chars of str are sepc'' 
						str = f.sub(str, 1, -4) .. "''";						-- remove them and add back ''
					elseif  f.sub(str, -5,-1) == duplicate_char .. "]]''" then	-- if last five chars of str are sepc]]'' 
						trim = true;											-- why? why do this and next differently from previous?
					elseif f.sub(str, -4,-1) == duplicate_char .. "]''" then	-- if last four chars of str are sepc]'' 
						trim = true;											-- same question
					end
				elseif end_chr == "]" then										-- if it might be wikimarkup
					if f.sub(str, -3,-1) == duplicate_char .. "]]" then			-- if last three chars of str are sepc]] wikilink 
						trim = true;
					elseif f.sub(str, -3,-1) == duplicate_char .. '"]' then		-- if last three chars of str are sepc"] quoted external link 
						trim = true;
					elseif  f.sub(str, -2,-1) == duplicate_char .. "]" then		-- if last two chars of str are sepc] external link
						trim = true;
					elseif f.sub(str, -4,-1) == duplicate_char .. "'']" then	-- normal case when |url=something &amp; |title=Title.
						trim = true;
					end
				elseif end_chr == " " then										-- if last char of output string is a space
					if f.sub(str, -2,-1) == duplicate_char .. " " then			-- if last two chars of str are &lt;sepc&gt;&lt;space&gt;
						str = f.sub(str, 1,-3);									-- remove them both
					end
				end

				if trim then
					if value ~= comp then 										-- value does not equal comp when value contains html markup
						local dup2 = duplicate_char;
						if f.match(dup2, "%A" ) then dup2 = "%" .. dup2; end	-- if duplicate_char not a letter then escape it
						
						value = f.gsub(value, "(%b&lt;&gt;)" .. dup2, "%1", 1 )		-- remove duplicate_char if it follows html markup
					else
						value = f.sub(value, 2, -1 );							-- remove duplicate_char when it is first character
					end
				end
			end
			str = str .. value;													--add it to the output string
		end
	end
	return str;
end


--[[--------------------------&lt; I S _ S U F F I X &gt;------------------------------------------------------------

returns true is suffix is properly formed Jr, Sr, or ordinal in the range 2–9.  Puncutation not allowed.

]]

local function is_suffix (suffix)
	if in_array (suffix, {'Jr', 'Sr', '2nd', '3rd'}) or suffix:match ('^%dth$') then
		return true;
	end
	return false;
end


--[[--------------------------&lt; I S _ G O O D _ V A N C _ N A M E &gt;--------------------------------------------

For Vancouver Style, author/editor names are supposed to be rendered in Latin (read ASCII) characters.  When a name
uses characters that contain diacritical marks, those characters are to converted to the corresponding Latin character.
When a name is written using a non-Latin alphabet or logogram, that name is to be transliterated into Latin characters.
These things are not currently possible in this module so are left to the editor to do.

This test allows |first= and |last= names to contain any of the letters defined in the four Unicode Latin character sets
	[http://www.unicode.org/charts/PDF/U0000.pdf C0 Controls and Basic Latin] 0041–005A, 0061–007A
	[http://www.unicode.org/charts/PDF/U0080.pdf C1 Controls and Latin-1 Supplement] 00C0–00D6, 00D8–00F6, 00F8–00FF
	[http://www.unicode.org/charts/PDF/U0100.pdf Latin Extended-A] 0100–017F
	[http://www.unicode.org/charts/PDF/U0180.pdf Latin Extended-B] 0180–01BF, 01C4–024F

|lastn= also allowed to contain hyphens, spaces, and apostrophes. (http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35029/)
|firstn= also allowed to contain hyphens, spaces, apostrophes, and periods

This original test:
	if nil == mw.ustring.find (last, "^[A-Za-zÀ-ÖØ-öø-ƿǄ-ɏ%-%s%']*$") or nil == mw.ustring.find (first, "^[A-Za-zÀ-ÖØ-öø-ƿǄ-ɏ%-%s%'%.]+[2-6%a]*$") then
was written ouside of the code editor and pasted here because the code editor gets confused between character insertion point and cursor position.
The test has been rewritten to use decimal character escape sequence for the individual bytes of the unicode characters so that it is not necessary
to use an external editor to maintain this code.

	\195\128-\195\150 – À-Ö (U+00C0–U+00D6 – C0 controls)
	\195\152-\195\182 – Ø-ö (U+00D8-U+00F6 – C0 controls)
	\195\184-\198\191 – ø-ƿ (U+00F8-U+01BF – C0 controls, Latin extended A &amp; B)
	\199\132-\201\143 – Ǆ-ɏ (U+01C4-U+024F – Latin extended B)

]]

local function is_good_vanc_name (last, first)
	local first, suffix = first:match ('(.-),?%s*([%dJS][%drndth]+)%.?$') or first;		-- if first has something that looks like a generational suffix, get it

	if is_set (suffix) then
		if not is_suffix (suffix) then
			add_vanc_error ('suffix');
			return false;														-- not a name with an appropriate suffix
		end
	end
	if nil == mw.ustring.find (last, "^[A-Za-z\195\128-\195\150\195\152-\195\182\195\184-\198\191\199\132-\201\143%-%s%']*$") or
		nil == mw.ustring.find (first, "^[A-Za-z\195\128-\195\150\195\152-\195\182\195\184-\198\191\199\132-\201\143%-%s%'%.]*$") then
			add_vanc_error ('non-Latin character');
			return false;														-- not a string of latin characters; Vancouver requires Romanization
	end;
	return true;
end


--[[--------------------------&lt; R E D U C E _ T O _ I N I T I A L S &gt;------------------------------------------

Attempts to convert names to initials in support of |name-list-format=vanc.  

Names in |firstn= may be separated by spaces or hyphens, or for initials, a period. See http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35062/.

Vancouver style requires family rank designations (Jr, II, III, etc) to be rendered as Jr, 2nd, 3rd, etc.  See http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35085/.
This code only accepts and understands generational suffix in the Vancouver format because Roman numerals look like, and can be mistaken for, initials.

This function uses ustring functions because firstname initials may be any of the unicode Latin characters accepted by is_good_vanc_name ().

]]

local function reduce_to_initials(first)
	local name, suffix = mw.ustring.match(first, "^(%u+) ([%dJS][%drndth]+)$");

	if not name then															-- if not initials and a suffix
		name = mw.ustring.match(first, "^(%u+)$");								-- is it just intials?
	end

	if name then																-- if first is initials with or without suffix
		if 3 &gt; mw.ustring.len (name) then										-- if one or two initials
			if suffix then														-- if there is a suffix
				if is_suffix (suffix) then										-- is it legitimate?
					return first;												-- one or two initials and a valid suffix so nothing to do
				else
					add_vanc_error ('suffix');									-- one or two initials with invalid suffix so error message
					return first;												-- and return first unmolested
				end
			else
				return first;													-- one or two initials without suffix; nothing to do
			end
		end
	end																			-- if here then name has 3 or more uppercase letters so treat them as a word


	local initials, names = {}, {};												-- tables to hold name parts and initials
	local i = 1;																-- counter for number of initials

	names = mw.text.split (first, '[%s,]+');									-- split into a table of names and possible suffix

	while names[i] do															-- loop through the table
		if 1 &lt; i and names[i]:match ('[%dJS][%drndth]+%.?$') then				-- if not the first name, and looks like a suffix (may have trailing dot)
			names[i] = names[i]:gsub ('%.', '');								-- remove terminal dot if present
			if is_suffix (names[i]) then										-- if a legitimate suffix
				table.insert (initials, ' ' .. names[i]);						-- add a separator space, insert at end of initials table
				break;															-- and done because suffix must fall at the end of a name
			end																	-- no error message if not a suffix; possibly because of Romanization
		end
		if 3 &gt; i then
			table.insert (initials, mw.ustring.sub(names[i],1,1));				-- insert the intial at end of initials table
		end
		i = i+1;																-- bump the counter
	end
			
	return table.concat(initials)												-- Vancouver format does not include spaces.
end


--[[--------------------------&lt; L I S T  _ P E O P L E &gt;-------------------------------------------------------

Formats a list of people (e.g. authors / editors) 

]]

local function list_people(control, people, etal)
	local sep;
	local namesep;
	local format = control.format
	local maximum = control.maximum
	local lastauthoramp = control.lastauthoramp;
	local text = {}

	if 'vanc' == format then													-- Vancouver-like author/editor name styling?
		sep = cfg.presentation['sep_nl_vanc'];									-- name-list separator between authors is a comma
		namesep = cfg.presentation['sep_name_vanc'];							-- last/first separator is a space
	else
		sep = cfg.presentation['sep_nl'];										-- name-list separator between authors is a semicolon
		namesep = cfg.presentation['sep_name'];									-- last/first separator is &lt;comma&gt;&lt;space&gt;
	end
	
	if sep:sub(-1,-1) ~= " " then sep = sep .. " " end
	if is_set (maximum) and maximum &lt; 1 then return "", 0; end					-- returned 0 is for EditorCount; not used for authors
	
	for i,person in ipairs(people) do
		if is_set(person.last) then
			local mask = person.mask
			local one
			local sep_one = sep;
			if is_set (maximum) and i &gt; maximum then
				etal = true;
				break;
			elseif (mask ~= nil) then
				local n = tonumber(mask)
				if (n ~= nil) then
					one = string.rep("&amp;mdash;",n)
				else
					one = mask;
					sep_one = " ";
				end
			else
				one = person.last
				local first = person.first
				if is_set(first) then
					if ( "vanc" == format ) then								-- if vancouver format
						one = one:gsub ('%.', '');								-- remove periods from surnames (http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35029/)
						if not person.corporate and is_good_vanc_name (one, first) then		-- and name is all Latin characters; corporate authors not tested
							first = reduce_to_initials(first)					-- attempt to convert first name(s) to initials
						end
					end
					one = one .. namesep .. first;
				end
				if is_set(person.link) and person.link ~= control.page_name then
					one = make_wikilink (person.link, one);						-- link author/editor if this page is not the author's/editor's page
				end
			end
			table.insert( text, one )
			table.insert( text, sep_one )
		end
	end

	local count = #text / 2;													-- (number of names + number of separators) divided by 2
	if count &gt; 0 then 
		if count &gt; 1 and is_set(lastauthoramp) and not etal then
			text[#text-2] = " &amp; ";												-- replace last separator with ampersand text
		end
		text[#text] = nil;														-- erase the last separator
	end
	
	local result = table.concat(text)											-- construct list
	if etal and is_set (result) then											-- etal may be set by |display-authors=etal but we might not have a last-first list
		result = result .. sep .. ' ' .. cfg.messages['et al'];					-- we've go a last-first list and etal so add et al.
	end
	
	return result, count
end


--[[--------------------------&lt; A N C H O R _ I D &gt;------------------------------------------------------------

Generates a CITEREF anchor ID if we have at least one name or a date.  Otherwise returns an empty string.

namelist is one of the contributor-, author-, or editor-name lists chosen in that order.  year is Year or anchor_year.

]]
local function anchor_id (namelist, year)
	local names={};																-- a table for the one to four names and year
	for i,v in ipairs (namelist) do												-- loop through the list and take up to the first four last names
		names[i] = v.last 
		if i == 4 then break end												-- if four then done
	end
	table.insert (names, year);													-- add the year at the end
	local id = table.concat(names);												-- concatenate names and year for CITEREF id
	if is_set (id) then															-- if concatenation is not an empty string
		return "CITEREF" .. id;													-- add the CITEREF portion
	else
		return '';																-- return an empty string; no reason to include CITEREF id in this citation
	end
end


--[[--------------------------&lt; N A M E _ H A S _ E T A L &gt;----------------------------------------------------

Evaluates the content of author and editor name parameters for variations on the theme of et al.  If found,
the et al. is removed, a flag is set to true and the function returns the modified name and the flag.

This function never sets the flag to false but returns it's previous state because it may have been set by
previous passes through this function or by the parameters |display-authors=etal or |display-editors=etal

]]

local function name_has_etal (name, etal, nocat)

	if is_set (name) then														-- name can be nil in which case just return
		local etal_pattern = "[;,]? *[\"']*%f[%a][Ee][Tt] *[Aa][Ll][%.\"']*$"	-- variations on the 'et al' theme
		local others_pattern = "[;,]? *%f[%a]and [Oo]thers";					-- and alternate to et al.
		
		if name:match (etal_pattern) then										-- variants on et al.
			name = name:gsub (etal_pattern, '');								-- if found, remove
			etal = true;														-- set flag (may have been set previously here or by |display-authors=etal)
			if not nocat then													-- no categorization for |vauthors=
				add_maint_cat ('etal');											-- and add a category if not already added
			end
		elseif name:match (others_pattern) then									-- if not 'et al.', then 'and others'?
			name = name:gsub (others_pattern, '');								-- if found, remove
			etal = true;														-- set flag (may have been set previously here or by |display-authors=etal)
			if not nocat then													-- no categorization for |vauthors=
				add_maint_cat ('etal');											-- and add a category if not already added
			end
		end
	end
	return name, etal;															-- 
end


--[[--------------------------&lt; N A M E _ H A S _ E D _ M A R K U P &gt;------------------------------------------

Evaluates the content of author and editor parameters for extranious editor annotations: ed, ed., eds, (Ed.), etc.
These annotation do not belong in author parameters and are redundant in editor parameters.  If found, the function
adds the editor markup maintenance category.

]]

local function name_has_ed_markup (name, list_name)
	local _, pattern;
	local patterns = {															-- these patterns match annotations at end of name
		'%f[%(%[][%(%[]%s*[Ee][Dd][Ss]?%.?%s*[%)%]]?$',							-- (ed) or (eds): leading '(', case insensitive 'ed', optional 's', '.' and/or ')'
		'[,%.%s]%f[e]eds?%.?$',													-- ed or eds: without '('or ')'; case sensitive (ED could be initials Ed could be name)
		'%f[%(%[][%(%[]%s*[Ee][Dd][Ii][Tt][Oo][Rr][Ss]?%.?%s*[%)%]]?$',			-- (editor) or (editors): leading '(', case insensitive, optional '.' and/or ')'
		'[,%.%s]%f[Ee][Ee][Dd][Ii][Tt][Oo][Rr][Ss]?%.?$',						-- editor or editors: without '('or ')'; case insensitive
		
																				-- these patterns match annotations at beginning of name
		'^eds?[%.,;]',															-- ed. or eds.: lower case only, optional 's', requires '.'
		'^[%(%[]%s*[Ee][Dd][Ss]?%.?%s*[%)%]]',									-- (ed) or (eds): also sqare brackets, case insensitive, optional 's', '.'
		'^[%(%[]?%s*[Ee][Dd][Ii][Tt][Oo][Rr][Ss]?%A',							-- (editor or (editors: also sq brackets, case insensitive, optional brackets, 's'
		'^[%(%[]?%s*[Ee][Dd][Ii][Tt][Ee][Dd]%A',								-- (edited: also sq brackets, case insensitive, optional brackets
		}

	if is_set (name) then
		for _, pattern in ipairs (patterns) do									-- spin through patterns table and
			if name:match (pattern) then
				add_maint_cat ('extra_text_names', cfg.special_case_translation [list_name]);	-- add a maint cat for this template
				break;
			end
		end
	end
	return name;																-- and done
end


--[[--------------------------&lt; N A M E _ H A S _ M U L T _ N A M E S &gt;----------------------------------------

Evaluates the content of author and editor (surnames only) parameters for multiple names.  Multiple names are
indicated if there is more than one comma and or semicolon.  If found, the function adds the multiple name
(author or editor) maintenance category.

]]

local function name_has_mult_names (name, list_name)
local count, _;
	if is_set (name) then
		_, count = name:gsub ('[;,]', '');										-- count the number of separator-like characters
		
		if 1 &lt; count then														-- param could be |author= or |editor= so one separator character is acceptable
			add_maint_cat ('mult_names', cfg.special_case_translation [list_name]);	-- more than one separator indicates multiple names so add a maint cat for this template
		end
	end
	return name;																-- and done
end


--[[--------------------------&lt; N A M E _ C H E C K S &gt;--------------------------------------------------------
This function calls various name checking functions used to validate the content of the various name-holding
parameters.

]]

local function name_checks (last, first, list_name)
	if is_set (last) then
		if last:match ('^%(%(.*%)%)$') then										-- if wrapped in doubled parentheses, accept as written 
			last = last:match ('^%(%((.*)%)%)$');								-- strip parens
		else
			last = name_has_mult_names (last, list_name);						-- check for multiple names in the parameter (last only)
			last = name_has_ed_markup (last, list_name);						-- check for extraneous 'editor' annotation
		end
	end
	if is_set (first) then
		if first:match ('^%(%(.*%)%)$') then									-- if wrapped in doubled parentheses, accept as written 
			first = first:match ('^%(%((.*)%)%)$');								-- strip parens
		else
			first = name_has_ed_markup (first, list_name);						-- check for extraneous 'editor' annotation
		end
	end
	return last, first;															-- done
	end


--[[--------------------------&lt; E X T R A C T _ N A M E S &gt;----------------------------------------------------
Gets name list from the input arguments

Searches through args in sequential order to find |lastn= and |firstn= parameters (or their aliases), and their matching link and mask parameters.
Stops searching when both |lastn= and |firstn= are not found in args after two sequential attempts: found |last1=, |last2=, and |last3= but doesn't
find |last4= and |last5= then the search is done.

This function emits an error message when there is a |firstn= without a matching |lastn=.  When there are 'holes' in the list of last names, |last1= and |last3=
are present but |last2= is missing, an error message is emitted. |lastn= is not required to have a matching |firstn=.

When an author or editor parameter contains some form of 'et al.', the 'et al.' is stripped from the parameter and a flag (etal) returned
that will cause list_people() to add the static 'et al.' text from Module:Citation/CS1/Configuration.  This keeps 'et al.' out of the 
template's metadata.  When this occurs, the page is added to a maintenance category.

]]

local function extract_names(args, list_name)
	local names = {};			-- table of names
	local last;					-- individual name components
	local first;
	local link;
	local mask;
	local i = 1;				-- loop counter/indexer
	local n = 1;				-- output table indexer
	local count = 0;			-- used to count the number of times we haven't found a |last= (or alias for authors, |editor-last or alias for editors)
	local etal=false;			-- return value set to true when we find some form of et al. in an author parameter

	local err_msg_list_name = list_name:match ("(%w+)List") .. 's list';		-- modify AuthorList or EditorList for use in error messages if necessary
	while true do
		last = select_one( args, cfg.aliases[list_name .. '-Last'], 'redundant_parameters', i );		-- search through args for name components beginning at 1
		first = select_one( args, cfg.aliases[list_name .. '-First'], 'redundant_parameters', i );
		link = select_one( args, cfg.aliases[list_name .. '-Link'], 'redundant_parameters', i );
		mask = select_one( args, cfg.aliases[list_name .. '-Mask'], 'redundant_parameters', i );

		last, etal = name_has_etal (last, etal, false);							-- find and remove variations on et al.
		first, etal = name_has_etal (first, etal, false);						-- find and remove variations on et al.
		last, first= name_checks (last, first, list_name);						-- multiple names, extraneous annotation, etc checks
		
		if first and not last then												-- if there is a firstn without a matching lastn
			table.insert( z.message_tail, { set_error( 'first_missing_last', {err_msg_list_name, i}, true ) } );	-- add this error message
		elseif not first and not last then										-- if both firstn and lastn aren't found, are we done?
			count = count + 1;													-- number of times we haven't found last and first
			if 2 &lt;= count then													-- two missing names and we give up
				break;															-- normal exit or there is a two-name hole in the list; can't tell which
			end
		else																	-- we have last with or without a first
			link_title_ok (link, list_name:match ("(%w+)List"):lower() .. '-link' .. i, last, list_name:match ("(%w+)List"):lower() .. '-last' .. i);	-- check for improper wikimarkup

			names[n] = {last = last, first = first, link = link, mask = mask, corporate=false};	-- add this name to our names list (corporate for |vauthors= only)
			n = n + 1;															-- point to next location in the names table
			if 1 == count then													-- if the previous name was missing
				table.insert( z.message_tail, { set_error( 'missing_name', {err_msg_list_name, i-1}, true ) } );		-- add this error message
			end
			count = 0;															-- reset the counter, we're looking for two consecutive missing names
		end
		i = i + 1;																-- point to next args location
	end
	
	return names, etal;															-- all done, return our list of names
end


--[[--------------------------&lt; G E T _ I S O 6 3 9 _ C O D E &gt;------------------------------------------------

Validates language names provided in |language= parameter if not an ISO639-1 or 639-2 code.

Returns the language name and associated two- or three-character code.  Because case of the source may be incorrect
or different from the case that WikiMedia uses, the name comparisons are done in lower case and when a match is
found, the Wikimedia version (assumed to be correct) is returned along with the code.  When there is no match, we
return the original language name string.

mw.language.fetchLanguageNames(&lt;local wiki language&gt;, 'all') returns a list of languages that in some cases may include
extensions. For example, code 'cbk-zam' and its associated name 'Chavacano de Zamboanga' (MediaWiki does not support
code 'cbk' or name 'Chavacano'.  Most (all?) of these languages are not used a 'language' codes per se, rather they
are used as sub-domain names: cbk-zam.wikipedia.org.  These names can be found (for the time being) at
https://phabricator.wikimedia.org/diffusion/ECLD/browse/master/LocalNames/LocalNamesEn.php

Names but that are included in the list will be found if that name is provided in the |language= parameter.  For example,
if |language=Chavacano de Zamboanga, that name will be found with the associated code 'cbk-zam'.  When names are found
and the associated code is not two or three characters, this function returns only the Wikimedia language name.

Adapted from code taken from Module:Check ISO 639-1.

]]

local function get_iso639_code (lang, this_wiki_code)
	if cfg.lang_name_remap[lang:lower()] then									-- if there is a remapped name (because MediaWiki uses something that we don't think is correct)
		return cfg.lang_name_remap[lang:lower()][1], cfg.lang_name_remap[lang:lower()][2];	-- for this language 'name', return a possibly new name and appropriate code
	end

	local languages = mw.language.fetchLanguageNames(this_wiki_code, 'all')		-- get a list of language names known to Wikimedia
																				-- ('all' is required for North Ndebele, South Ndebele, and Ojibwa)
	local langlc = mw.ustring.lower(lang);										-- lower case version for comparisons
	
	for code, name in pairs(languages) do										-- scan the list to see if we can find our language
		if langlc == mw.ustring.lower(name) then
			if 2 ~= code:len() and 3 ~= code:len() then							-- two- or three-character codes only; extensions not supported
				return name;													-- so return the name but not the code
			end
			return name, code;													-- found it, return name to ensure proper capitalization and the the code
		end
	end
	return lang;																-- not valid language; return language in original case and nil for the code
end


--[[--------------------------&lt; L A N G U A G E _ P A R A M E T E R &gt;------------------------------------------

Gets language name from a provided two- or three-character ISO 639 code.  If a code is recognized by MediaWiki,
use the returned name; if not, then use the value that was provided with the language parameter.

When |language= contains a recognized language (either code or name), the page is assigned to the category for
that code: Category:Norwegian-language sources (no).  For valid three-character code languages, the page is assigned
to the single category for '639-2' codes: Category:CS1 ISO 639-2 language sources.

Languages that are the same as the local wiki are not categorized.  MediaWiki does not recognize three-character
equivalents of two-character codes: code 'ar' is recognized bit code 'ara' is not.

This function supports multiple languages in the form |language=nb, French, th where the language names or codes are
separated from each other by commas.

]]

local function language_parameter (lang)
	local code;																	-- the two- or three-character language code
	local name;																	-- the language name
	local language_list = {};													-- table of language names to be rendered
	local names_table = {};														-- table made from the value assigned to |language=

	local this_wiki = mw.getContentLanguage();									-- get a language object for this wiki
	local this_wiki_code = this_wiki:getCode()									-- get this wiki's language code
	local this_wiki_name = mw.language.fetchLanguageName(this_wiki_code, this_wiki_code);	-- get this wiki's language name

	names_table = mw.text.split (lang, '%s*,%s*');								-- names should be a comma separated list

	for _, lang in ipairs (names_table) do										-- reuse lang

		if lang:match ('^%a%a%-') then											-- strip ietf language tags from code; TODO: is there a need to support 3-char with tag?
			lang = lang:match ('(%a%a)%-')										-- keep only 639-1 code portion to lang; TODO: do something with 3166 alpha 2 country code?
		end
		if 2 == lang:len() or 3 == lang:len() then								-- if two-or three-character code
			name = mw.language.fetchLanguageName( lang:lower(), this_wiki_code);	-- get language name if |language= is a proper code
			if not is_set (name) then
				name = cfg.lang_code_remap[lang];								-- not supported by MediaWiki; is it in remap?
			end
		end
	
		if is_set (name) then													-- if |language= specified a valid code
			code = lang:lower();												-- save it
		else
			name, code = get_iso639_code (lang, this_wiki_code);				-- attempt to get code from name (assign name here so that we are sure of proper capitalization)
		end
	
		if is_set (code) then													-- only 2- or 3-character codes
			name = cfg.lang_code_remap[code] or name;							-- override wikimedia when they misuse language codes/names

			if this_wiki_code ~= code then										-- when the language is not the same as this wiki's language
				if 2 == code:len() then											-- and is a two-character code
					add_prop_cat ('foreign_lang_source' .. code, {name, code})	-- categorize it
				else															-- or is a recognized language (but has a three-character code)
					add_prop_cat ('foreign_lang_source_2' .. code, {code})		-- categorize it differently TODO: support mutliple three-character code categories per cs1|2 template
				end
			end
		else
			add_maint_cat ('unknown_lang');										-- add maint category if not already added
		end
		
		table.insert (language_list, name);
		name = '';																-- so we can reuse it
	end
	
	code = #language_list														-- reuse code as number of languages in the list
	if 2 &gt;= code then
		name = table.concat (language_list, ' and ')							-- insert '&lt;space&gt;and&lt;space&gt;' between two language names
	elseif 2 &lt; code then
		language_list[code] = 'and ' .. language_list[code];					-- prepend last name with 'and&lt;space&gt;'
		name = table.concat (language_list, ', ')								-- and concatenate with '&lt;comma&gt;&lt;space&gt;' separators
	end
	if this_wiki_name == name then
		return '';																-- if one language and that language is this wiki's return an empty string (no annotation)
	end
	return (" " .. wrap_msg ('language', name));								-- otherwise wrap with '(in ...)'
	--[[ TODO: should only return blank or name rather than full list
	so we can clean up the bunched parenthetical elements Language, Type, Format
	]]
end


--[[--------------------------&lt; S E T _ C S 1 _ S T Y L E &gt;----------------------------------------------------

Set style settings for CS1 citation templates. Returns separator and postscript settings
At en.wiki, for cs1:
	ps gets:	'.'
	sep gets:	'.'

]]

local function set_cs1_style (ps)
	if not is_set (ps) then														-- unless explicitely set to something
		ps = cfg.presentation['ps_cs1'];										-- terminate the rendered citation
	end
	return cfg.presentation['sep_cs1'], ps;										-- element separator
end


--[[--------------------------&lt; S E T _ C S 2 _ S T Y L E &gt;----------------------------------------------------

Set style settings for CS2 citation templates. Returns separator, postscript, ref settings
At en.wiki, for cs2:
	ps gets:	'' (empty string - no terminal punctuation)
	sep gets:	','

]]

local function set_cs2_style (ps, ref)
	if not is_set (ps) then														-- if |postscript= has not been set, set cs2 default
		ps = cfg.presentation['ps_cs2'];										-- terminate the rendered citation
	end
	if not is_set (ref) then													-- if |ref= is not set
		ref = "harv";															-- set default |ref=harv
	end
	return cfg.presentation['sep_cs2'], ps, ref;								-- element separator
end


--[[--------------------------&lt; G E T _ S E T T I N G S _ F R O M _ C I T E _ C L A S S &gt;----------------------

When |mode= is not set or when its value is invalid, use config.CitationClass and parameter values to establish
rendered style.

]]

local function get_settings_from_cite_class (ps, ref, cite_class)
	local sep;
	if (cite_class == "citation") then											-- for citation templates (CS2)
		sep, ps, ref = set_cs2_style (ps, ref);
	else																		-- not a citation template so CS1
		sep, ps = set_cs1_style (ps);
	end

	return sep, ps, ref															-- return them all
end


--[[--------------------------&lt; S E T _ S T Y L E &gt;------------------------------------------------------------

Establish basic style settings to be used when rendering the citation.  Uses |mode= if set and valid or uses
config.CitationClass from the template's #invoke: to establish style.

]]

local function set_style (mode, ps, ref, cite_class)
	local sep;
	if 'cs2' == mode then														-- if this template is to be rendered in CS2 (citation) style
		sep, ps, ref = set_cs2_style (ps, ref);
	elseif 'cs1' == mode then													-- if this template is to be rendered in CS1 (cite xxx) style
		sep, ps = set_cs1_style (ps);
	else																		-- anything but cs1 or cs2
		sep, ps, ref = get_settings_from_cite_class (ps, ref, cite_class);		-- get settings based on the template's CitationClass
	end
	if 'none' == ps:lower() then												-- if assigned value is 'none' then
		ps = '';																-- set to empty string
	end
	
	return sep, ps, ref
end


--[=[-------------------------&lt; I S _ P D F &gt;------------------------------------------------------------------

Determines if a url has the file extension that is one of the pdf file extensions used by [[MediaWiki:Common.css]] when
applying the pdf icon to external links.

returns true if file extension is one of the recognized extensions, else false

]=]

local function is_pdf (url)
	return url:match ('%.pdf$') or url:match ('%.PDF$') or url:match ('%.pdf[%?#]') or url:match ('%.PDF[%?#]');
end


--[[--------------------------&lt; S T Y L E _ F O R M A T &gt;------------------------------------------------------

Applies css style to |format=, |chapter-format=, etc.  Also emits an error message if the format parameter does
not have a matching url parameter.  If the format parameter is not set and the url contains a file extension that
is recognized as a pdf document by MediaWiki's commons.css, this code will set the format parameter to (PDF) with
the appropriate styling.

]]

local function style_format (format, url, fmt_param, url_param)
	if is_set (format) then
		format = wrap_style ('format', format);									-- add leading space, parentheses, resize
		if not is_set (url) then
			format = format .. set_error( 'format_missing_url', {fmt_param, url_param} );	-- add an error message
		end
	elseif is_pdf (url) then													-- format is not set so if url is a pdf file then
		format = wrap_style ('format', 'PDF');									-- set format to pdf
	else
		format = '';															-- empty string for concatenation
	end
	return format;
end


--[[--------------------------&lt; G E T _ D I S P L A Y _ A U T H O R S _ E D I T O R S &gt;------------------------

Returns a number that defines the number of names displayed for author and editor name lists and a boolean flag
to indicate when et al. should be appended to the name list.

When the value assigned to |display-xxxxors= is a number greater than or equal to zero, return the number and
the previous state of the 'etal' flag (false by default but may have been set to true if the name list contains
some variant of the text 'et al.').

When the value assigned to |display-xxxxors= is the keyword 'etal', return a number that is one greater than the
number of authors in the list and set the 'etal' flag true.  This will cause the list_people() to display all of
the names in the name list followed by 'et al.'

In all other cases, returns nil and the previous state of the 'etal' flag.

inputs:
	max: A['DisplayAuthors'] or A['DisplayEditors']; a number or some flavor of etal
	count: #a or #e
	list_name: 'authors' or 'editors'
	etal: author_etal or editor_etal

]]

local function get_display_authors_editors (max, count, list_name, etal)
	if is_set (max) then
		if 'etal' == max:lower():gsub("[ '%.]", '') then						-- the :gsub() portion makes 'etal' from a variety of 'et al.' spellings and stylings
			max = count + 1;													-- number of authors + 1 so display all author name plus et al.
			etal = true;														-- overrides value set by extract_names()
		elseif max:match ('^%d+$') then											-- if is a string of numbers
			max = tonumber (max);												-- make it a number
			if max &gt;= count then												-- if |display-xxxxors= value greater than or equal to number of authors/editors
				add_maint_cat ('disp_auth_ed', cfg.special_case_translation [list_name]);
			end
		else																	-- not a valid keyword or number
			table.insert( z.message_tail, { set_error( 'invalid_param_val', {'display-' .. list_name, max}, true ) } );		-- add error message
			max = nil;															-- unset; as if |display-xxxxors= had not been set
		end
	end
	
	return max, etal;
end


--[[--------------------------&lt; E X T R A _ T E X T _ I N _ P A G E _ C H E C K &gt;------------------------------

Adds page to Category:CS1 maint: extra text if |page= or |pages= has what appears to be some form of p. or pp. 
abbreviation in the first characters of the parameter content.

check Page and Pages for extraneous p, p., pp, and pp. at start of parameter value:
	good pattern: '^P[^%.P%l]' matches when |page(s)= begins PX or P# but not Px where x and X are letters and # is a dgiit
	bad pattern: '^[Pp][Pp]' matches matches when |page(s)= begins pp or pP or Pp or PP

]]

local function extra_text_in_page_check (page)
	local good_pattern = '^P[^%.Pp]';											-- ok to begin with uppercase P: P7 (pg 7 of section P) but not p123 (page 123) TODO: add Gg for PG or Pg?
	local bad_pattern = '^[Pp]?[Pp]%.?[ %d]';

	if not page:match (good_pattern) and (page:match (bad_pattern) or  page:match ('^[Pp]ages?')) then
		add_maint_cat ('extra_text');
	end
end


--[=[-------------------------&lt; G E T _ V _ N A M E _ T A B L E &gt;----------------------------------------------

split apart a |vauthors= or |veditors= parameter.  This function allows for corporate names, wrapped in doubled
parentheses to also have commas; in the old version of the code, the doubled parnetheses were included in the
rendered citation and in the metadata.  Individual author names may be wikilinked

	|vauthors=Jones AB, [[E. B. White|White EB]], ((Black, Brown, and Co.))

]=]

local function get_v_name_table (vparam, output_table, output_link_table)
	local name_table = mw.text.split(vparam, "%s*,%s*");						-- names are separated by commas
	local wl_type, label, link;													-- wl_type not used here; just a place holder
	
	local i = 1;
	
	while name_table[i] do
		if name_table[i]:match ('^%(%(.*[^%)][^%)]$') then						-- first segment of corporate with one or more commas; this segment has the opening doubled parens
			local name = name_table[i];
			i=i+1;																-- bump indexer to next segment
			while name_table[i] do
				name = name .. ', ' .. name_table[i];							-- concatenate with previous segments
				if name_table[i]:match ('^.*%)%)$') then						-- if this table member has the closing doubled parens
					break;														-- and done reassembling so
				end
				i=i+1;															-- bump indexer
			end
			table.insert (output_table, name);									-- and add corporate name to the output table
			table.insert (output_link_table, '');								-- no wikilink
		else
			wl_type, label, link = is_wikilink (name_table[i]);					-- wl_type is: 0, no wl (text in label variable); 1, [[D]]; 2, [[L|D]]
			table.insert (output_table, label);									-- add this name
			if 1 == wl_type then
				table.insert (output_link_table, label);						-- simple wikilink [[D]]
			else
				table.insert (output_link_table, link);							-- no wikilink or [[L|D]]; add this link if there is one, else empty string
			end
		end
		i = i+1;
	end	
	return output_table;
end


--[[--------------------------&lt; P A R S E _ V A U T H O R S _ V E D I T O R S &gt;--------------------------------

This function extracts author / editor names from |vauthors= or |veditors= and finds matching |xxxxor-maskn= and
|xxxxor-linkn= in args.  It then returns a table of assembled names just as extract_names() does.

Author / editor names in |vauthors= or |veditors= must be in Vancouver system style. Corporate or institutional names
may sometimes be required and because such names will often fail the is_good_vanc_name() and other format compliance
tests, are wrapped in doubled paranethese ((corporate name)) to suppress the format tests.

Supports generational suffixes Jr, 2nd, 3rd, 4th–6th.

This function sets the vancouver error when a reqired comma is missing and when there is a space between an author's initials.

]]

local function parse_vauthors_veditors (args, vparam, list_name)
	local names = {};															-- table of names assembled from |vauthors=, |author-maskn=, |author-linkn=
	local v_name_table = {};
	local v_link_table = {};													-- when name is wikilinked, targets go in this table
	local etal = false;															-- return value set to true when we find some form of et al. vauthors parameter
	local last, first, link, mask, suffix;
	local corporate = false;

	vparam, etal = name_has_etal (vparam, etal, true);							-- find and remove variations on et al. do not categorize (do it here because et al. might have a period)
	v_name_table = get_v_name_table (vparam, v_name_table, v_link_table);						-- names are separated by commas

	for i, v_name in ipairs(v_name_table) do
		if v_name:match ('^%(%(.+%)%)$') then									-- corporate authors are wrapped in doubled parentheses to supress vanc formatting and error detection
			first = '';															-- set to empty string for concatenation and because it may have been set for previous author/editor
			last = v_name:match ('^%(%((.+)%)%)$')								-- remove doubled parntheses
			corporate = true;													-- flag used in list_people()
		elseif string.find(v_name, "%s") then
			if v_name:find('[;%.]') then										-- look for commonly occurring punctuation characters; 
				add_vanc_error ('punctuation');
			end
			local lastfirstTable = {}
			lastfirstTable = mw.text.split(v_name, "%s")
			first = table.remove(lastfirstTable);								-- removes and returns value of last element in table which should be author intials
			if is_suffix (first) then											-- if a valid suffix
				suffix = first													-- save it as a suffix and
				first = table.remove(lastfirstTable);							-- get what should be the initials from the table
			end																	-- no suffix error message here because letter combination may be result of Romanization; check for digits?
			last = table.concat(lastfirstTable, " ")							-- returns a string that is the concatenation of all other names that are not initials
			if mw.ustring.match (last, '%a+%s+%u+%s+%a+') then
				add_vanc_error ('missing comma');								-- matches last II last; the case when a comma is missing
			end
			if mw.ustring.match (v_name, ' %u %u$') then						-- this test is in the wrong place TODO: move or replace with a more appropriate test
				add_vanc_error ('name');										-- matches a space between two intiials
			end
		else
			first = '';															-- set to empty string for concatenation and because it may have been set for previous author/editor
			last = v_name;														-- last name or single corporate name?  Doesn't support multiword corporate names? do we need this?
		end
																
		if is_set (first) then
			if not mw.ustring.match (first, "^%u?%u$") then						-- first shall contain one or two upper-case letters, nothing else
				add_vanc_error ('initials');									-- too many initials; mixed case initials (which may be ok Romanization); hyphenated initials
			end
			is_good_vanc_name (last, first);									-- check first and last before restoring the suffix which may have a non-Latin digit
			if is_set (suffix) then
				first = first .. ' ' .. suffix;									-- if there was a suffix concatenate with the initials
				suffix = '';													-- unset so we don't add this suffix to all subsequent names
			end
		else
			if not corporate then
				is_good_vanc_name (last, '');
			end
		end

		link = select_one( args, cfg.aliases[list_name .. '-Link'], 'redundant_parameters', i ) or v_link_table[i];
		mask = select_one( args, cfg.aliases[list_name .. '-Mask'], 'redundant_parameters', i );
		names[i] = {last = last, first = first, link = link, mask = mask, corporate=corporate};		-- add this assembled name to our names list
	end
	return names, etal;															-- all done, return our list of names
end


--[[--------------------------&lt; S E L E C T _ A U T H O R _ E D I T O R _ S O U R C E &gt;------------------------

Select one of |authors=, |authorn= / |lastn / firstn=, or |vauthors= as the source of the author name list or
select one of |editors=, |editorn= / editor-lastn= / |editor-firstn= or |veditors= as the source of the editor name list.

Only one of these appropriate three will be used.  The hierarchy is: |authorn= (and aliases) highest and |authors= lowest and
similarly, |editorn= (and aliases) highest and |editors= lowest

When looking for |authorn= / |editorn= parameters, test |xxxxor1= and |xxxxor2= (and all of their aliases); stops after the second
test which mimicks the test used in extract_names() when looking for a hole in the author name list.  There may be a better
way to do this, I just haven't discovered what that way is.

Emits an error message when more than one xxxxor name source is provided.

In this function, vxxxxors = vauthors or veditors; xxxxors = authors or editors as appropriate.

]]

local function select_author_editor_source (vxxxxors, xxxxors, args, list_name)
local lastfirst = false;
	if select_one( args, cfg.aliases[list_name .. '-Last'], 'none', 1 ) or		-- do this twice incase we have a |first1= without a |last1=; this ...
		select_one( args, cfg.aliases[list_name .. '-First'], 'none', 1 ) or	-- ... also catches the case where |first= is used with |vauthors=
		select_one( args, cfg.aliases[list_name .. '-Last'], 'none', 2 ) or
		select_one( args, cfg.aliases[list_name .. '-First'], 'none', 2 ) then
			lastfirst=true;
	end

	if (is_set (vxxxxors) and true == lastfirst) or								-- these are the three error conditions
		(is_set (vxxxxors) and is_set (xxxxors)) or
		(true == lastfirst and is_set (xxxxors)) then
			local err_name;
			if 'AuthorList' == list_name then									-- figure out which name should be used in error message
				err_name = 'author';
			else
				err_name = 'editor';
			end
			table.insert( z.message_tail, { set_error( 'redundant_parameters',
				{err_name .. '-name-list parameters'}, true ) } );				-- add error message
	end

	if true == lastfirst then return 1 end;										-- return a number indicating which author name source to use
	if is_set (vxxxxors) then return 2 end;
	if is_set (xxxxors) then return 3 end;
	return 1;																	-- no authors so return 1; this allows missing author name test to run in case there is a first without last 
end


--[[--------------------------&lt; I S _ V A L I D _ P A R A M E T E R _ V A L U E &gt;------------------------------

This function is used to validate a parameter's assigned value for those parameters that have only a limited number
of allowable values (yes, y, true, no, etc).  When the parameter value has not been assigned a value (missing or empty
in the source template) the function returns true.  If the parameter value is one of the list of allowed values returns
true; else, emits an error message and returns false.

]]

local function is_valid_parameter_value (value, name, possible)
	if not is_set (value) then
		return true;															-- an empty parameter is ok
	elseif in_array(value:lower(), possible) then
		return true;
	else
		table.insert( z.message_tail, { set_error( 'invalid_param_val', {name, value}, true ) } );	-- not an allowed value so add error message
		return false
	end
end


--[[--------------------------&lt; T E R M I N A T E _ N A M E _ L I S T &gt;----------------------------------------

This function terminates a name list (author, contributor, editor) with a separator character (sepc) and a space
when the last character is not a sepc character or when the last three characters are not sepc followed by two
closing square brackets (close of a wikilink).  When either of these is true, the name_list is terminated with a
single space character.

]]

local function terminate_name_list (name_list, sepc)
	if (string.sub (name_list,-3,-1) == sepc .. '. ') then						-- if already properly terminated
		return name_list;														-- just return the name list
	elseif (string.sub (name_list,-1,-1) == sepc) or (string.sub (name_list,-3,-1) == sepc .. ']]') then	-- if last name in list ends with sepc char
		return name_list .. " ";												-- don't add another
	else
		return name_list .. sepc .. ' ';										-- otherwise terninate the name list
	end
end


--[[-------------------------&lt; F O R M A T _ V O L U M E _ I S S U E &gt;----------------------------------------

returns the concatenation of the formatted volume and issue parameters as a single string; or formatted volume
or formatted issue, or an empty string if neither are set.

]]
	
local function format_volume_issue (volume, issue, cite_class, origin, sepc, lower)
	if not is_set (volume) and not is_set (issue) then
		return '';
	end
	
	if 'magazine' == cite_class or (in_array (cite_class, {'citation', 'map'}) and 'magazine' == origin) then
		if is_set (volume) and is_set (issue) then
			return wrap_msg ('vol-no', {sepc, volume, issue}, lower);
		elseif is_set (volume) then
			return wrap_msg ('vol', {sepc, volume}, lower);
		else
			return wrap_msg ('issue', {sepc, issue}, lower);
		end
	end

	local vol = '';
		
	if is_set (volume) then
		if (4 &lt; mw.ustring.len(volume)) then
			vol = substitute (cfg.messages['j-vol'], {sepc, volume});
		else
			vol = substitute (cfg.presentation['vol-bold'], {sepc, hyphen_to_dash(volume)});
		end
	end
	if is_set (issue) then
		return vol .. substitute (cfg.messages['j-issue'], issue);
	end
	return vol;
end


--[[-------------------------&lt; F O R M A T _ P A G E S _ S H E E T S &gt;-----------------------------------------

adds static text to one of |page(s)= or |sheet(s)= values and returns it with all of the others set to empty strings.
The return order is:
	page, pages, sheet, sheets

Singular has priority over plural when both are provided.

]]

local function format_pages_sheets (page, pages, sheet, sheets, cite_class, origin, sepc, nopp, lower)
	if 'map' == cite_class then													-- only cite map supports sheet(s) as in-source locators
		if is_set (sheet) then
			if 'journal' == origin then
				return '', '', wrap_msg ('j-sheet', sheet, lower), '';
			else
				return '', '', wrap_msg ('sheet', {sepc, sheet}, lower), '';
			end
		elseif is_set (sheets) then
			if 'journal' == origin then
				return '', '', '', wrap_msg ('j-sheets', sheets, lower);
			else
				return '', '', '', wrap_msg ('sheets', {sepc, sheets}, lower);
			end
		end
	end

	local is_journal = 'journal' == cite_class or (in_array (cite_class, {'citation', 'map', 'interview'}) and 'journal' == origin);
	
	if is_set (page) then
		if is_journal then
			return substitute (cfg.messages['j-page(s)'], page), '', '', '';
		elseif not nopp then
			return substitute (cfg.messages['p-prefix'], {sepc, page}), '', '', '';
		else
			return substitute (cfg.messages['nopp'], {sepc, page}), '', '', '';
		end
	elseif is_set(pages) then
		if is_journal then
			return substitute (cfg.messages['j-page(s)'], pages), '', '', '';
		elseif tonumber(pages) ~= nil and not nopp then										-- if pages is only digits, assume a single page number
			return '', substitute (cfg.messages['p-prefix'], {sepc, pages}), '', '';
		elseif not nopp then
			return '', substitute (cfg.messages['pp-prefix'], {sepc, pages}), '', '';
		else
			return '', substitute (cfg.messages['nopp'], {sepc, pages}), '', '';
		end
	end
	
	return '', '', '', '';														-- return empty strings
end


--[=[-------------------------&lt; A R C H I V E _ U R L _ C H E C K &gt;--------------------------------------------

Check archive.org urls to make sure they at least look like they are pointing at valid archives and not to the 
save snapshot url or to calendar pages.  When the archive url is 'https://web.archive.org/save/' (or http://...)
archive.org saves a snapshot of the target page in the url.  That is something that Wikipedia should not allow
unwitting readers to do.

When the archive.org url does not have a complete timestamp, archive.org chooses a snapshot according to its own
algorithm or provides a calendar 'search' result.  [[WP:ELNO]] discourages links to search results.

This function looks at the value assigned to |archive-url= and returns empty strings for |archive-url= and
|archive-date= and an error message when:
	|archive-url= holds an archive.org save command url
	|archive-url= is an archive.org url that does not have a complete timestamp (YYYYMMDDhhmmss 14 digits) in the
		correct place
otherwise returns |archive-url= and |archive-date=

There are two mostly compatible archive.org urls:
	//web.archive.org/&lt;timestamp&gt;...		-- the old form
	//web.archive.org/web/&lt;timestamp&gt;...	-- the new form

The old form does not support or map to the new form when it contains a display flag.  There are four identified flags
('id_', 'js_', 'cs_', 'im_') but since archive.org ignores others following the same form (two letters and an underscore)
we don't check for these specific flags but we do check the form.

This function supports a preview mode.  When the article is rendered in preview mode, this funct may return a modified
archive url:
	for save command errors, return undated wildcard (/*/)
	for timestamp errors when the timestamp has a wildcard, return the url unmodified
	for timestamp errors when the timestamp does not have a wildcard, return with timestamp limited to six digits plus wildcard (/yyyymm*/)

]=]

local function archive_url_check (url, date)
	local err_msg = '';															-- start with the error message empty
	local path, timestamp, flag;												-- portions of the archive.or url
	
	if (not url:match('//web%.archive%.org/')) and (not url:match('//liveweb%.archive%.org/')) then		-- also deprecated liveweb Wayback machine url
		return url, date;														-- not an archive.org archive, return ArchiveURL and ArchiveDate
	end

	if url:match('//web%.archive%.org/save/') then								-- if a save command url, we don't want to allow saving of the target page 
		err_msg = 'save command';
		url = url:gsub ('(//web%.archive%.org)/save/', '%1/*/', 1);				-- for preview mode: modify ArchiveURL
	elseif url:match('//liveweb%.archive%.org/') then
		err_msg = 'liveweb';
	else
		path, timestamp, flag = url:match('//web%.archive%.org/([^%d]*)(%d+)([^/]*)/');		-- split out some of the url parts for evaluation
		
		if not is_set(timestamp) or 14 ~= timestamp:len() then					-- path and flag optional, must have 14-digit timestamp here
			err_msg = 'timestamp';
			if '*' ~= flag then
				url=url:gsub ('(//web%.archive%.org/[^%d]*%d?%d?%d?%d?%d?%d?)[^/]*', '%1*', 1)	-- for preview, modify ts to be yearmo* max (0-6 digits plus splat)
			end
		elseif is_set(path) and 'web/' ~= path then								-- older archive urls do not have the extra 'web/' path element
			err_msg = 'path';
		elseif is_set (flag) and not is_set (path) then							-- flag not allowed with the old form url (without the 'web/' path element)
			err_msg = 'flag';
		elseif is_set (flag) and not flag:match ('%a%a_') then					-- flag if present must be two alpha characters and underscore (requires 'web/' path element)
			err_msg = 'flag';
		else
			return url, date;													-- return archiveURL and ArchiveDate
		end
	end
																				-- if here, something not right so
	table.insert( z.message_tail, { set_error( 'archive_url', {err_msg}, true ) } );	-- add error message and
	if is_set (Frame:preprocess('{{REVISIONID}}')) then
		return '', '';															-- return empty strings for archiveURL and ArchiveDate
	else
		return url, date;														-- preview mode so return archiveURL and ArchiveDate
	end
end


--[[--------------------------&lt; M I S S I N G _ P I P E _ C H E C K &gt;------------------------------------------

Look at the contents of a parameter. If the content has a string of characters and digits followed by an equal
sign, compare the alphanumeric string to the list of cs1|2 parameters.  If found, then the string is possibly a
parameter that is missing its pipe:
	{{cite ... |title=Title access-date=2016-03-17}}

cs1|2 shares some parameter names with xml/html atributes: class=, title=, etc.  To prevent false positives xml/html
tags are removed before the search.

If a missing pipe is detected, this function adds the missing pipe maintenance category.

]]

local function missing_pipe_check (value)
	local capture;
	value = value:gsub ('%b&lt;&gt;', '');											-- remove xml/html tags because attributes: class=, title=, etc 

	capture = value:match ('%s+(%a[%a%d]+)%s*=') or value:match ('^(%a[%a%d]+)%s*=');	-- find and categorize parameters with possible missing pipes
	if capture and validate (capture) then								-- if the capture is a valid parameter name
		add_maint_cat ('missing_pipe');
	end
end


--[[--------------------------&lt; C I T A T I O N 0 &gt;------------------------------------------------------------

This is the main function doing the majority of the citation formatting.

]]

local function citation0( config, args)
	--[[ 
	Load Input Parameters
	The argument_wrapper facilitates the mapping of multiple aliases to single internal variable.
	]]
	local A = argument_wrapper( args );
	local i 

	-- Pick out the relevant fields from the arguments.  Different citation templates
	-- define different field names for the same underlying things.	

-- set default parameter values defined by |mode= parameter.
	local Mode = A['Mode'];
	if not is_valid_parameter_value (Mode, 'mode', cfg.keywords['mode']) then
		Mode = '';
	end

	local author_etal;
	local a	= {};																-- authors list from |lastn= / |firstn= pairs or |vauthors=
	local Authors;
	local NameListFormat = A['NameListFormat'];
	local Collaboration = A['Collaboration'];

	do																			-- to limit scope of selected
		local selected = select_author_editor_source (A['Vauthors'], A['Authors'], args, 'AuthorList');
		if 1 == selected then
			a, author_etal = extract_names (args, 'AuthorList');				-- fetch author list from |authorn= / |lastn= / |firstn=, |author-linkn=, and |author-maskn=
		elseif 2 == selected then
			NameListFormat = 'vanc';											-- override whatever |name-list-format= might be
			a, author_etal = parse_vauthors_veditors (args, args.vauthors, 'AuthorList');	-- fetch author list from |vauthors=, |author-linkn=, and |author-maskn=
		elseif 3 == selected then
			Authors = A['Authors'];												-- use content of |authors=
			if 'authors' == A:ORIGIN('Authors') then							-- but add a maint cat if the parameter is |authors=
				add_maint_cat ('authors');										-- because use of this parameter is discouraged; what to do about the aliases is a TODO:
			end
		end
		if is_set (Collaboration) then
			author_etal = true;													-- so that |display-authors=etal not required
		end
	end

	local Others = A['Others'];

	local editor_etal;
	local e	= {};																-- editors list from |editor-lastn= / |editor-firstn= pairs or |veditors=
	local Editors;

	do																			-- to limit scope of selected
		local selected = select_author_editor_source (A['Veditors'], A['Editors'], args, 'EditorList');
		if 1 == selected then
			e, editor_etal = extract_names (args, 'EditorList');				-- fetch editor list from |editorn= / |editor-lastn= / |editor-firstn=, |editor-linkn=, and |editor-maskn=
		elseif 2 == selected then
			NameListFormat = 'vanc';											-- override whatever |name-list-format= might be
			e, editor_etal = parse_vauthors_veditors (args, args.veditors, 'EditorList');	-- fetch editor list from |veditors=, |editor-linkn=, and |editor-maskn=
		elseif 3 == selected then
			Editors = A['Editors'];												-- use content of |editors=
			add_maint_cat ('editors');											-- but add a maint cat because use of this parameter is discouraged
		end
	end

	local t = {};																-- translators list from |translator-lastn= / translator-firstn= pairs
	local Translators;															-- assembled translators name list
	t = extract_names (args, 'TranslatorList');									-- fetch translator list from |translatorn= / |translator-lastn=, -firstn=, -linkn=, -maskn=

	local interviewers_list = {};
	local Interviewers = A['Interviewers']
	if is_set (Interviewers) then												-- add a maint cat if the |interviewers= is used
		add_maint_cat ('interviewers');											-- because use of this parameter is discouraged
	else
		interviewers_list = extract_names (args, 'InterviewerList');			-- else, process preferred interviewers parameters
	end

	local c = {};																-- contributors list from |contributor-lastn= / contributor-firstn= pairs
	local Contributors;															-- assembled contributors name list
	local Contribution = A['Contribution'];
	if in_array(config.CitationClass, {"book","citation"}) and not is_set(A['Periodical']) then	-- |contributor= and |contribution= only supported in book cites
		c = extract_names (args, 'ContributorList');							-- fetch contributor list from |contributorn= / |contributor-lastn=, -firstn=, -linkn=, -maskn=
		
		if 0 &lt; #c then
			if not is_set (Contribution) then									-- |contributor= requires |contribution=
				table.insert( z.message_tail, { set_error( 'contributor_missing_required_param', 'contribution')});	-- add missing contribution error message
				c = {};															-- blank the contributors' table; it is used as a flag later
			end
			if 0 == #a then														-- |contributor= requires |author=
				table.insert( z.message_tail, { set_error( 'contributor_missing_required_param', 'author')});	-- add missing author error message
				c = {};															-- blank the contributors' table; it is used as a flag later
			end
		end
	else																		-- if not a book cite
		if select_one (args, cfg.aliases['ContributorList-Last'], 'redundant_parameters', 1 ) then	-- are there contributor name list parameters?
			table.insert( z.message_tail, { set_error( 'contributor_ignored')});	-- add contributor ignored error message
		end
		Contribution = nil;														-- unset
	end

	if not is_valid_parameter_value (NameListFormat, 'name-list-format', cfg.keywords['name-list-format']) then			-- only accepted value for this parameter is 'vanc'
		NameListFormat = '';													-- anything else, set to empty string
	end

	local Year = A['Year'];
	local PublicationDate = A['PublicationDate'];
	local OrigYear = A['OrigYear'];
	local Date = A['Date'];
	local LayDate = A['LayDate'];
	------------------------------------------------- Get title data
	local Title = A['Title'];
	local ScriptTitle = A['ScriptTitle'];
	local BookTitle = A['BookTitle'];
	local Conference = A['Conference'];
	local TransTitle = A['TransTitle'];
	local TitleNote = A['TitleNote'];
	local TitleLink = A['TitleLink'];
			link_title_ok (TitleLink, A:ORIGIN ('TitleLink'), Title, 'title');	-- check for wikimarkup in |title-link= or wikimarkup in |title= when |title-link= is set

	local Chapter = A['Chapter'];
	local ScriptChapter = A['ScriptChapter'];
	local ChapterLink	-- = A['ChapterLink'];									-- deprecated as a parameter but still used internally by cite episode
	local TransChapter = A['TransChapter'];
	local TitleType = A['TitleType'];
	local Degree = A['Degree'];
	local Docket = A['Docket'];
	local ArchiveFormat = A['ArchiveFormat'];

	local ArchiveDate;
	local ArchiveURL;

	ArchiveURL, ArchiveDate = archive_url_check (A['ArchiveURL'], A['ArchiveDate'])
	
	local DeadURL = A['DeadURL']
		if not is_valid_parameter_value (DeadURL, 'dead-url', cfg.keywords ['deadurl']) then	-- set in config.defaults to 'yes'
			DeadURL = '';														-- anything else, set to empty string
		end

	local URL = A['URL']
	local URLorigin = A:ORIGIN('URL');											-- get name of parameter that holds URL
	local ChapterURL = A['ChapterURL'];
	local ChapterURLorigin = A:ORIGIN('ChapterURL');							-- get name of parameter that holds ChapterURL
	local ConferenceFormat = A['ConferenceFormat'];
	local ConferenceURL = A['ConferenceURL'];
	local ConferenceURLorigin = A:ORIGIN('ConferenceURL');						-- get name of parameter that holds ConferenceURL
	local Periodical = A['Periodical'];
	local Periodical_origin = A:ORIGIN('Periodical');							-- get the name of the periodical parameter

	local Series = A['Series'];
	
	local Volume;
	local Issue;
	local Page;
	local Pages;
	local At;

	if in_array (config.CitationClass, cfg.templates_using_volume) then
		Volume = A['Volume'];
	end
																				-- conference &amp; map books do not support issue
	if in_array (config.CitationClass, cfg.templates_using_issue) and not (in_array (config.CitationClass, {'conference', 'map'}) and not is_set (Periodical))then
		Issue = A['Issue'];
	end
	local Position = '';
	if not in_array (config.CitationClass, cfg.templates_not_using_page) then
		Page = A['Page'];
		Pages = hyphen_to_dash( A['Pages'] );	
		At = A['At'];
	end

	local Edition = A['Edition'];
	local PublicationPlace = A['PublicationPlace']
	local Place = A['Place'];
	
	local PublisherName = A['PublisherName'];
	local RegistrationRequired = A['RegistrationRequired'];
		if not is_valid_parameter_value (RegistrationRequired, 'registration', cfg.keywords ['yes_true_y']) then
			RegistrationRequired=nil;
		end

	local SubscriptionRequired = A['SubscriptionRequired'];
		if not is_valid_parameter_value (SubscriptionRequired, 'subscription', cfg.keywords ['yes_true_y']) then
			SubscriptionRequired=nil;
		end

	local UrlAccess = A['UrlAccess'];
		if not is_valid_parameter_value (UrlAccess, 'url-access', cfg.keywords ['url-access']) then
			UrlAccess = nil;
		end
		if not is_set(URL) and is_set(UrlAccess) then
			UrlAccess = nil;
			table.insert( z.message_tail, { set_error( 'param_access_requires_param', {'url'}, true ) } );
		end

		if is_set (UrlAccess) and is_set (SubscriptionRequired) then			-- while not aliases, these are much the same so if both are set
			table.insert( z.message_tail, { set_error( 'redundant_parameters', {wrap_style ('parameter', 'url-access') .. ' and ' .. wrap_style ('parameter', 'subscription')}, true ) } );		-- add error message
			SubscriptionRequired = nil;											-- unset; prefer |access= over |subscription=
		end
		if is_set (UrlAccess) and is_set (RegistrationRequired) then			-- these are not the same but contradictory so if both are set
			table.insert( z.message_tail, { set_error( 'redundant_parameters', {wrap_style ('parameter', 'url-access') .. ' and ' .. wrap_style ('parameter', 'registration')}, true ) } );		-- add error message
			RegistrationRequired = nil;											-- unset; prefer |access= over |registration=
		end

	local ChapterUrlAccess = A['ChapterUrlAccess'];
		if not is_valid_parameter_value (ChapterUrlAccess, 'chapter-url-access', cfg.keywords ['url-access']) then	-- same as url-access
			ChapterUrlAccess = nil;
		end
		if not is_set(ChapterURL) and is_set(ChapterUrlAccess) then
			ChapterUrlAccess = nil;
			table.insert( z.message_tail, { set_error( 'param_access_requires_param', {'chapter-url'}, true ) } );
		end

	local Via = A['Via'];
	local AccessDate = A['AccessDate'];
	local Agency = A['Agency'];

	local Language = A['Language'];
	local Format = A['Format'];
	local ChapterFormat = A['ChapterFormat'];
	local DoiBroken = A['DoiBroken'];
	local ID = A['ID'];
	local ASINTLD = A['ASINTLD'];
	local IgnoreISBN = A['IgnoreISBN'];
		if not is_valid_parameter_value (IgnoreISBN, 'ignore-isbn-error', cfg.keywords ['yes_true_y']) then
			IgnoreISBN = nil;													-- anything else, set to empty string
		end
	local Embargo = A['Embargo'];
	local Class = A['Class'];													-- arxiv class identifier

	local ID_list = extract_ids( args );
	local ID_access_levels = extract_id_access_levels( args, ID_list );

	local Quote = A['Quote'];

	local LayFormat = A['LayFormat'];
	local LayURL = A['LayURL'];
	local LaySource = A['LaySource'];
	local Transcript = A['Transcript'];
	local TranscriptFormat = A['TranscriptFormat'];
	local TranscriptURL = A['TranscriptURL'] 
	local TranscriptURLorigin = A:ORIGIN('TranscriptURL');						-- get name of parameter that holds TranscriptURL

	local LastAuthorAmp = A['LastAuthorAmp'];
		if not is_valid_parameter_value (LastAuthorAmp, 'last-author-amp', cfg.keywords ['yes_true_y']) then
			LastAuthorAmp = nil;												-- set to empty string
		end

	local no_tracking_cats = A['NoTracking'];
		if not is_valid_parameter_value (no_tracking_cats, 'no-tracking', cfg.keywords ['yes_true_y']) then
			no_tracking_cats = nil;												-- set to empty string
		end

	--local variables that are not cs1 parameters
	local use_lowercase;														-- controls capitalization of certain static text
	local this_page = mw.title.getCurrentTitle();								-- also used for COinS and for language
	local anchor_year;															-- used in the CITEREF identifier
	local COinS_date = {};														-- holds date info extracted from |date= for the COinS metadata by Module:Date verification

	local DF = A['DF'];															-- date format set in cs1|2 template
	if not is_valid_parameter_value (DF, 'df', cfg.keywords['date-format']) then	-- validate reformatting keyword
		DF = '';																-- not valid, set to empty string
	end

	local sepc;											-- separator between citation elements for CS1 a period, for CS2, a comma
	local PostScript;
	local Ref;
	sepc, PostScript, Ref = set_style (Mode:lower(), A['PostScript'], A['Ref'], config.CitationClass);
	use_lowercase = ( sepc == ',' );					-- used to control capitalization for certain static text

	--check this page to see if it is in one of the namespaces that cs1 is not supposed to add to the error categories
	if not is_set (no_tracking_cats) then										-- ignore if we are already not going to categorize this page
		if in_array (this_page.nsText, cfg.uncategorized_namespaces) then
			no_tracking_cats = "true";											-- set no_tracking_cats
		end
		for _,v in ipairs (cfg.uncategorized_subpages) do						-- cycle through page name patterns
			if this_page.text:match (v) then									-- test page name against each pattern
				no_tracking_cats = "true";										-- set no_tracking_cats
				break;															-- bail out if one is found
			end
		end
	end

	-- check for extra |page=, |pages= or |at= parameters. (also sheet and sheets while we're at it)
	select_one( args, {'page', 'p', 'pp', 'pages', 'at', 'sheet', 'sheets'}, 'redundant_parameters' );		-- this is a dummy call simply to get the error message and category

	local NoPP = A['NoPP'] 
	if is_set (NoPP) and is_valid_parameter_value (NoPP, 'nopp', cfg.keywords ['yes_true_y']) then
		NoPP = true;
	else
		NoPP = nil;																-- unset, used as a flag later
	end

	if is_set(Page) then
		if is_set(Pages) or is_set(At) then
			Pages = '';															-- unset the others
			At = '';
		end
		extra_text_in_page_check (Page);										-- add this page to maint cat if |page= value begins with what looks like p. or pp.
	elseif is_set(Pages) then
		if is_set(At) then
			At = '';															-- unset
		end
		extra_text_in_page_check (Pages);										-- add this page to maint cat if |pages= value begins with what looks like p. or pp.
	end	

	-- both |publication-place= and |place= (|location=) allowed if different
	if not is_set(PublicationPlace) and is_set(Place) then
		PublicationPlace = Place;							-- promote |place= (|location=) to |publication-place
	end
	
	if PublicationPlace == Place then Place = ''; end		-- don't need both if they are the same
	
	--[[
	Parameter remapping for cite encyclopedia:
	When the citation has these parameters:
		|encyclopedia and |title then map |title to |article and |encyclopedia to |title
		|encyclopedia and |article then map |encyclopedia to |title
		|encyclopedia then map |encyclopedia to |title
	
		|trans-title maps to |trans-chapter when |title is re-mapped
		|url maps to |chapterurl when |title is remapped
	
	All other combinations of |encyclopedia, |title, and |article are not modified
	
	]]

local Encyclopedia = A['Encyclopedia'];

	if ( config.CitationClass == "encyclopaedia" ) or ( config.CitationClass == "citation" and is_set (Encyclopedia)) then	-- test code for citation
		if is_set(Periodical) then												-- Periodical is set when |encyclopedia is set
			if is_set(Title) or is_set (ScriptTitle) then
				if not is_set(Chapter) then
					Chapter = Title;											-- |encyclopedia and |title are set so map |title to |article and |encyclopedia to |title
					ScriptChapter = ScriptTitle;
					TransChapter = TransTitle;
					ChapterURL = URL;
					ChapterUrlAccess = UrlAccess;

					if not is_set (ChapterURL) and is_set (TitleLink) then
						Chapter = make_wikilink (TitleLink, Chapter);
					end
					Title = Periodical;
					ChapterFormat = Format;
					Periodical = '';											-- redundant so unset
					TransTitle = '';
					URL = '';
					Format = '';
					TitleLink = '';
					ScriptTitle = '';
				end
			else																-- |title not set
				Title = Periodical;												-- |encyclopedia set and |article set or not set so map |encyclopedia to |title
				Periodical = '';												-- redundant so unset
			end
		end
	end

	-- Special case for cite techreport.
	if (config.CitationClass == "techreport") then								-- special case for cite techreport
		if is_set(A['Number']) then												-- cite techreport uses 'number', which other citations alias to 'issue'
			if not is_set(ID) then												-- can we use ID for the "number"?
				ID = A['Number'];												-- yes, use it
			else																-- ID has a value so emit error message
				table.insert( z.message_tail, { set_error('redundant_parameters', {wrap_style ('parameter', 'id') .. ' and ' .. wrap_style ('parameter', 'number')}, true )});
			end
		end	
	end

	-- special case for cite mailing list
	if (config.CitationClass == "mailinglist") then
		Periodical = A ['MailingList'];
	elseif 'mailinglist' == A:ORIGIN('Periodical') then
		Periodical = '';														-- unset because mailing list is only used for cite mailing list
	end

	-- Account for the oddity that is {{cite conference}}, before generation of COinS data.
	if 'conference' == config.CitationClass then
		if is_set(BookTitle) then
			Chapter = Title;
--			ChapterLink = TitleLink;											-- |chapterlink= is deprecated
			ChapterURL = URL;
			ChapterUrlAccess = UrlAccess;
			ChapterURLorigin = URLorigin;
			URLorigin = '';
			ChapterFormat = Format;
			TransChapter = TransTitle;
			Title = BookTitle;
			Format = '';
--			TitleLink = '';
			TransTitle = '';
			URL = '';
		end
	elseif 'speech' ~= config.CitationClass then
		Conference = '';														-- not cite conference or cite speech so make sure this is empty string
	end

	-- cite map oddities
	local Cartography = "";
	local Scale = "";
	local Sheet = A['Sheet'] or '';
	local Sheets = A['Sheets'] or '';
	if config.CitationClass == "map" then
		Chapter = A['Map'];
		ChapterURL = A['MapURL'];
		ChapterUrlAccess = UrlAccess;
		TransChapter = A['TransMap'];
		ChapterURLorigin = A:ORIGIN('MapURL');
		ChapterFormat = A['MapFormat'];
		
		Cartography = A['Cartography'];
		if is_set( Cartography ) then
			Cartography = sepc .. " " .. wrap_msg ('cartography', Cartography, use_lowercase);
		end		
		Scale = A['Scale'];
		if is_set( Scale ) then
			Scale = sepc .. " " .. Scale;
		end
	end

	-- Account for the oddities that are {{cite episode}} and {{cite serial}}, before generation of COinS data.
	if 'episode' == config.CitationClass or 'serial' == config.CitationClass then
		local AirDate = A['AirDate'];
		local SeriesLink = A['SeriesLink'];

		link_title_ok (SeriesLink, A:ORIGIN ('SeriesLink'), Series, 'series');	-- check for wikimarkup in |series-link= or wikimarkup in |series= when |series-link= is set

		local Network = A['Network'];
		local Station = A['Station'];
		local s, n = {}, {};
																				-- do common parameters first
		if is_set(Network) then table.insert(n, Network); end
		if is_set(Station) then table.insert(n, Station); end
		ID = table.concat(n, sepc .. ' ');
		
		if not is_set (Date) and is_set (AirDate) then							-- promote airdate to date
			Date = AirDate;
		end

		if 'episode' == config.CitationClass then								-- handle the oddities that are strictly {{cite episode}}
			local Season = A['Season'];
			local SeriesNumber = A['SeriesNumber'];

			if is_set (Season) and is_set (SeriesNumber) then					-- these are mutually exclusive so if both are set
				table.insert( z.message_tail, { set_error( 'redundant_parameters', {wrap_style ('parameter', 'season') .. ' and ' .. wrap_style ('parameter', 'seriesno')}, true ) } );		-- add error message
				SeriesNumber = '';												-- unset; prefer |season= over |seriesno=
			end
																				-- assemble a table of parts concatenated later into Series
			if is_set(Season) then table.insert(s, wrap_msg ('season', Season, use_lowercase)); end
			if is_set(SeriesNumber) then table.insert(s, wrap_msg ('series', SeriesNumber, use_lowercase)); end
			if is_set(Issue) then table.insert(s, wrap_msg ('episode', Issue, use_lowercase)); end
			Issue = '';															-- unset because this is not a unique parameter
	
			Chapter = Title;													-- promote title parameters to chapter
			ScriptChapter = ScriptTitle;
			ChapterLink = TitleLink;											-- alias episodelink
			TransChapter = TransTitle;
			ChapterURL = URL;
			ChapterUrlAccess = UrlAccess;
			ChapterURLorigin = A:ORIGIN('URL');
			
			Title = Series;														-- promote series to title
			TitleLink = SeriesLink;
			Series = table.concat(s, sepc .. ' ');								-- this is concatenation of season, seriesno, episode number

			if is_set (ChapterLink) and not is_set (ChapterURL) then			-- link but not URL
				Chapter = make_wikilink (ChapterLink, Chapter);
			elseif is_set (ChapterLink) and is_set (ChapterURL) then			-- if both are set, URL links episode;
				Series = make_wikilink (ChapterLink, Series);
			end
			URL = '';															-- unset
			TransTitle = '';
			ScriptTitle = '';
			
		else																	-- now oddities that are cite serial
			Issue = '';															-- unset because this parameter no longer supported by the citation/core version of cite serial
			Chapter = A['Episode'];												-- TODO: make |episode= available to cite episode someday?
			if is_set (Series) and is_set (SeriesLink) then
				Series = make_wikilink (SeriesLink, Series);
			end
			Series = wrap_style ('italic-title', Series);						-- series is italicized
		end	
	end
	-- end of {{cite episode}} stuff

	-- Account for the oddities that are {{cite arxiv}}, {{cite biorxiv}}, {{cite citeseerx}}, before generation of COinS data.
	do
		if in_array (config.CitationClass, {'arxiv', 'biorxiv', 'citeseerx'}) then
			if not is_set (ID_list[config.CitationClass:upper()]) then			-- |arxiv= or |eprint= required for cite arxiv; |biorxiv= &amp; |citeseerx= required for their templates
				table.insert( z.message_tail, { set_error( config.CitationClass .. '_missing', {}, true ) } );		-- add error message
			end
			
			if 'arxiv' == config.CitationClass then
				Periodical = 'arXiv';											-- set to arXiv for COinS; after that, must be set to empty string
			end

			if 'biorxiv' == config.CitationClass then
				Periodical = 'bioRxiv';											-- set to bioRxiv for COinS; after that, must be set to empty string
			end

			if 'citeseerx' == config.CitationClass then
				Periodical = 'CiteSeerX';										-- set to CiteSeerX for COinS; after that, must be set to empty string
			end
		end
	end

	-- handle type parameter for those CS1 citations that have default values
	if in_array(config.CitationClass, {"AV-media-notes", "interview", "mailinglist", "map", "podcast", "pressrelease", "report", "techreport", "thesis"}) then
		TitleType = set_titletype (config.CitationClass, TitleType);
		if is_set(Degree) and "Thesis" == TitleType then						-- special case for cite thesis
			TitleType = Degree .. ' ' .. cfg.title_types ['thesis']:lower();
		end
	end

	if is_set(TitleType) then													-- if type parameter is specified
		TitleType = substitute( cfg.messages['type'], TitleType);				-- display it in parentheses
	-- TODO: Hack on TitleType to fix bunched parentheses problem
	end

	-- legacy: promote PublicationDate to Date if neither Date nor Year are set.
 	local Date_origin;															-- to hold the name of parameter promoted to Date; required for date error messaging

	if not is_set (Date) then
		Date = Year;															-- promote Year to Date
		Year = nil;																-- make nil so Year as empty string isn't used for CITEREF
		if not is_set (Date) and is_set(PublicationDate) then					-- use PublicationDate when |date= and |year= are not set
			Date = PublicationDate;												-- promote PublicationDate to Date
			PublicationDate = '';												-- unset, no longer needed
			Date_origin = A:ORIGIN('PublicationDate');							-- save the name of the promoted parameter
		else
			Date_origin = A:ORIGIN('Year');										-- save the name of the promoted parameter
		end
	else
		Date_origin = A:ORIGIN('Date');											-- not a promotion; name required for error messaging
	end

	if PublicationDate == Date then PublicationDate = ''; end					-- if PublicationDate is same as Date, don't display in rendered citation

	--[[
	Go test all of the date-holding parameters for valid MOS:DATE format and make sure that dates are real dates. This must be done before we do COinS because here is where
	we get the date used in the metadata.
	
	Date validation supporting code is in Module:Citation/CS1/Date_validation
	]]
	do	-- create defined block to contain local variables error_message, date_parameters_list, mismatch
		local error_message = '';
																				-- AirDate has been promoted to Date so not necessary to check it
--		local date_parameters_list = {['access-date']=AccessDate, ['archive-date']=ArchiveDate, ['date']=Date, ['doi-broken-date']=DoiBroken,
--				['embargo']=Embargo, ['lay-date']=LayDate, ['publication-date']=PublicationDate, ['year']=Year};

		local date_parameters_list = {
			['access-date'] = {val=AccessDate, name=A:ORIGIN ('AccessDate')},
			['archive-date'] = {val=ArchiveDate, name=A:ORIGIN ('ArchiveDate')},
			['date'] = {val=Date, name=Date_origin},
			['doi-broken-date'] = {val=DoiBroken, name=A:ORIGIN ('DoiBroken')},
			['embargo'] = {val=Embargo, name=A:ORIGIN ('Embargo')},
			['lay-date'] = {val=LayDate, name=A:ORIGIN ('LayDate')},
			['publication-date'] ={val=PublicationDate, name=A:ORIGIN ('PublicationDate')},
			['year'] = {val=Year, name=A:ORIGIN ('Year')},
			};
		anchor_year, Embargo, error_message = dates(date_parameters_list, COinS_date);

-- start temporary Julian / Gregorian calendar uncertainty categorization
		if COinS_date.inter_cal_cat then
			add_prop_cat ('jul_greg_uncertainty');
		end
-- end temporary Julian / Gregorian calendar uncertainty categorization

		if is_set (Year) and is_set (Date) then									-- both |date= and |year= not normally needed; 
			local mismatch = year_date_check (Year, Date)
			if 0 == mismatch then												-- |year= does not match a year-value in |date=
				if is_set (error_message) then									-- if there is already an error message
					error_message = error_message .. ', ';						-- tack on this additional message
				end
				error_message = error_message .. '&amp;#124;year= / &amp;#124;date= mismatch';
			elseif 1 == mismatch then											-- |year= matches year-value in |date=
				add_maint_cat ('date_year');
			end
		end
		
		if not is_set(error_message) then										-- error free dates only
			local modified = false;												-- flag
			
			if is_set (DF) then													-- if we need to reformat dates
				modified = reformat_dates (date_parameters_list, DF, false);	-- reformat to DF format, use long month names if appropriate
			end

			if true == date_hyphen_to_dash (date_parameters_list) then			-- convert hyphens to dashes where appropriate
				modified = true;
				add_maint_cat ('date_format');									-- hyphens were converted so add maint category
			end
			
	-- for those wikis that can and want to have English date names translated to the local language,
	-- uncomment these three lines.  Not supported by en.wiki (for obvious reasons)
	-- set date_name_xlate() second argument to true to translate English digits to local digits (will translate ymd dates)
--			if date_name_xlate (date_parameters_list, false) then
--				modified = true;
--			end

			if modified then													-- if the date_parameters_list values were modified
				AccessDate = date_parameters_list['access-date'].val;			-- overwrite date holding parameters with modified values
				ArchiveDate = date_parameters_list['archive-date'].val;
				Date = date_parameters_list['date'].val;
				DoiBroken = date_parameters_list['doi-broken-date'].val;
				LayDate = date_parameters_list['lay-date'].val;
				PublicationDate = date_parameters_list['publication-date'].val;
			end
		else
			table.insert( z.message_tail, { set_error( 'bad_date', {error_message}, true ) } );	-- add this error message
		end
	end	-- end of do

	-- Account for the oddity that is {{cite journal}} with |pmc= set and |url= not set.  Do this after date check but before COInS.
	-- Here we unset Embargo if PMC not embargoed (|embargo= not set in the citation) or if the embargo time has expired. Otherwise, holds embargo date
	Embargo = is_embargoed (Embargo);

	if config.CitationClass == "journal" and not is_set(URL) and is_set(ID_list['PMC']) then
		if not is_set (Embargo) then											-- if not embargoed or embargo has expired
			URL=cfg.id_handlers['PMC'].prefix .. ID_list['PMC'];				-- set url to be the same as the PMC external link if not embargoed
			URLorigin = cfg.id_handlers['PMC'].parameters[1];					-- set URLorigin to parameter name for use in error message if citation is missing a |title=
			if is_set(AccessDate) then											-- access date requires |url=; pmc created url is not |url=
				table.insert( z.message_tail, { set_error( 'accessdate_missing_url', {}, true ) } );
				AccessDate = '';												-- unset
			end

		end
	end

	-- At this point fields may be nil if they weren't specified in the template use.  We can use that fact.
	-- Test if citation has no title
	if	not is_set(Title) and
		not is_set(TransTitle) and
		not is_set(ScriptTitle) then
			if 'episode' == config.CitationClass then							-- special case for cite episode; TODO: is there a better way to do this?
				table.insert( z.message_tail, { set_error( 'citation_missing_title', {'series'}, true ) } );
			else
				table.insert( z.message_tail, { set_error( 'citation_missing_title', {'title'}, true ) } );
			end
	end
	
	if 'none' == Title and in_array (config.CitationClass, {'journal', 'citation'}) and is_set (Periodical) and 'journal' == A:ORIGIN('Periodical') then	-- special case for journal cites
		Title = '';																-- set title to empty string
		add_maint_cat ('untitled');
	end

	check_for_url ({															-- add error message when any of these parameters contains a URL
		['title']=Title,
		[A:ORIGIN('Chapter')]=Chapter,
		[A:ORIGIN('Periodical')]=Periodical,
		[A:ORIGIN('PublisherName')] = PublisherName
		});

	-- COinS metadata (see &lt;http://ocoins.info/&gt;) for automated parsing of citation information.
	-- handle the oddity that is cite encyclopedia and {{citation |encyclopedia=something}}. Here we presume that
	-- when Periodical, Title, and Chapter are all set, then Periodical is the book (encyclopedia) title, Title
	-- is the article title, and Chapter is a section within the article.  So, we remap 
	
	local coins_chapter = Chapter;												-- default assuming that remapping not required
	local coins_title = Title;													-- et tu
	if 'encyclopaedia' == config.CitationClass or ('citation' == config.CitationClass and is_set (Encyclopedia)) then
		if is_set (Chapter) and is_set (Title) and is_set (Periodical) then		-- if all are used then
			coins_chapter = Title;												-- remap
			coins_title = Periodical;
		end
	end
	local coins_author = a;														-- default for coins rft.au 
	if 0 &lt; #c then																-- but if contributor list
		coins_author = c;														-- use that instead
	end

	-- this is the function call to COinS()
	local OCinSoutput = COinS({
		['Periodical'] = Periodical,
		['Encyclopedia'] = Encyclopedia,
		['Chapter'] = make_coins_title (coins_chapter, ScriptChapter),			-- Chapter and ScriptChapter stripped of bold / italic wikimarkup
		['Degree'] = Degree;													-- cite thesis only
		['Title'] = make_coins_title (coins_title, ScriptTitle),				-- Title and ScriptTitle stripped of bold / italic wikimarkup
		['PublicationPlace'] = PublicationPlace,
		['Date'] = COinS_date.rftdate,											-- COinS_date has correctly formatted date if Date is valid;
		['Season'] = COinS_date.rftssn,
		['Chron'] =  COinS_date.rftchron or (not COinS_date.rftdate and Date) or '',	-- chron but if not set and invalid date format use Date; keep this last bit?
		['Series'] = Series,
		['Volume'] = Volume,
		['Issue'] = Issue,
		['Pages'] = get_coins_pages (first_set ({Sheet, Sheets, Page, Pages, At}, 5)),				-- pages stripped of external links
		['Edition'] = Edition,
		['PublisherName'] = PublisherName,
		['URL'] = first_set ({ChapterURL, URL}, 2),
		['Authors'] = coins_author,
		['ID_list'] = ID_list,
		['RawPage'] = this_page.prefixedText,
	}, config.CitationClass);

	-- Account for the oddities that are {{cite arxiv}}, {{cite biorxiv}}, and {{cite citeseerx}} AFTER generation of COinS data.
	if in_array (config.CitationClass, {'arxiv', 'biorxiv', 'citeseerx'}) then	-- we have set rft.jtitle in COinS to arXiv, bioRxiv, or CiteSeerX now unset so it isn't displayed
		Periodical = '';														-- periodical not allowed in these templates; if article has been published, use cite journal
	end

	-- special case for cite newsgroup.  Do this after COinS because we are modifying Publishername to include some static text
	if 'newsgroup' == config.CitationClass then
		if is_set (PublisherName) then
			PublisherName = substitute (cfg.messages['newsgroup'], external_link( 'news:' .. PublisherName, PublisherName, A:ORIGIN('PublisherName'), nil ));
		end
	end



	-- Now perform various field substitutions.
	-- We also add leading spaces and surrounding markup and punctuation to the
	-- various parts of the citation, but only when they are non-nil.
	local EditorCount;															-- used only for choosing {ed.) or (eds.) annotation at end of editor name-list
	do
		local last_first_list;
		local control = { 
			format = NameListFormat,											-- empty string or 'vanc'
			maximum = nil,														-- as if display-authors or display-editors not set
			lastauthoramp = LastAuthorAmp,
			page_name = this_page.text,											-- get current page name so that we don't wikilink to it via editorlinkn
			mode = Mode
		};

		do																		-- do editor name list first because the now unsupported coauthors used to modify control table
			control.maximum , editor_etal = get_display_authors_editors (A['DisplayEditors'], #e, 'editors', editor_etal);
			last_first_list, EditorCount = list_people(control, e, editor_etal);

			if is_set (Editors) then
				if editor_etal then
					Editors = Editors .. ' ' .. cfg.messages['et al'];			-- add et al. to editors parameter beause |display-editors=etal
					EditorCount = 2;											-- with et al., |editors= is multiple names; spoof to display (eds.) annotation
				else
					EditorCount = 2;											-- we don't know but assume |editors= is multiple names; spoof to display (eds.) annotation
				end
			else
				Editors = last_first_list;										-- either an author name list or an empty string
			end

			if 1 == EditorCount and (true == editor_etal or 1 &lt; #e) then		-- only one editor displayed but includes etal then 
				EditorCount = 2;												-- spoof to display (eds.) annotation
			end
		end
		do																		-- now do interviewers
			control.maximum = #interviewers_list;							-- number of interviewerss
			Interviewers = list_people(control, interviewers_list, false);	-- et al not currently supported
		end
		do																		-- now do translators
			control.maximum = #t;												-- number of translators
			Translators = list_people(control, t, false);						-- et al not currently supported
		end
		do																		-- now do contributors
			control.maximum = #c;												-- number of contributors
			Contributors = list_people(control, c, false);						-- et al not currently supported
		end
		do																		-- now do authors
			control.maximum , author_etal = get_display_authors_editors (A['DisplayAuthors'], #a, 'authors', author_etal);

			last_first_list = list_people(control, a, author_etal);

			if is_set (Authors) then
				Authors, author_etal = name_has_etal (Authors, author_etal, false);	-- find and remove variations on et al.
				if author_etal then
					Authors = Authors .. ' ' .. cfg.messages['et al'];			-- add et al. to authors parameter
				end
			else
				Authors = last_first_list;										-- either an author name list or an empty string
			end
		end																		-- end of do
	
		if is_set (Authors) and is_set (Collaboration) then
			Authors = Authors .. ' (' .. Collaboration .. ')';					-- add collaboration after et al.
		end

	end

	-- apply |[xx-]format= styling; at the end, these parameters hold correctly styled format annotation,
	-- an error message if the associated url is not set, or an empty string for concatenation
	ArchiveFormat = style_format (ArchiveFormat, ArchiveURL, 'archive-format', 'archive-url');
	ConferenceFormat = style_format (ConferenceFormat, ConferenceURL, 'conference-format', 'conference-url');
	Format = style_format (Format, URL, 'format', 'url');
	LayFormat = style_format (LayFormat, LayURL, 'lay-format', 'lay-url');
	TranscriptFormat = style_format (TranscriptFormat, TranscriptURL, 'transcript-format', 'transcripturl');

	-- special case for chapter format so no error message or cat when chapter not supported
	if not (in_array(config.CitationClass, {'web', 'news', 'journal', 'magazine', 'pressrelease', 'podcast', 'newsgroup', 'arxiv', 'biorxiv', 'citeseerx'}) or
		('citation' == config.CitationClass and is_set (Periodical) and not is_set (Encyclopedia))) then
			ChapterFormat = style_format (ChapterFormat, ChapterURL, 'chapter-format', 'chapter-url');
	end

	if not is_set(URL) then
		if in_array(config.CitationClass, {"web","podcast", "mailinglist"}) then	-- |url= required for cite web, cite podcast, and cite mailinglist
			table.insert( z.message_tail, { set_error( 'cite_web_url', {}, true ) } );
		end
		
		-- do we have |accessdate= without either |url= or |chapter-url=?
		if is_set(AccessDate) and not is_set(ChapterURL)then					-- ChapterURL may be set when URL is not set;
			table.insert( z.message_tail, { set_error( 'accessdate_missing_url', {}, true ) } );
			AccessDate = '';
		end
	end

	local OriginalURL, OriginalURLorigin, OriginalFormat, OriginalAccess;
	DeadURL = DeadURL:lower();													-- used later when assembling archived text
	if is_set( ArchiveURL ) then
		if is_set (ChapterURL) then 											-- if chapter-url is set apply archive url to it
			OriginalURL = ChapterURL;											-- save copy of source chapter's url for archive text
			OriginalURLorigin = ChapterURLorigin;								-- name of chapter-url parameter for error messages
			OriginalFormat = ChapterFormat;										-- and original |chapter-format=
			if 'no' ~= DeadURL then
				ChapterURL = ArchiveURL											-- swap-in the archive's url
				ChapterURLorigin = A:ORIGIN('ArchiveURL')						-- name of archive-url parameter for error messages
				ChapterFormat = ArchiveFormat or '';							-- swap in archive's format
				ChapterUrlAccess = nil;											-- restricted access levels do not make sense for archived urls
			end
		elseif is_set (URL) then
			OriginalURL = URL;													-- save copy of original source URL
			OriginalURLorigin = URLorigin;										-- name of url parameter for error messages
			OriginalFormat = Format; 											-- and original |format=
			OriginalAccess = UrlAccess;
			if 'no' ~= DeadURL then												-- if URL set then archive-url applies to it
				URL = ArchiveURL												-- swap-in the archive's url
				URLorigin = A:ORIGIN('ArchiveURL')								-- name of archive url parameter for error messages
				Format = ArchiveFormat or '';									-- swap in archive's format
				UrlAccess = nil;												-- restricted access levels do not make sense for archived urls
			end
 		end
	end

	if in_array(config.CitationClass, {'web','news','journal', 'magazine', 'pressrelease', 'podcast', 'newsgroup', 'arxiv', 'biorxiv', 'citeseerx'}) or	-- if any of the 'periodical' cites except encyclopedia
		('citation' == config.CitationClass and is_set (Periodical) and not is_set (Encyclopedia)) then
			local chap_param;
			if is_set (Chapter) then											-- get a parameter name from one of these chapter related meta-parameters
				chap_param = A:ORIGIN ('Chapter')
			elseif is_set (TransChapter) then
				chap_param = A:ORIGIN ('TransChapter')
			elseif is_set (ChapterURL) then
				chap_param = A:ORIGIN ('ChapterURL')
			elseif is_set (ScriptChapter) then
				chap_param = A:ORIGIN ('ScriptChapter')
			else is_set (ChapterFormat)
				chap_param = A:ORIGIN ('ChapterFormat')
			end

			if is_set (chap_param) then											-- if we found one
				table.insert( z.message_tail, { set_error( 'chapter_ignored', {chap_param}, true ) } );		-- add error message
				Chapter = '';													-- and set them to empty string to be safe with concatenation
				TransChapter = '';
				ChapterURL = '';
				ScriptChapter = '';
				ChapterFormat = '';
			end
	else																		-- otherwise, format chapter / article title
		local no_quotes = false;												-- default assume that we will be quoting the chapter parameter value
		if is_set (Contribution) and 0 &lt; #c then								-- if this is a contribution with contributor(s)
			if in_array (Contribution:lower(), cfg.keywords.contribution) then	-- and a generic contribution title
				no_quotes = true;												-- then render it unquoted
			end
		end

		Chapter = format_chapter_title (ScriptChapter, Chapter, TransChapter, ChapterURL, ChapterURLorigin, no_quotes, ChapterUrlAccess);		-- Contribution is also in Chapter
		if is_set (Chapter) then
			Chapter = Chapter .. ChapterFormat ;
			if 'map' == config.CitationClass and is_set (TitleType) then
				Chapter = Chapter .. ' ' .. TitleType;							-- map annotation here; not after title
			end
			Chapter = Chapter.. sepc .. ' ';
		elseif is_set (ChapterFormat) then										-- |chapter= not set but |chapter-format= is so ...
			Chapter = ChapterFormat .. sepc .. ' ';								-- ... ChapterFormat has error message, we want to see it
		end
	end

	-- Format main title.
	if '...' == Title:sub (-3) then												-- if elipsis is the last three characters of |title=
		Title = mw.ustring.gsub (Title, '(%.%.%.)%.+$', '%1');					-- limit the number of dots to three
	elseif not mw.ustring.find (Title, '%.%s*%a%.') then						-- end of title is not a 'dot-(optional space-)letter-dot' initialism
		Title = mw.ustring.gsub(Title, '%'..sepc..'$', '');						-- remove any trailing separator character
	end
	if is_set(TitleLink) and is_set(Title) then
		Title = make_wikilink (TitleLink, Title);
	end

	if in_array(config.CitationClass, {'web', 'news', 'journal', 'magazine', 'pressrelease', 'podcast', 'newsgroup', 'mailinglist', 'interview', 'arxiv', 'biorxiv', 'citeseerx'}) or
		('citation' == config.CitationClass and is_set (Periodical) and not is_set (Encyclopedia)) or
		('map' == config.CitationClass and is_set (Periodical)) then			-- special case for cite map when the map is in a periodical treat as an article
			Title = kern_quotes (Title);										-- if necessary, separate title's leading and trailing quote marks from Module provided quote marks
			Title = wrap_style ('quoted-title', Title);
			Title = script_concatenate (Title, ScriptTitle);					-- &lt;bdi&gt; tags, lang atribute, categorization, etc; must be done after title is wrapped
			TransTitle= wrap_style ('trans-quoted-title', TransTitle );
	elseif 'report' == config.CitationClass then								-- no styling for cite report
		Title = script_concatenate (Title, ScriptTitle);						-- &lt;bdi&gt; tags, lang atribute, categorization, etc; must be done after title is wrapped
		TransTitle= wrap_style ('trans-quoted-title', TransTitle );				-- for cite report, use this form for trans-title
	else
		Title = wrap_style ('italic-title', Title);
		Title = script_concatenate (Title, ScriptTitle);						-- &lt;bdi&gt; tags, lang atribute, categorization, etc; must be done after title is wrapped
		TransTitle = wrap_style ('trans-italic-title', TransTitle);
	end

	local TransError = "";
	if is_set(TransTitle) then
		if is_set(Title) then
			TransTitle = " " .. TransTitle;
		else
			TransError = " " .. set_error( 'trans_missing_title', {'title'} );
		end
	end
	
	if is_set(Title) then
		if not is_set(TitleLink) and is_set(URL) then
			
			Title = external_link( URL, Title, URLorigin, UrlAccess ) .. TransTitle .. TransError .. Format;
			URL = '';															-- unset these because no longer needed
			Format = "";
		else
			Title = Title .. TransTitle .. TransError;
		end
	else
		Title = TransTitle .. TransError;
	end

	if is_set(Place) then
		Place = " " .. wrap_msg ('written', Place, use_lowercase) .. sepc .. " ";
	end

	if is_set (Conference) then
		if is_set (ConferenceURL) then
			Conference = external_link( ConferenceURL, Conference, ConferenceURLorigin, nil );
		end
		Conference = sepc .. " " .. Conference .. ConferenceFormat;
	elseif is_set(ConferenceURL) then
		Conference = sepc .. " " .. external_link( ConferenceURL, nil, ConferenceURLorigin, nil );
	end

	if not is_set(Position) then
		local Minutes = A['Minutes'];
		local Time = A['Time'];

		if is_set(Minutes) then
			if is_set (Time) then
				table.insert( z.message_tail, { set_error( 'redundant_parameters', {wrap_style ('parameter', 'minutes') .. ' and ' .. wrap_style ('parameter', 'time')}, true ) } );
			end
			Position = " " .. Minutes .. " " .. cfg.messages['minutes'];
		else
			if is_set(Time) then
				local TimeCaption = A['TimeCaption']
				if not is_set(TimeCaption) then
					TimeCaption = cfg.messages['event'];
					if sepc ~= '.' then
						TimeCaption = TimeCaption:lower();
					end
				end
				Position = " " .. TimeCaption .. " " .. Time;
			end
		end
	else
		Position = " " .. Position;
		At = '';
	end

	Page, Pages, Sheet, Sheets = format_pages_sheets (Page, Pages, Sheet, Sheets, config.CitationClass, Periodical_origin, sepc, NoPP, use_lowercase);

	At = is_set(At) and (sepc .. " " .. At) or "";
	Position = is_set(Position) and (sepc .. " " .. Position) or "";
	if config.CitationClass == 'map' then
		local Section = A['Section'];
		local Sections = A['Sections'];
		local Inset = A['Inset'];
		
		if is_set( Inset ) then
			Inset = sepc .. " " .. wrap_msg ('inset', Inset, use_lowercase);
		end			

		if is_set( Sections ) then
			Section = sepc .. " " .. wrap_msg ('sections', Sections, use_lowercase);
		elseif is_set( Section ) then
			Section = sepc .. " " .. wrap_msg ('section', Section, use_lowercase);
		end
		At = At .. Inset .. Section;		
	end	

	if is_set (Language) then
		Language = language_parameter (Language);								-- format, categories, name from ISO639-1, etc
	else
		Language="";															-- language not specified so make sure this is an empty string;
	--[[ TODO: need to extract the wrap_msg from language_parameter
	so that we can solve parentheses bunching problem with Format/Language/TitleType
	]]
	end

	Others = is_set(Others) and (sepc .. " " .. Others) or "";
	
	if is_set (Translators) then
		Others = safe_join ({sepc .. ' ', wrap_msg ('translated', Translators, use_lowercase), Others}, sepc);
	end
	if is_set (Interviewers) then
		Others = safe_join ({sepc .. ' ', wrap_msg ('interview', Interviewers, use_lowercase), Others}, sepc);
	end
	
	TitleNote = is_set(TitleNote) and (sepc .. " " .. TitleNote) or "";
	if is_set (Edition) then
		if Edition:match ('%f[%a][Ee]d%.?$') or Edition:match ('%f[%a][Ee]dition$') then
			add_maint_cat ('extra_text', 'edition');
		end
		Edition = " " .. wrap_msg ('edition', Edition);
	else
		Edition = '';
	end

	Series = is_set(Series) and (sepc .. " " .. Series) or "";
		OrigYear = is_set(OrigYear) and (" [" .. OrigYear .. "]") or "";		-- TODO: presentation

	Agency = is_set(Agency) and (sepc .. " " .. Agency) or "";

	Volume = format_volume_issue (Volume, Issue, config.CitationClass, Periodical_origin, sepc, use_lowercase);

	------------------------------------ totally unrelated data
	if is_set(Via) then
		Via = " " .. wrap_msg ('via', Via);
	end

	--[[
	Subscription implies paywall; Registration does not.  If both are used in a citation, the subscription required link
	note is displayed. There are no error messages for this condition.
	
	]]
	if is_set (SubscriptionRequired) then
		SubscriptionRequired = sepc .. " " .. cfg.messages['subscription'];		-- subscription required message
	elseif is_set (RegistrationRequired) then
		SubscriptionRequired = sepc .. " " .. cfg.messages['registration'];		-- registration required message
	else
		SubscriptionRequired = '';												-- either or both might be set to something other than yes true y
	end

	if is_set(AccessDate) then
		local retrv_text = " " .. cfg.messages['retrieved']

		AccessDate = nowrap_date (AccessDate);									-- wrap in nowrap span if date in appropriate format
		if (sepc ~= ".") then retrv_text = retrv_text:lower() end				-- if mode is cs2, lower case
		AccessDate = substitute (retrv_text, AccessDate);						-- add retrieved text

		AccessDate = substitute (cfg.presentation['accessdate'], {sepc, AccessDate});	-- allow editors to hide accessdates
	end
	
	if is_set(ID) then ID = sepc .." ".. ID; end
   	if "thesis" == config.CitationClass and is_set(Docket) then
		ID = sepc .." Docket ".. Docket .. ID;
	end
   	if "report" == config.CitationClass and is_set(Docket) then					-- for cite report when |docket= is set
		ID = sepc .. ' ' .. Docket;												-- overwrite ID even if |id= is set
	end

	ID_list = build_id_list( ID_list, {IdAccessLevels=ID_access_levels, DoiBroken = DoiBroken, ASINTLD = ASINTLD, IgnoreISBN = IgnoreISBN, Embargo=Embargo, Class = Class} );

	if is_set(URL) then
		URL = " " .. external_link( URL, nil, URLorigin, UrlAccess );
	end

	if is_set(Quote) then
		if Quote:sub(1,1) == '"' and Quote:sub(-1,-1) == '"' then				-- if first and last characters of quote are quote marks
			Quote = Quote:sub(2,-2);											-- strip them off
		end
		Quote = sepc .." " .. wrap_style ('quoted-text', Quote ); 				-- wrap in &lt;q&gt;...&lt;/q&gt; tags
		PostScript = "";														-- cs1|2 does not supply terminal punctuation when |quote= is set
	end
	
	local Archived
	if is_set(ArchiveURL) then
		if not is_set(ArchiveDate) then
			ArchiveDate = set_error('archive_missing_date');
		end
		if "no" == DeadURL then
			local arch_text = cfg.messages['archived'];
			if sepc ~= "." then arch_text = arch_text:lower() end
			Archived = sepc .. " " .. substitute( cfg.messages['archived-not-dead'],
				{ external_link( ArchiveURL, arch_text, A:ORIGIN('ArchiveURL'), nil ) .. ArchiveFormat, ArchiveDate } );
			if not is_set(OriginalURL) then
				Archived = Archived .. " " .. set_error('archive_missing_url');							   
			end
		elseif is_set(OriginalURL) then											-- DeadURL is empty, 'yes', 'true', 'y', 'unfit', 'usurped'
			local arch_text = cfg.messages['archived-dead'];
			if sepc ~= "." then arch_text = arch_text:lower() end
			if in_array (DeadURL, {'unfit', 'usurped', 'bot: unknown'}) then
				Archived = sepc .. " " .. 'Archived from the original on ' .. ArchiveDate;	-- format already styled
				if 'bot: unknown' == DeadURL then
					add_maint_cat ('bot:_unknown');								-- and add a category if not already added
				else
					add_maint_cat ('unfit');									-- and add a category if not already added
				end
			else																-- DeadURL is empty, 'yes', 'true', or 'y'
				Archived = sepc .. " " .. substitute( arch_text,
					{ external_link( OriginalURL, cfg.messages['original'], OriginalURLorigin, OriginalAccess ) .. OriginalFormat, ArchiveDate } );	-- format already styled
			end	
		else
			local arch_text = cfg.messages['archived-missing'];
			if sepc ~= "." then arch_text = arch_text:lower() end
			Archived = sepc .. " " .. substitute( arch_text, 
				{ set_error('archive_missing_url'), ArchiveDate } );
		end
	elseif is_set (ArchiveFormat) then
		Archived = ArchiveFormat;												-- if set and ArchiveURL not set ArchiveFormat has error message
	else
		Archived = ""
	end
	
	local Lay = '';
	if is_set(LayURL) then
		if is_set(LayDate) then LayDate = " (" .. LayDate .. ")" end
		if is_set(LaySource) then 
			LaySource = " &amp;ndash; ''" .. safe_for_italics(LaySource) .. "''";
		else
			LaySource = "";
		end
		if sepc == '.' then
			Lay = sepc .. " " .. external_link( LayURL, cfg.messages['lay summary'], A:ORIGIN('LayURL'), nil ) .. LayFormat .. LaySource .. LayDate
		else
			Lay = sepc .. " " .. external_link( LayURL, cfg.messages['lay summary']:lower(), A:ORIGIN('LayURL'), nil ) .. LayFormat .. LaySource .. LayDate
		end			
	elseif is_set (LayFormat) then												-- Test if |lay-format= is given without giving a |lay-url=
		Lay = sepc .. LayFormat;												-- if set and LayURL not set, then LayFormat has error message
	end

	if is_set(Transcript) then
		if is_set(TranscriptURL) then
			Transcript = external_link( TranscriptURL, Transcript, TranscriptURLorigin, nil );
		end
		Transcript = sepc .. ' ' .. Transcript .. TranscriptFormat;
	elseif is_set(TranscriptURL) then
		Transcript = external_link( TranscriptURL, nil, TranscriptURLorigin, nil );
	end

	local Publisher;
	if is_set(PublicationDate) then
		PublicationDate = wrap_msg ('published', PublicationDate);
	end
	if is_set(PublisherName) then
		if is_set(PublicationPlace) then
			Publisher = sepc .. " " .. PublicationPlace .. ": " .. PublisherName .. PublicationDate;
		else
			Publisher = sepc .. " " .. PublisherName .. PublicationDate;  
		end			
	elseif is_set(PublicationPlace) then 
		Publisher= sepc .. " " .. PublicationPlace .. PublicationDate;
	else 
		Publisher = PublicationDate;
	end
	
	-- Several of the above rely upon detecting this as nil, so do it last.
	if is_set(Periodical) then
		if is_set(Title) or is_set(TitleNote) then 
			Periodical = sepc .. " " .. wrap_style ('italic-title', Periodical) 
		else 
			Periodical = wrap_style ('italic-title', Periodical)
		end
	end

	--[[
	Handle the oddity that is cite speech.  This code overrides whatever may be the value assigned to TitleNote (through |department=) and forces it to be " (Speech)" so that
	the annotation directly follows the |title= parameter value in the citation rather than the |event= parameter value (if provided).
	]]
	if "speech" == config.CitationClass then				-- cite speech only
		TitleNote = " (Speech)";							-- annotate the citation
		if is_set (Periodical) then							-- if Periodical, perhaps because of an included |website= or |journal= parameter 
			if is_set (Conference) then						-- and if |event= is set
				Conference = Conference .. sepc .. " ";		-- then add appropriate punctuation to the end of the Conference variable before rendering
			end
		end
	end

	-- Piece all bits together at last.  Here, all should be non-nil.
	-- We build things this way because it is more efficient in LUA
	-- not to keep reassigning to the same string variable over and over.

	local tcommon;
	local tcommon2;																-- used for book cite when |contributor= is set
	
	if in_array(config.CitationClass, {"journal","citation"}) and is_set(Periodical) then
		if is_set(Others) then Others = safe_join ({Others, sepc .. " "}, sepc) end		-- add terminal punctuation &amp; space; check for dup sepc; TODO why do we need to do this here?
		tcommon = safe_join( {Others, Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Language, Edition, Publisher, Agency, Volume}, sepc );
	elseif in_array(config.CitationClass, {"book","citation"}) and not is_set(Periodical) then		-- special cases for book cites
		if is_set (Contributors) then											-- when we are citing foreword, preface, introduction, etc
			tcommon = safe_join( {Title, TitleNote}, sepc );					-- author and other stuff will come after this and before tcommon2
			tcommon2 = safe_join( {Conference, Periodical, Format, TitleType, Series, Language, Volume, Others, Edition, Publisher, Agency}, sepc );
		else
			tcommon = safe_join( {Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Language, Volume, Others, Edition, Publisher, Agency}, sepc );
		end

	elseif 'map' == config.CitationClass then									-- special cases for cite map
		if is_set (Chapter) then												-- map in a book; TitleType is part of Chapter
			tcommon = safe_join( {Title, Format, Edition, Scale, Series, Language, Cartography, Others, Publisher, Volume}, sepc );
		elseif is_set (Periodical) then											-- map in a periodical
			tcommon = safe_join( {Title, TitleType, Format, Periodical, Scale, Series, Language, Cartography, Others, Publisher, Volume}, sepc );
		else																	-- a sheet or stand-alone map
			tcommon = safe_join( {Title, TitleType, Format, Edition, Scale, Series, Language, Cartography, Others, Publisher}, sepc );
		end
		
	elseif 'episode' == config.CitationClass then								-- special case for cite episode
		tcommon = safe_join( {Title, TitleNote, TitleType, Series, Transcript, Language, Edition, Publisher}, sepc );

	else																		-- all other CS1 templates
		tcommon = safe_join( {Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Language, 
			Volume, Others, Edition, Publisher, Agency}, sepc );
	end
	
	if #ID_list &gt; 0 then
		ID_list = safe_join( { sepc .. " ",  table.concat( ID_list, sepc .. " " ), ID }, sepc );
	else
		ID_list = ID;
	end
	
	local idcommon = safe_join( { ID_list, URL, Archived, AccessDate, Via, SubscriptionRequired, Lay, Quote }, sepc );
	local text;
	local pgtext = Position .. Sheet .. Sheets .. Page .. Pages .. At;

	if is_set(Date) then
		if is_set (Authors) or is_set (Editors) then							-- date follows authors or editors when authors not set
			Date = " (" .. Date ..")" .. OrigYear .. sepc .. " ";				-- in paranetheses
		else																	-- neither of authors and editors set
			if (string.sub(tcommon,-1,-1) == sepc) then							-- if the last character of tcommon is sepc
				Date = " " .. Date .. OrigYear;									-- Date does not begin with sepc
			else
				Date = sepc .. " " .. Date .. OrigYear;							-- Date begins with sepc
			end
		end
	end	
	if is_set(Authors) then
		if (not is_set (Date)) then												-- when date is set it's in parentheses; no Authors termination
			Authors = terminate_name_list (Authors, sepc);						-- when no date, terminate with 0 or 1 sepc and a space
		end
		if is_set(Editors) then
			local in_text = " ";
			local post_text = "";
			if is_set(Chapter) and 0 == #c then
				in_text = in_text .. cfg.messages['in'] .. " "
				if (sepc ~= '.') then
					in_text = in_text:lower()									-- lowercase for cs2
				 end
			else
				if EditorCount &lt;= 1 then
					post_text = ", " .. cfg.messages['editor'];
				else
					post_text = ", " .. cfg.messages['editors'];
				end
			end 
			Editors = terminate_name_list (in_text .. Editors .. post_text, sepc);	-- terminate with 0 or 1 sepc and a space
		end
		if is_set (Contributors) then											-- book cite and we're citing the intro, preface, etc
			local by_text = sepc .. ' ' .. cfg.messages['by'] .. ' ';
			if (sepc ~= '.') then by_text = by_text:lower() end					-- lowercase for cs2
			Authors = by_text .. Authors;										-- author follows title so tweak it here
			if is_set (Editors) and is_set (Date) then							-- when Editors make sure that Authors gets terminated
				Authors = terminate_name_list (Authors, sepc);					-- terminate with 0 or 1 sepc and a space
			end
			if (not is_set (Date)) then											-- when date is set it's in parentheses; no Contributors termination
				Contributors = terminate_name_list (Contributors, sepc);		-- terminate with 0 or 1 sepc and a space
			end
			text = safe_join( {Contributors, Date, Chapter, tcommon, Authors, Place, Editors, tcommon2, pgtext, idcommon }, sepc );
		else
			text = safe_join( {Authors, Date, Chapter, Place, Editors, tcommon, pgtext, idcommon }, sepc );
		end
	elseif is_set(Editors) then
		if is_set(Date) then
			if EditorCount &lt;= 1 then
				Editors = Editors .. ", " .. cfg.messages['editor'];
			else
				Editors = Editors .. ", " .. cfg.messages['editors'];
			end
		else
			if EditorCount &lt;= 1 then
				Editors = Editors .. " (" .. cfg.messages['editor'] .. ")" .. sepc .. " "
			else
				Editors = Editors .. " (" .. cfg.messages['editors'] .. ")" .. sepc .. " "
			end
		end
		text = safe_join( {Editors, Date, Chapter, Place, tcommon, pgtext, idcommon}, sepc );
	else
		if in_array(config.CitationClass, {"journal","citation"}) and is_set(Periodical) then
			text = safe_join( {Chapter, Place, tcommon, pgtext, Date, idcommon}, sepc );
		else
			text = safe_join( {Chapter, Place, tcommon, Date, pgtext, idcommon}, sepc );
		end
	end
	
	if is_set(PostScript) and PostScript ~= sepc then
		text = safe_join( {text, sepc}, sepc );  --Deals with italics, spaces, etc.
		text = text:sub(1,-sepc:len()-1);
	end	
	
	text = safe_join( {text, PostScript}, sepc );

	-- Now enclose the whole thing in a &lt;cite/&gt; element
	local options = {};
	
	if is_set(config.CitationClass) and config.CitationClass ~= "citation" then
		options.class = config.CitationClass;
		options.class = "citation " .. config.CitationClass;					-- class=citation required for blue highlight when used with |ref=
	else
		options.class = "citation";
	end
	
	if is_set(Ref) and Ref:lower() ~= "none" then								-- set reference anchor if appropriate
		local id = Ref
		if ('harv' == Ref ) then
			local namelist = {};												-- holds selected contributor, author, editor name list
			local year = first_set ({Year, anchor_year}, 2);					-- Year first for legacy citations and for YMD dates that require disambiguation

			if #c &gt; 0 then														-- if there is a contributor list
				namelist = c;													-- select it
			elseif #a &gt; 0 then													-- or an author list
				namelist = a;
			elseif #e &gt; 0 then													-- or an editor list
				namelist = e;
			end
			if #namelist &gt; 0 then												-- if there are names in namelist
				id = anchor_id (namelist, year);								-- go make the CITEREF anchor
			else
				id = '';														-- unset
			end
		end
		options.id = id;
	end
	
	if string.len(text:gsub("&lt;span[^&gt;/]*&gt;(.-)&lt;/span&gt;", "%1"):gsub("%b&lt;&gt;","")) &lt;= 2 then	-- remove &lt;span&gt; tags and other html-like markup; then get length of what remains
		z.error_categories = {};
		text = set_error('empty_citation');
		z.message_tail = {};
	end
	
	local render = {};															-- here we collect the final bits for concatenation into the rendered citation

	if is_set(options.id) then													-- here we wrap the rendered citation in &lt;cite ...&gt;...&lt;/cite&gt; tags
		table.insert (render, substitute (cfg.presentation['cite-id'], {mw.uri.anchorEncode(options.id), mw.text.nowiki(options.class), text}));	-- when |ref= is set
	else
		table.insert (render, substitute (cfg.presentation['cite'], {mw.text.nowiki(options.class), text}));	-- all other cases
	end		

	table.insert (render, substitute (cfg.presentation['ocins'], {OCinSoutput}));		-- append metadata to the citation

	if #z.message_tail ~= 0 then
		table.insert (render, ' ');
		for i,v in ipairs( z.message_tail ) do
			if is_set(v[1]) then
				if i == #z.message_tail then
					table.insert (render, error_comment( v[1], v[2] ));
				else
					table.insert (render, error_comment( v[1] .. "; ", v[2] ));
				end
			end
		end
	end

	if #z.maintenance_cats ~= 0 then
		table.insert (render, '&lt;span class="citation-comment" style="display:none; color:#33aa33; margin-left:0.3em"&gt;');
		for _, v in ipairs( z.maintenance_cats ) do								-- append maintenance categories
			table.insert (render, v);
			table.insert (render, ' (');
			table.insert (render, make_wikilink (':Category:' .. v, 'link'));
			table.insert (render, ') ');
		end
		table.insert (render, '&lt;/span&gt;');
	end
	
	no_tracking_cats = no_tracking_cats:lower();
	if in_array(no_tracking_cats, {"", "no", "false", "n"}) then
		for _, v in ipairs( z.error_categories ) do
			table.insert (render, make_wikilink ('Category:' .. v));
		end
		for _, v in ipairs( z.maintenance_cats ) do								-- append maintenance categories
			table.insert (render, make_wikilink ('Category:' .. v));
		end
		for _, v in ipairs( z.properties_cats ) do								-- append properties categories
			table.insert (render, make_wikilink ('Category:' .. v));
		end
	end

	return table.concat (render);	
end


--[[--------------------------&lt; C S 1 . C I T A T I O N &gt;------------------------------------------------------

This is used by templates such as {{cite book}} to create the actual citation text.

]]

function cs1.citation(frame)
	Frame = frame;																-- save a copy incase we need to display an error message in preview mode
	local pframe = frame:getParent()
	local validation, utilities, identifiers, metadata;
	
	if nil ~= string.find (frame:getTitle(), 'sandbox', 1, true) then			-- did the {{#invoke:}} use sandbox version?
		cfg = mw.loadData ('Module:Citation/CS1/Configuration/sandbox');		-- load sandbox versions of support modules
		whitelist = mw.loadData ('Module:Citation/CS1/Whitelist/sandbox');
		utilities = require ('Module:Citation/CS1/Utilities/sandbox');
		validation = require ('Module:Citation/CS1/Date_validation/sandbox');
		identifiers = require ('Module:Citation/CS1/Identifiers/sandbox');
		metadata = require ('Module:Citation/CS1/COinS/sandbox');
		
	else																		-- otherwise
		cfg = mw.loadData ('Module:Citation/CS1/Configuration');				-- load live versions of support modules
		whitelist = mw.loadData ('Module:Citation/CS1/Whitelist');
		utilities = require ('Module:Citation/CS1/Utilities');
		validation = require ('Module:Citation/CS1/Date_validation');
		identifiers = require ('Module:Citation/CS1/Identifiers');
		metadata = require ('Module:Citation/CS1/COinS');
	end

	utilities.set_selected_modules (cfg);										-- so that functions in Utilities can see the cfg tables
	identifiers.set_selected_modules (cfg, utilities);							-- so that functions in Identifiers can see the selected cfg tables and selected Utilities module
	validation.set_selected_modules (cfg, utilities);							-- so that functions in Date validataion can see selected cfg tables and the selected Utilities module
	metadata.set_selected_modules (cfg, utilities);								-- so that functions in COinS can see the selected cfg tables and selected Utilities module

	dates = validation.dates;													-- imported functions from Module:Citation/CS1/Date validation
	year_date_check = validation.year_date_check;
	reformat_dates = validation.reformat_dates;
	date_hyphen_to_dash = validation.date_hyphen_to_dash;
	date_name_xlate = validation.date_name_xlate;

	is_set = utilities.is_set;													-- imported functions from Module:Citation/CS1/Utilities
	in_array = utilities.in_array;
	substitute = utilities.substitute;
	error_comment = utilities.error_comment;
	set_error = utilities.set_error;
	select_one = utilities.select_one;
	add_maint_cat = utilities.add_maint_cat;
	wrap_style = utilities.wrap_style;
	safe_for_italics = utilities.safe_for_italics;
	is_wikilink = utilities.is_wikilink;
	make_wikilink = utilities.make_wikilink;

	z = utilities.z;															-- table of error and category tables in Module:Citation/CS1/Utilities

	extract_ids = identifiers.extract_ids;										-- imported functions from Module:Citation/CS1/Identifiers
	build_id_list = identifiers.build_id_list;
	is_embargoed = identifiers.is_embargoed;
	extract_id_access_levels = identifiers.extract_id_access_levels;
	
	make_coins_title = metadata.make_coins_title;								-- imported functions from Module:Citation/CS1/COinS
	get_coins_pages = metadata.get_coins_pages;
	COinS = metadata.COinS;

	local args = {};															-- table where we store all of the template's arguments
	local suggestions = {};														-- table where we store suggestions if we need to loadData them
	local error_text, error_state;

	local config = {};															-- table to store parameters from the module {{#invoke:}}
	for k, v in pairs( frame.args ) do
		config[k] = v;
--		args[k] = v;															-- debug tool that allows us to render a citation from module {{#invoke:}}
	end	

	local capture;																-- the single supported capture when matching unknown parameters using patterns
	for k, v in pairs( pframe.args ) do
		if v ~= '' then
			if ('string' == type (k)) then
				k = mw.ustring.gsub (k, '%d', cfg.date_names.local_digits);			-- for enumerated parameters, translate 'local' digits to Western 0-9
			end
			if not validate( k, config.CitationClass ) then			
				error_text = "";
				if type( k ) ~= 'string' then
					-- Exclude empty numbered parameters
					if v:match("%S+") ~= nil then
						error_text, error_state = set_error( 'text_ignored', {v}, true );
					end
				elseif validate( k:lower(), config.CitationClass ) then 
					error_text, error_state = set_error( 'parameter_ignored_suggest', {k, k:lower()}, true );
				else
					if nil == suggestions.suggestions then						-- if this table is nil then we need to load it
						if nil ~= string.find (frame:getTitle(), 'sandbox', 1, true) then			-- did the {{#invoke:}} use sandbox version?
							suggestions = mw.loadData( 'Module:Citation/CS1/Suggestions/sandbox' );	-- use the sandbox version
						else
							suggestions = mw.loadData( 'Module:Citation/CS1/Suggestions' );			-- use the live version
						end
					end
					for pattern, param in pairs (suggestions.patterns) do		-- loop through the patterns to see if we can suggest a proper parameter
						capture = k:match (pattern);							-- the whole match if no caputre in pattern else the capture if a match
						if capture then											-- if the pattern matches 
							param = substitute( param, capture );				-- add the capture to the suggested parameter (typically the enumerator)
							error_text, error_state = set_error( 'parameter_ignored_suggest', {k, param}, true );	-- set the error message
						end
					end
					if not is_set (error_text) then								-- couldn't match with a pattern, is there an expicit suggestion?
						if suggestions.suggestions[ k:lower() ] ~= nil then
							error_text, error_state = set_error( 'parameter_ignored_suggest', {k, suggestions.suggestions[ k:lower() ]}, true );
						else
							error_text, error_state = set_error( 'parameter_ignored', {k}, true );
							v = '';												-- unset value assigned to unrecognized parameters (this for the limited parameter lists)
						end
					end
				end				  
				if error_text ~= '' then
					table.insert( z.message_tail, {error_text, error_state} );
				end				
			end
			missing_pipe_check (v);												-- do we think that there is a parameter that is missing a pipe?
																				-- TODO: is this the best place for this translation?
			args[k] = v;
		elseif args[k] ~= nil or (k == 'postscript') then						-- here when v is empty string
			args[k] = v;														-- why do we do this?  we don't support 'empty' parameters
		end		
	end	

	for k, v in pairs( args ) do
		if 'string' == type (k) then											-- don't evaluate positional parameters
			has_invisible_chars (k, v);
		end
	end
	return citation0( config, args)
end

return cs1;</text>
      <sha1>02mk368stf6s7pbv1r3s6h5lpsymrh8</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/COinS</title>
    <ns>828</ns>
    <id>48828620</id>
    <revision>
      <id>808669310</id>
      <parentid>778352763</parentid>
      <timestamp>2017-11-04T10:41:13Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>synch from sandbox;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="16800">
local coins = {};


--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]
local is_set, in_array, remove_wiki_link;										-- functions in Module:Citation/CS1/Utilities

local cfg;																		-- table of configuration tables that are defined in Module:Citation/CS1/Configuration


--[[--------------------------&lt; S T R I P _ A P O S T R O P H E _ M A R K U P &gt;--------------------------------

Strip wiki italic and bold markup from argument so that it doesn't contaminate COinS metadata.
This function strips common patterns of apostrophe markup.  We presume that editors who have taken the time to
markup a title have, as a result, provided valid markup. When they don't, some single apostrophes are left behind.

]]

local function strip_apostrophe_markup (argument)
	if not is_set (argument) then return argument; end

	if argument:find ( "''", 1, true ) == nil then								-- Is there at least one double apostrophe?  If not, exit.
		return argument;
	end

	while true do
		if argument:find ( "'''''", 1, true ) then								-- bold italic (5)
			argument=argument:gsub("%'%'%'%'%'", "");							-- remove all instances of it
		elseif argument:find ( "''''", 1, true ) then							-- italic start and end without content (4)
			argument=argument:gsub("%'%'%'%'", "");
		elseif argument:find ( "'''", 1, true ) then							-- bold (3)
			argument=argument:gsub("%'%'%'", "");
		elseif argument:find ( "''", 1, true ) then								-- italic (2)
			argument=argument:gsub("%'%'", "");
		else
			break;
		end
	end
	return argument;															-- done
end


--[[--------------------------&lt; M A K E _ C O I N S _ T I T L E &gt;----------------------------------------------

Makes a title for COinS from Title and / or ScriptTitle (or any other name-script pairs)

Apostrophe markup (bold, italics) is stripped from each value so that the COinS metadata isn't corrupted with strings
of %27%27...

]]

local function make_coins_title (title, script)
	if is_set (title) then
		title = strip_apostrophe_markup (title);								-- strip any apostrophe markup
	else
		title='';																-- if not set, make sure title is an empty string
	end
	if is_set (script) then
		script = script:gsub ('^%l%l%s*:%s*', '');								-- remove language prefix if present (script value may now be empty string)
		script = strip_apostrophe_markup (script);								-- strip any apostrophe markup
	else
		script='';																-- if not set, make sure script is an empty string
	end
	if is_set (title) and is_set (script) then
		script = ' ' .. script;													-- add a space before we concatenate
	end
	return title .. script;														-- return the concatenation
end


--[[--------------------------&lt; E S C A P E _ L U A _ M A G I C _ C H A R S &gt;----------------------------------

Returns a string where all of lua's magic characters have been escaped.  This is important because functions like
string.gsub() treat their pattern and replace strings as patterns, not literal strings.
]]

local function escape_lua_magic_chars (argument)
	argument = argument:gsub("%%", "%%%%");										-- replace % with %%
	argument = argument:gsub("([%^%$%(%)%.%[%]%*%+%-%?])", "%%%1");				-- replace all other lua magic pattern characters
	return argument;
end


--[[--------------------------&lt; G E T _ C O I N S _ P A G E S &gt;------------------------------------------------

Extract page numbers from external wikilinks in any of the |page=, |pages=, or |at= parameters for use in COinS.

]]

local function get_coins_pages (pages)
	local pattern;
	if not is_set (pages) then return pages; end								-- if no page numbers then we're done
	
	while true do
		pattern = pages:match("%[(%w*:?//[^ ]+%s+)[%w%d].*%]");					-- pattern is the opening bracket, the url and following space(s): "[url "
		if nil == pattern then break; end										-- no more urls
		pattern = escape_lua_magic_chars (pattern);								-- pattern is not a literal string; escape lua's magic pattern characters
		pages = pages:gsub(pattern, "");										-- remove as many instances of pattern as possible
	end
	pages = pages:gsub("[%[%]]", "");											-- remove the brackets
	pages = pages:gsub("–", "-" );							-- replace endashes with hyphens
	pages = pages:gsub("&amp;%w+;", "-" );						-- and replace html entities (&amp;ndash; etc.) with hyphens; do we need to replace numerical entities like &amp;#32; and the like?
	return pages;
end


--[=[-------------------------&lt; C O I N S _ R E P L A C E _ M A T H _ S T R I P M A R K E R &gt;------------------

There are three options for math markup rendering that depend on the editor's math preference settings.  These
settings are at [[Special:Preferences#mw-prefsection-rendering]] and are
	PNG images
	TeX source
	MathML with SVG or PNG fallback

All three are heavy with html and css which doesn't belong in the metadata.

Without this function, the metadata saved in the raw wikitext contained the rendering determined by the settings
of the last editor to save the page.

This function gets the rendered form of an equation according to the editor's preference before the page is saved.  It
then searches the rendering for the text equivalent of the rendered equation and replaces the rendering with that so
that the page is saved without extraneous html/css markup and with a reasonably readable text form of the equation.

When a replacement is made, this function returns true and the value with replacement; otherwise false and the intital
value.  To replace multipe equations it is necesary to call this function from within a loop.

]=]

local function coins_replace_math_stripmarker (value)
	local stripmarker = cfg.stripmarkers['math'];
	local rendering = value:match (stripmarker);								-- is there a math stripmarker

	if not rendering then														-- when value doesn't have a math stripmarker, abandon this test
		return false, value;
	end
	
	rendering = mw.text.unstripNoWiki (rendering);								-- convert stripmarker into rendered value (or nil? ''? when math render error)
	
	if rendering:match ('alt="[^"]+"') then										-- if PNG math option
		rendering = rendering:match ('alt="([^"]+)"');							-- extract just the math text
	elseif rendering:match ('$%s+.+%s+%$') then									-- if TeX math option; $ is legit character that is escapes as \$
		rendering = rendering:match ('$%s+(.+)%s+%$')							-- extract just the math text
	elseif rendering:match ('&lt;annotation[^&gt;]+&gt;.+&lt;/annotation&gt;') then			-- if MathML math option
		rendering = rendering:match ('&lt;annotation[^&gt;]+&gt;(.+)&lt;/annotation&gt;')		-- extract just the math text
	else
		return false, value;													-- had math stripmarker but not one of the three defined forms
	end
	
	return true, value:gsub (stripmarker, rendering, 1);
end


--[[--------------------------&lt; C O I N S _ C L E A N U P &gt;----------------------------------------------------

Cleanup parameter values for the metadata by removing or replacing invisible characters and certain html entities.

2015-12-10: there is a bug in mw.text.unstripNoWiki ().  It replaces math stripmarkers with the appropriate content
when it shouldn't.  See https://phabricator.wikimedia.org/T121085 and Wikipedia_talk:Lua#stripmarkers_and_mw.text.unstripNoWiki.28.29

TODO: move the replacement patterns and replacement values into a table in /Configuration similar to the invisible
characters table?

]]

local function coins_cleanup (value)
	local replaced = true;														-- default state to get the do loop running

	while replaced do															-- loop until all math stripmarkers replaced
		replaced, value = coins_replace_math_stripmarker (value);				-- replace math stripmarker with text representation of the equation
	end

	value = value:gsub (cfg.stripmarkers['math'], "MATH RENDER ERROR");						-- one or more couldn't be replaced; insert vague error message
	
	value = mw.text.unstripNoWiki (value);										-- replace nowiki stripmarkers with their content
	value = value:gsub ('&lt;span class="nowrap" style="padding%-left:0%.1em;"&gt;&amp;#39;(s?)&lt;/span&gt;', "'%1");	-- replace {{'}} or {{'s}} with simple apostrophe or apostrophe-s
	value = value:gsub ('&amp;nbsp;', ' ');											-- replace &amp;nbsp; entity with plain space
	value = value:gsub ('\226\128\138', ' ');									-- replace hair space with plain space
	if not mw.ustring.find (value, cfg.indic_script) then						-- don't remove zero width joiner characters from indic script
		value = value:gsub ('&amp;zwj;', '');											-- remove &amp;zwj; entities
		value = mw.ustring.gsub (value, '[\226\128\141\226\128\139\194\173]', '');	-- remove zero-width joiner, zero-width space, soft hyphen
	end
	value = value:gsub ('[\009\010\013]', ' ');									-- replace horizontal tab, line feed, carriage return with plain space
	return value;
end


--[[--------------------------&lt; C O I N S &gt;--------------------------------------------------------------------

COinS metadata (see &lt;http://ocoins.info/&gt;) allows automated tools to parse the citation information.

]]

local function COinS(data, class)
	if 'table' ~= type(data) or nil == next(data) then
		return '';
	end

	for k, v in pairs (data) do													-- spin through all of the metadata parameter values
		if 'ID_list' ~= k and 'Authors' ~= k then								-- except the ID_list and Author tables (author nowiki stripmarker done when Author table processed)
			data[k] = coins_cleanup (v);
		end
	end

	local ctx_ver = "Z39.88-2004";
	
	-- treat table strictly as an array with only set values.
	local OCinSoutput = setmetatable( {}, {
		__newindex = function(self, key, value)
			if is_set(value) then
				rawset( self, #self+1, table.concat{ key, '=', mw.uri.encode( remove_wiki_link( value ) ) } );
			end
		end
	});
	
	if in_array (class, {'arxiv', 'biorxiv', 'citeseerx', 'journal', 'news'}) or (in_array (class, {'conference', 'interview', 'map', 'press release', 'web'}) and is_set(data.Periodical)) or 
		('citation' == class and is_set(data.Periodical) and not is_set (data.Encyclopedia)) then
			OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:journal";			-- journal metadata identifier
			if in_array (class, {'arxiv', 'biorxiv', 'citeseerx'}) then			-- set genre according to the type of citation template we are rendering
				OCinSoutput["rft.genre"] = "preprint";							-- cite arxiv, cite biorxiv, cite citeseerx
			elseif 'conference' == class then
				OCinSoutput["rft.genre"] = "conference";						-- cite conference (when Periodical set)
			elseif 'web' == class then
				OCinSoutput["rft.genre"] = "unknown";							-- cite web (when Periodical set)
			else
				OCinSoutput["rft.genre"] = "article";							-- journal and other 'periodical' articles
			end
			OCinSoutput["rft.jtitle"] = data.Periodical;						-- journal only
			OCinSoutput["rft.atitle"] = data.Title;								-- 'periodical' article titles

																				-- these used only for periodicals
			OCinSoutput["rft.ssn"] = data.Season;								-- keywords: winter, spring, summer, fall
			OCinSoutput["rft.chron"] = data.Chron;								-- free-form date components
			OCinSoutput["rft.volume"] = data.Volume;							-- does not apply to books
			OCinSoutput["rft.issue"] = data.Issue;
			OCinSoutput["rft.pages"] = data.Pages;								-- also used in book metadata

	elseif 'thesis' ~= class then												-- all others except cite thesis are treated as 'book' metadata; genre distinguishes
		OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:book";					-- book metadata identifier
		if 'report' == class or 'techreport' == class then						-- cite report and cite techreport
			OCinSoutput["rft.genre"] = "report";
		elseif 'conference' == class then										-- cite conference when Periodical not set
			OCinSoutput["rft.genre"] = "conference";
			OCinSoutput["rft.atitle"] = data.Chapter;							-- conference paper as chapter in proceedings (book)
		elseif in_array (class, {'book', 'citation', 'encyclopaedia', 'interview', 'map'}) then
			if is_set (data.Chapter) then
				OCinSoutput["rft.genre"] = "bookitem";
				OCinSoutput["rft.atitle"] = data.Chapter;						-- book chapter, encyclopedia article, interview in a book, or map title
			else
				if 'map' == class or 'interview' == class then
					OCinSoutput["rft.genre"] = 'unknown';						-- standalone map or interview
				else
					OCinSoutput["rft.genre"] = 'book';							-- book and encyclopedia
				end
			end
		else	--{'audio-visual', 'AV-media-notes', 'DVD-notes', 'episode', 'interview', 'mailinglist', 'map', 'newsgroup', 'podcast', 'press release', 'serial', 'sign', 'speech', 'web'}
			OCinSoutput["rft.genre"] = "unknown";
		end
		OCinSoutput["rft.btitle"] = data.Title;									-- book only
		OCinSoutput["rft.place"] = data.PublicationPlace;						-- book only
		OCinSoutput["rft.series"] = data.Series;								-- book only
		OCinSoutput["rft.pages"] = data.Pages;									-- book, journal
		OCinSoutput["rft.edition"] = data.Edition;								-- book only
		OCinSoutput["rft.pub"] = data.PublisherName;							-- book and dissertation
		
	else																		-- cite thesis
		OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:dissertation";			-- dissertation metadata identifier
		OCinSoutput["rft.title"] = data.Title;									-- dissertation (also patent but that is not yet supported)
		OCinSoutput["rft.degree"] = data.Degree;								-- dissertation only
		OCinSoutput['rft.inst'] = data.PublisherName;							-- book and dissertation
	end
																				-- and now common parameters (as much as possible)
	OCinSoutput["rft.date"] = data.Date;										-- book, journal, dissertation
	
	for k, v in pairs( data.ID_list ) do										-- what to do about these? For now assume that they are common to all?
--		if k == 'ISBN' then v = clean_isbn( v ) end
		if k == 'ISBN' then v = v:gsub( "[^-0-9X]", "" ); end
		local id = cfg.id_handlers[k].COinS;
		if string.sub( id or "", 1, 4 ) == 'info' then							-- for ids that are in the info:registry
			OCinSoutput["rft_id"] = table.concat{ id, "/", v };
		elseif string.sub (id or "", 1, 3 ) == 'rft' then						-- for isbn, issn, eissn, etc that have defined COinS keywords
			OCinSoutput[ id ] = v;
		elseif id then															-- when cfg.id_handlers[k].COinS is not nil
			OCinSoutput["rft_id"] = table.concat{ cfg.id_handlers[k].prefix, v };	-- others; provide a url
		end
	end

--[[	
	for k, v in pairs( data.ID_list ) do										-- what to do about these? For now assume that they are common to all?
		local id, value = cfg.id_handlers[k].COinS;
		if k == 'ISBN' then value = clean_isbn( v ); else value = v; end
		if string.sub( id or "", 1, 4 ) == 'info' then
			OCinSoutput["rft_id"] = table.concat{ id, "/", v };
		else
			OCinSoutput[ id ] = value;
		end
	end
]]
	local last, first;
	for k, v in ipairs( data.Authors ) do
		last, first = coins_cleanup (v.last), coins_cleanup (v.first or '');	-- replace any nowiki strip markers, non-printing or invisible characers
		if k == 1 then															-- for the first author name only
			if is_set(last)  and is_set(first) then								-- set these COinS values if |first= and |last= specify the first author name
				OCinSoutput["rft.aulast"] = last;								-- book, journal, dissertation
				OCinSoutput["rft.aufirst"] = first;								-- book, journal, dissertation
			elseif is_set(last) then 
				OCinSoutput["rft.au"] = last;									-- book, journal, dissertation -- otherwise use this form for the first name
			end
		else																	-- for all other authors
			if is_set(last) and is_set(first) then
				OCinSoutput["rft.au"] = table.concat{ last, ", ", first };		-- book, journal, dissertation
			elseif is_set(last) then
				OCinSoutput["rft.au"] = last;									-- book, journal, dissertation
			end
		end
	end

	OCinSoutput.rft_id = data.URL;
	OCinSoutput.rfr_id = table.concat{ "info:sid/", mw.site.server:match( "[^/]*$" ), ":", data.RawPage };
	OCinSoutput = setmetatable( OCinSoutput, nil );
	
	-- sort with version string always first, and combine.
	--table.sort( OCinSoutput );
	table.insert( OCinSoutput, 1, "ctx_ver=" .. ctx_ver );  -- such as "Z39.88-2004"
	return table.concat(OCinSoutput, "&amp;");
end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local cfg table and imported functions table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr, utilities_page_ptr)
	cfg = cfg_table_ptr;

	is_set = utilities_page_ptr.is_set;											-- import functions from select Module:Citation/CS1/Utilities module
	in_array = utilities_page_ptr.in_array;
	remove_wiki_link = utilities_page_ptr.remove_wiki_link;
end



return {
	make_coins_title = make_coins_title,
	get_coins_pages = get_coins_pages,
	COinS = COinS,
	set_selected_modules = set_selected_modules,
	}</text>
      <sha1>coep8us87urtrppcmr74si4z4ldv4gs</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Configuration</title>
    <ns>828</ns>
    <id>39043527</id>
    <revision>
      <id>848668782</id>
      <parentid>848646740</parentid>
      <timestamp>2018-07-03T13:43:17Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>Undid revision 848646740 by [[Special:Contributions/Trappist the monk|Trappist the monk]] ([[User talk:Trappist the monk|talk]]) doi.org is not accepting fully url encoded urls; '/' character must not be encoded;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="51769">
local citation_config = {};

-- override &lt;code&gt;...&lt;/code&gt; styling to remove color, border, and padding.  &lt;code&gt; css is specified here:
-- https://git.wikimedia.org/blob/mediawiki%2Fcore.git/69cd73811f7aadd093050dbf20ed70ef0b42a713/skins%2Fcommon%2FcommonElements.css#L199
local code_style="color:inherit; border:inherit; padding:inherit;";

--[[--------------------------&lt; U N C A T E G O R I Z E D _ N A M E S P A C E S &gt;------------------------------

List of namespaces that should not be included in citation error categories.  Same as setting notracking = true by default

Note: Namespace names should use underscores instead of spaces.

]]
local uncategorized_namespaces = { 'User', 'Talk', 'User_talk', 'Wikipedia_talk', 'File_talk', 'Template_talk', 'Help_talk', 'Category_talk', 'Portal_talk', 'Book_talk', 'Draft_talk', 'Education_Program_talk', 'Module_talk', 'MediaWiki_talk' };

local uncategorized_subpages = {'/[Ss]andbox', '/[Tt]estcases'};		-- list of Lua patterns found in page names of pages we should not categorize


--[[--------------------------&lt; M E S S A G E S &gt;--------------------------------------------------------------

Translation table

The following contains fixed text that may be output as part of a citation.
This is separated from the main body to aid in future translations of this
module.

]]

local messages = {
	['archived-dead'] = 'Archived from $1 on $2',
	['archived-not-dead'] = '$1 from the original on $2',
	['archived-missing'] = 'Archived from the original$1 on $2',
	['archived'] = 'Archived',
	['by'] = 'By',																-- contributions to authored works: introduction, foreword, afterword
	['cartography'] = 'Cartography by $1',
	['editor'] = 'ed.',
	['editors'] = 'eds.',
	['edition'] = '($1 ed.)',
	['episode'] = 'Episode $1',
	['et al'] = 'et al.',
	['in'] = 'In',																-- edited works
	['inactive'] = 'inactive',
	['inset'] = '$1 inset',
	['interview'] = 'Interviewed by $1',										
	['lay summary'] = 'Lay summary',
	['newsgroup'] = '[[Usenet newsgroup|Newsgroup]]:&amp;nbsp;$1',
	['original'] = 'the original',
	['published'] = ' (published $1)',
	['retrieved'] = 'Retrieved $1',
	['season'] = 'Season $1',
	['section'] = '§ $1',
	['sections'] = '§§ $1',
	['series'] = 'Series $1',
	['translated'] = 'Translated by $1',
	['type'] = ' ($1)',															-- for titletype
	['written'] = 'Written at $1',

	['vol'] = '$1 Vol.&amp;nbsp;$2',												-- $1 is sepc; bold journal style volume is in presentation{}
	['vol-no'] = '$1 Vol.&amp;nbsp;$2 no.&amp;nbsp;$3',									-- sepc, volume, issue
	['issue'] = '$1 No.&amp;nbsp;$2',												-- $1 is sepc

	['j-vol'] = '$1 $2',														-- sepc, volume; bold journal volume is in presentation{}
	['j-issue'] = ' ($1)',

	['nopp'] = '$1 $2';															-- page(s) without prefix; $1 is sepc

	['p-prefix'] = "$1 p.&amp;nbsp;$2",												-- $1 is sepc
	['pp-prefix'] = "$1 pp.&amp;nbsp;$2",											-- $1 is sepc
	['j-page(s)'] = ': $1',														-- same for page and pages

	['sheet'] = '$1 Sheet&amp;nbsp;$2',												-- $1 is sepc
	['sheets'] = '$1 Sheets&amp;nbsp;$2',											-- $1 is sepc
	['j-sheet'] = ': Sheet&amp;nbsp;$1',
	['j-sheets'] = ': Sheets&amp;nbsp;$1',
	
	['subscription'] = '&lt;span style="font-size:90%; color:#555"&gt;(Subscription required (&lt;span title="The site requires a paid subscription to access this page." style="border-bottom:1px dotted;cursor:help"&gt;help&lt;/span&gt;))&lt;/span&gt;' ..
		'[[Category:Pages containing links to subscription-only content]]',
	
	['registration']='&lt;span style="font-size:90%; color:#555"&gt;(Registration required (&lt;span title="The site requires registration to access this page." style="border-bottom:1px dotted;cursor:help"&gt;help&lt;/span&gt;))&lt;/span&gt;' ..
		'[[Category:Pages with login required references or sources]]',
	
	['language'] = '(in $1)',
	['via'] = " &amp;ndash; via $1",
	['event'] = 'Event occurs at',
	['minutes'] = 'minutes in',
	
	['parameter-separator'] = ', ',
	['parameter-final-separator'] = ', and ',
	['parameter-pair-separator'] = ' and ',
	
	-- Determines the location of the help page
	['help page link'] = 'Help:CS1 errors',
	['help page label'] = 'help',
	
	-- Internal errors (should only occur if configuration is bad)
	['undefined_error'] = 'Called with an undefined error condition',
	['unknown_manual_ID'] = 'Unrecognized manual ID mode',
	['unknown_ID_mode'] = 'Unrecognized ID mode',
	['unknown_argument_map'] = 'Argument map not defined for this variable',
	['bare_url_no_origin'] = 'Bare url found but origin indicator is nil or empty',
	}


--[[--------------------------&lt; P R E S E N T A T I O N &gt;------------------------------------------------------

Fixed presentation markup.  Originally part of citation_config.messages it has been moved into its own, more semantically
correct place.

]]

local presentation = 
	{
	-- Error output
	-- .error class is specified at https://git.wikimedia.org/blob/mediawiki%2Fcore.git/9553bd02a5595da05c184f7521721fb1b79b3935/skins%2Fcommon%2Fshared.css#L538
	-- .citation-comment class is specified at Help:CS1_errors#Controlling_error_message_display
	['hidden-error'] = '&lt;span style="display:none;font-size:100%" class="error citation-comment"&gt;$1&lt;/span&gt;',
	['visible-error'] = '&lt;span style="font-size:100%" class="error citation-comment"&gt;$1&lt;/span&gt;',

	['accessdate'] = '&lt;span class="reference-accessdate"&gt;$1$2&lt;/span&gt;',			-- to allow editors to hide accessdate using personal css

	['bdi'] = '&lt;bdi$1&gt;$2&lt;/bdi&gt;',												-- bidirectional isolation used with |script-title= and the like

	['cite'] = '&lt;cite class="$1"&gt;$2&lt;/cite&gt;';									-- |ref= not set so no id="..." attribute
	['cite-id'] = '&lt;cite id="$1" class="$2"&gt;$3&lt;/cite&gt;';							-- for use when |ref= is set

	['format'] = ' &lt;span style="font-size:85%;"&gt;($1)&lt;/span&gt;',					-- for |format=, |chapter-format=, etc
	
																				-- various access levels, for |access=, |doi-access=, |arxiv=, ...
																				-- narrow no-break space &amp;#8239; may work better than nowrap css. Or not? browser support?

	['access-signal'] = '&lt;span class="plainlinks"&gt;$1&amp;#8239;$2&lt;/span&gt;',			-- external link with appropriate lock icon
		['free'] = '[[File:Lock-green.svg|9px|link=|alt=Freely accessible|Freely accessible]]',
		['registration'] = '[[File:Lock-blue-alt-2.svg|9px|link=|alt=Free registration required|Free registration required]]',
		['limited'] = '[[File:Lock-blue-alt-2.svg|9px|link=|alt=Free access subject to limited trial, subscription normally required|Free access subject to limited trial, subscription normally required]]',
		['subscription'] = '[[File:Lock-red-alt.svg|9px|link=|alt=Paid subscription required|Paid subscription required]]',

	['italic-title'] = "''$1''",

	['kern-left'] = '&lt;span style="padding-left:0.2em;"&gt;$1&lt;/span&gt;$2',			-- spacing to use when title contains leading single or double quote mark
	['kern-right'] = '$1&lt;span style="padding-right:0.2em;"&gt;$2&lt;/span&gt;',			-- spacing to use when title contains trailing single or double quote mark

																				-- these for simple wikilinked titles [["text]], [[text"]] and [["text"]]
																				-- span wraps entire wikilink
	['kern-wl-left'] = '&lt;span style="padding-left:0.2em;"&gt;$1&lt;/span&gt;',			-- when title contains leading single or double quote mark
	['kern-wl-right'] = '&lt;span style="padding-right:0.2em;"&gt;$1&lt;/span&gt;',			-- when title contains trailing single or double quote mark
	['kern-wl-both'] = '&lt;span style="padding-left:0.2em;padding-right:0.2em;"&gt;$1&lt;/span&gt;',	-- when title contains leading and trailing single or double quote marks

	['nowrap1'] = '&lt;span class="nowrap"&gt;$1&lt;/span&gt;',								-- for nowrapping an item: &lt;span ...&gt;yyyy-mm-dd&lt;/span&gt;
	['nowrap2'] = '&lt;span class="nowrap"&gt;$1&lt;/span&gt; $2',							-- for nowrapping portions of an item: &lt;span ...&gt;dd mmmm&lt;/span&gt; yyyy (note white space)

	['ocins'] = '&lt;span title="$1" class="Z3988"&gt;&lt;span style="display:none;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;',		-- Note: Using display: none on the COinS span breaks some clients

	['parameter'] = '&lt;code style="'..code_style..'"&gt;&amp;#124;$1=&lt;/code&gt;',

	['ps_cs1'] = '.';															-- cs1 style postscript (terminal) character
	['ps_cs2'] = '';															-- cs2 style postscript (terminal) character (empty string)

	['quoted-text'] = '&lt;q&gt;$1&lt;/q&gt;',												-- for wrapping |quote= content
	['quoted-title'] = '"$1"',

	['sep_cs1'] = '.',															-- cs1 element separator
	['sep_cs2'] = ',',															-- cs2 separator
	['sep_nl'] = ';',															-- cs1|2 style name-list separator between authors is a semicolon
	['sep_name'] = ', ',														-- cs1|2 style last/first separator is &lt;comma&gt;&lt;space&gt;
	['sep_nl_vanc'] = ',',														-- Vancouver style name-list separator between authors is a comma
	['sep_name_vanc'] = ' ',													-- Vancouver style last/first separator is a space

	['trans-italic-title'] = "&amp;#91;''$1''&amp;#93;",
	['trans-quoted-title'] = "&amp;#91;$1&amp;#93;",
	['vol-bold'] = '$1 &lt;b&gt;$2&lt;/b&gt;',												-- sepc, volume; for bold journal cites; for other cites ['vol'] in messages{}
	}

	
--[[--------------------------&lt; A L I A S E S &gt;----------------------------------------------------------------

Aliases table for commonly passed parameters

]]

local aliases = {
	['AccessDate'] = {'access-date', 'accessdate'},
	['Agency'] = 'agency',
	['AirDate'] = {'air-date', 'airdate'},
	['ArchiveDate'] = {'archive-date', 'archivedate'},
	['ArchiveFormat'] = 'archive-format',
	['ArchiveURL'] = {'archive-url', 'archiveurl'},
	['ASINTLD'] = {'ASIN-TLD', 'asin-tld'},
	['At'] = 'at',
	['Authors'] = {'authors', 'people', 'host', 'credits'},
	['BookTitle'] = {'book-title', 'booktitle'},
	['Cartography'] = 'cartography',
	['Chapter'] = {'chapter', 'contribution', 'entry', 'article', 'section'},
	['ChapterFormat'] = {'chapter-format', 'contribution-format', 'entry-format', 'article-format', 'section-format'};
	['ChapterURL'] = {'chapter-url', 'chapterurl', 'contribution-url', 'contributionurl', 'entry-url', 'article-url', 'section-url', 'sectionurl'},
	['ChapterUrlAccess'] = {'chapter-url-access', 'contribution-url-access', 'entry-url-access', 'article-url-access', 'section-url-access'},
	['Class'] = 'class',														-- cite arxiv and arxiv identifiers
	['Collaboration'] = 'collaboration',
	['Conference'] = {'conference', 'event'},
	['ConferenceFormat'] = {'conference-format', 'event-format'},
	['ConferenceURL'] = {'conference-url', 'conferenceurl', 'event-url', 'eventurl'},
	['Contribution'] = 'contribution',											-- introduction, foreword, afterword, etc; required when |contributor= set
	['Date'] = 'date',
	['DeadURL'] = {'dead-url', 'deadurl'},
	['Degree'] = 'degree',
	['DF'] = 'df',
	['DisplayAuthors'] = {'display-authors', 'displayauthors'},
	['DisplayEditors'] = {'display-editors', 'displayeditors'},
	['Docket'] = 'docket',
	['DoiBroken'] = {'doi-broken', 'doi-broken-date', 'doi-inactive-date'},
	['Edition'] = 'edition',
	['Editors'] = 'editors',
	['Embargo'] = 'embargo',
	['Encyclopedia'] = {'encyclopedia', 'encyclopaedia'},						-- this one only used by citation
	['Episode'] = 'episode',													-- cite serial only TODO: make available to cite episode?
	['Format'] = 'format',
	['ID'] = {'id', 'ID'},
	['IgnoreISBN'] = {'ignore-isbn-error', 'ignoreisbnerror'},
	['Inset'] = 'inset',
	['Issue'] = {'issue', 'number'},
	['Interviewers'] = 'interviewers',
	['Language'] = {'language', 'in', 'lang'},
	['LastAuthorAmp'] = {'last-author-amp', 'lastauthoramp'},
	['LayDate'] = {'lay-date', 'laydate'},
	['LayFormat'] = 'lay-format',
	['LaySource'] = {'lay-source', 'laysource'},
	['LayURL'] = {'lay-url', 'lay-summary', 'layurl', 'laysummary'},
	['MailingList'] = {'mailinglist', 'mailing-list'},							-- cite mailing list only
	['Map'] = 'map',															-- cite map only
	['MapFormat'] = 'map-format',												-- cite map only
	['MapURL'] = {'mapurl', 'map-url'},											-- cite map only
	['MessageID'] = 'message-id',
	['Minutes'] = 'minutes',
	['Mode'] = 'mode',
	['NameListFormat'] = 'name-list-format',
	['Network'] = 'network',
	['NoPP'] = {'no-pp', 'nopp'},
	['NoTracking'] = {'template-doc-demo', 'no-cat', 'nocat',
		'no-tracking', 'notracking'},
	['Number'] = 'number',														-- this case only for cite techreport
	['OrigYear'] = {'orig-year', 'origyear'},
	['Others'] = 'others',
	['Page'] = {'p', 'page'},
	['Pages'] = {'pp', 'pages'},
	['Periodical'] = {'journal', 'newspaper', 'magazine', 'work',
		'website',  'periodical', 'encyclopedia', 'encyclopaedia', 'dictionary', 'mailinglist'},
	['Place'] = {'place', 'location'},
	['PostScript'] = 'postscript',
	['PublicationDate'] = {'publicationdate', 'publication-date'},
	['PublicationPlace'] = {'publication-place', 'publicationplace'},
	['PublisherName'] = {'publisher', 'distributor', 'institution', 'newsgroup'},
	['Quote'] = {'quote', 'quotation'},
	['Ref'] = 'ref',
	['RegistrationRequired'] = 'registration',
	['Scale'] = 'scale',
	['ScriptChapter'] = 'script-chapter',
	['ScriptTitle'] = 'script-title',
	['Section'] = 'section',
	['Season'] = 'season',
	['Sections'] = 'sections',													-- cite map only
	['Series'] = {'series', 'version'},
	['SeriesSeparator'] = 'series-separator',
	['SeriesLink'] = {'series-link', 'serieslink'},
	['SeriesNumber'] = {'series-number', 'series-no', 'seriesnumber', 'seriesno'},
	['Sheet'] = 'sheet',														-- cite map only
	['Sheets'] = 'sheets',														-- cite map only
	['Station'] = 'station',
	['SubscriptionRequired'] = 'subscription',
	['Time'] = 'time',
	['TimeCaption'] = {'time-caption', 'timecaption'},
	['Title'] = 'title',
	['TitleLink'] = {'title-link', 'episode-link', 'titlelink', 'episodelink'},
	['TitleNote'] = 'department',
	['TitleType'] = {'type', 'medium'},
	['TransChapter'] = 'trans-chapter',
	['TransMap'] = 'trans-map',													-- cite map only
	['Transcript'] = 'transcript',
	['TranscriptFormat'] = 'transcript-format',
	['TranscriptURL'] = {'transcript-url', 'transcripturl'},
	['TransTitle'] = 'trans-title',
	['URL'] = {'url', 'URL'},
	['UrlAccess'] = {'url-access'},
	['Vauthors'] = 'vauthors',
	['Veditors'] = 'veditors',
	['Via'] = 'via',
	['Volume'] = 'volume',
	['Year'] = 'year',

	['AuthorList-First'] = {"first#", "given#", "author-first#", "author#-first"},
	['AuthorList-Last'] = {"last#", "author#", "surname#", "author-last#", "author#-last", "subject#"},
	['AuthorList-Link'] = {"authorlink#", "author-link#", "author#-link", "subjectlink#", "author#link", "subject-link#", "subject#-link", "subject#link"},
	['AuthorList-Mask'] = {"author-mask#", "authormask#", "author#mask", "author#-mask"},
	
	['ContributorList-First'] = {'contributor-first#', 'contributor#-first', 'contributor-given#', 'contributor#-given'},
	['ContributorList-Last'] = {'contributor#', 'contributor-last#', 'contributor#-last', 'contributor-surname#', 'contributor#-surname'},
	['ContributorList-Link'] = {'contributor-link#', 'contributor#-link'},
	['ContributorList-Mask'] = {'contributor-mask#', 'contributor#-mask'},

	['EditorList-First'] = {"editor-first#", "editor#-first", "editor-given#", "editor#-given"},
	['EditorList-Last'] = {"editor#", "editor-last#", "editor#-last", "editor-surname#", "editor#-surname"},
	['EditorList-Link'] = {"editor-link#", "editor#-link", "editorlink#", "editor#link"},
	['EditorList-Mask'] = {"editor-mask#", "editor#-mask", "editormask#", "editor#mask"},
	
	['InterviewerList-First'] = {'interviewer-first#', 'interviewer#-first'},
	['InterviewerList-Last'] = {'interviewer#', 'interviewer-last#', 'interviewer#-last'},
	['InterviewerList-Link'] = {'interviewer-link#', 'interviewer#-link'},
	['InterviewerList-Mask'] = {'interviewer-mask#', 'interviewer#-mask'},

	['TranslatorList-First'] = {'translator-first#', 'translator#-first', 'translator-given#', 'translator#-given'},
	['TranslatorList-Last'] = {'translator#', 'translator-last#', 'translator#-last', 'translator-surname#', 'translator#-surname'},
	['TranslatorList-Link'] = {'translator-link#', 'translator#-link'},
	['TranslatorList-Mask'] = {'translator-mask#', 'translator#-mask'},
	}


--[[--------------------------&lt; S P E C I A L   C A S E   T R A N S L A T I O N S &gt;----------------------------

This table is primarily here to support internationalization.  Translations in this table are used, for example,
when an error message, category name, etc is extracted from the English alias key.  There may be other cases where
this translation table may be useful.

]]

local special_case_translation = {
	['AuthorList'] = "authors list",											-- these for multiple names maint categories
	['ContributorList'] = "contributors list",
	['EditorList'] = "editors list",
	['InterviewerList'] = "interviewers list",
	['TranslatorList'] = "translators list",
	
	['authors'] = "authors",													-- used in get_display_authors_editors()
	['editors'] = "editors",
	}


--[[--------------------------&lt; D E F A U L T S &gt;--------------------------------------------------------------

Default parameter values

TODO: keep this?  Only one default?
]]

local defaults = {
	['DeadURL'] = 'yes',
}


--[[--------------------------&lt; D A T E _ N A M E S &gt;----------------------------------------------------------

This table of tables lists local language date names and fallback English date names.  The code in Date_validation
will look first in the local table for valid date names.  If date names are not found in the local table, the code
will look in the English table.

Because citations can be copied to the local wiki from en.wiki, the English is required when the date-name translation
function date_name_xlate() is used.

In these tables, season numbering is defined by ISO DIS 8601:2016 part 2 §4.7 'Divisions of a year'.  The standard
defines various divisions using numbers 21-41.  cs1|2 only supports generic seasons.  ISO DIS 8601:2016 does support
the distinction between north and south hemispere seasons but cs1|2 has no way to make that distinction.

The standard does not address 'named' dates so, for the purposes of cs1|2, Christmas is defined here as 99, which
should be out of the ISO DIS 8601:2016 range of uses for a while.

]]

local date_names = {
	['en'] = {			-- English
		['long']	= {['January']=1, ['February']=2, ['March']=3, ['April']=4, ['May']=5, ['June']=6, ['July']=7, ['August']=8, ['September']=9, ['October']=10, ['November']=11, ['December']=12};
		['short']	= {['Jan']=1, ['Feb']=2, ['Mar']=3, ['Apr']=4, ['May']=5, ['Jun']=6, ['Jul']=7, ['Aug']=8, ['Sep']=9, ['Oct']=10, ['Nov']=11, ['Dec']=12};
		['season']	= {['Winter']=24, ['Spring']=21, ['Summer']=22, ['Fall']=23, ['Autumn']=23};
		['named']	= {['Christmas']=99};
		},
	['local'] = {		-- replace these English date names with the local language equivalents
		['long']	= {['January']=1, ['February']=2, ['March']=3, ['April']=4, ['May']=5, ['June']=6, ['July']=7, ['August']=8, ['September']=9, ['October']=10, ['November']=11, ['December']=12};
		['short']	= {['Jan']=1, ['Feb']=2, ['Mar']=3, ['Apr']=4, ['May']=5, ['Jun']=6, ['Jul']=7, ['Aug']=8, ['Sep']=9, ['Oct']=10, ['Nov']=11, ['Dec']=12};
		['season']	= {['Winter']=24, ['Spring']=21, ['Summer']=22, ['Fall']=23, ['Autumn']=23};
		['named']	= {['Christmas']=99};
		},
	['local_digits'] = {['0'] = '0', ['1'] = '1', ['2'] = '2', ['3'] = '3', ['4'] = '4', ['5'] = '5', ['6'] = '6', ['7'] = '7', ['8'] = '8', ['9'] = '9'};	-- used to convert local language digits to Western 0-9
	['xlate_digits'] = {};
	}

	for ld, ed in pairs (date_names.local_digits) do							-- make a digit translation table for simple date translation from en to local language using local_digits table
		date_names.xlate_digits [ed] = ld;										-- en digit becomes index with local digit as the value
	end


--[[--------------------------&lt; V O L U M E ,  I S S U E ,  P A G E S &gt;----------------------------------------

These tables hold cite class values (from the template invocation) and identify those templates that support
|volume=, |issue=, and |page(s)= parameters.  Cite conference and cite map require further qualification which
is handled in the main module.

]]

local templates_using_volume = {'citation', 'audio-visual', 'book', 'conference', 'encyclopaedia', 'interview', 'journal', 'magazine', 'map', 'news', 'report', 'techreport', 'thesis'}
local templates_using_issue = {'citation', 'conference', 'episode', 'interview', 'journal', 'magazine', 'map', 'news'}
local templates_not_using_page = {'audio-visual', 'episode', 'mailinglist', 'newsgroup', 'podcast', 'serial', 'sign', 'speech'}


--[[--------------------------&lt; K E Y W O R D S &gt;--------------------------------------------------------------

This table holds keywords for those parameters that have defined sets of acceptible keywords.

]]

local keywords = {
	['yes_true_y'] = {'yes', 'true', 'y'},										-- ignore-isbn-error, last-author-amp, no-tracking, nopp, registration, subscription
--	['deadurl'] = {'yes', 'true', 'y', 'no', 'unfit', 'usurped', 'unfit no archive', 'usurped no archive'},		-- hidden 2016-04-10; see Help_talk:Citation_Style_1#Recycled_urls
	['deadurl'] = {'yes', 'true', 'y', 'no', 'unfit', 'usurped', 'bot: unknown'},
	['mode'] = {'cs1', 'cs2', 'mla'},
	['name-list-format'] = {'vanc'},
	['contribution'] = {'afterword', 'foreword', 'introduction', 'preface'},	-- generic contribution titles that are rendered unquoted in the 'chapter' position
	['date-format'] = {'dmy', 'dmy-all', 'mdy', 'mdy-all', 'ymd', 'ymd-all'},
	['url-access'] = {'subscription', 'limited', 'registration'}, 	   -- access level of a URL (subscription required, limited access, free registration required), free to read by default
    ['id-access'] = {'free'},                                          -- access level of an identifier (free to read), subscription required (or no full text) by default
}


--[[--------------------------&lt; S T R I P M A R K E R S &gt;------------------------------------------------------

Common pattern definition location for stripmarkers so that we don't have to go hunting for them if (when)
MediaWiki changes their form.

]]

local stripmarkers = {
	['any'] = '\127[^\127]*UNIQ%-%-(%a+)%-[%a%d]+%-QINU[^\127]*\127',			-- capture returns name of stripmarker
	['math'] = '\127[^\127]*UNIQ%-%-math%-[%a%d]+%-QINU[^\127]*\127'			-- math stripmarkers used in coins_cleanup() and coins_replace_math_stripmarker()
	}


--[[--------------------------&lt; I N V I S I B L E _ C H A R A C T E R S &gt;--------------------------------------

This table holds non-printing or invisible characters indexed either by name or by Unicode group. Values are decimal
representations of UTF-8 codes.  The table is organized as a table of tables because the lua pairs keyword returns
table data in an arbitrary order.  Here, we want to process the table from top to bottom because the entries at
the top of the table are also found in the ranges specified by the entries at the bottom of the table.

This list contains patterns for templates like {{'}} which isn't an error but transcludes characters that are
invisible.  These kinds of patterns must be recognized by the functions that use this list.

Also here is a pattern that recognizes stripmarkers that begin and end with the delete characters.  The nowiki
stripmarker is not an error but some others are because the parameter values that include them become part of the
template's metadata before stripmarker replacement.

]]

local invisible_chars = {
	{'replacement', '\239\191\189'},											-- U+FFFD, EF BF BD
	{'zero width joiner', '\226\128\141'},										-- U+200D, E2 80 8D
	{'zero width space', '\226\128\139'},										-- U+200B, E2 80 8B
	{'hair space', '\226\128\138'},												-- U+200A, E2 80 8A
	{'soft hyphen', '\194\173'},												-- U+00AD, C2 AD
	{'horizontal tab', '\009'},													-- U+0009 (HT), 09
	{'line feed', '\010'},														-- U+000A (LF), 0A
	{'carriage return', '\013'},												-- U+000D (CR), 0D
	{'stripmarker', stripmarkers.any},											-- stripmarker; may or may not be an error; capture returns the stripmaker type
	{'delete', '\127'},															-- U+007F (DEL), 7F; must be done after stripmarker test
	{'C0 control', '[\000-\008\011\012\014-\031]'},								-- U+0000–U+001F (NULL–US), 00–1F (except HT, LF, CR (09, 0A, 0D))
	{'C1 control', '[\194\128-\194\159]'},										-- U+0080–U+009F (XXX–APC), C2 80 – C2 9F
--	{'Specials', '[\239\191\185-\239\191\191]'},								-- U+FFF9-U+FFFF, EF BF B9 – EF BF BF
--	{'Private use area', '[\238\128\128-\239\163\191]'},						-- U+E000–U+F8FF, EE 80 80 – EF A3 BF
--	{'Supplementary Private Use Area-A', '[\243\176\128\128-\243\191\191\189]'},	-- U+F0000–U+FFFFD, F3 B0 80 80 – F3 BF BF BD
--	{'Supplementary Private Use Area-B', '[\244\128\128\128-\244\143\191\189]'},	-- U+100000–U+10FFFD, F4 80 80 80 – F4 8F BF BD
	}


-- Indic script makes use of zero width joiner as a character modifier so zwj characters must be left in.  This
-- pattern covers all of the unicode characters for these languages:
--	Devanagari					0900–097F – https://unicode.org/charts/PDF/U0900.pdf
--		Devanagari extended		A8E0–A8FF – https://unicode.org/charts/PDF/UA8E0.pdf
--	Bengali						0980–09FF – https://unicode.org/charts/PDF/U0980.pdf
--	Gurmukhi					0A00–0A7F – https://unicode.org/charts/PDF/U0A00.pdf
--	Gujarati					0A80–0AFF – https://unicode.org/charts/PDF/U0A80.pdf
--	Oriya						0B00–0B7F – https://unicode.org/charts/PDF/U0B00.pdf
--	Tamil						0B80–0BFF – https://unicode.org/charts/PDF/U0B80.pdf
--	Telugu						0C00–0C7F – https://unicode.org/charts/PDF/U0C00.pdf
--	Kannada						0C80–0CFF – https://unicode.org/charts/PDF/U0C80.pdf
--	Malayalam					0D00–0D7F – https://unicode.org/charts/PDF/U0D00.pdf
-- plus the not-necessarily Indic scripts for Sinhala and Burmese:
--  Sinhala						0D80-0DFF - https://unicode.org/charts/PDF/U0D80.pdf
--	Myanmar						1000-109F - https://unicode.org/charts/PDF/U1000.pdf
--		Myanmar extended A		AA60-AA7F - https://unicode.org/charts/PDF/UAA60.pdf
--		Myanmar extended B		A9E0-A9FF - https://unicode.org/charts/PDF/UA9E0.pdf
-- the pattern is used by has_invisible_chars() and coins_cleanup()
-- TODO: find a better place for this?

local indic_script = '[\224\164\128-\224\181\191\224\163\160-\224\183\191\225\128\128-\225\130\159\234\167\160-\234\167\191\234\169\160-\234\169\191]';


--[[--------------------------&lt; L A N G U A G E S &gt;------------------------------------------------------------

This table is used to hold ISO 639-1 two-character language codes that apply only to |script-title= and |script-chapter=

]]

local script_lang_codes = {
	'am', 'ar', 'be', 'bg', 'bn', 'bs', 'dv', 'el', 'fa',						-- ISO 639-1 codes only for |script-title= and |script-chapter=
	'gu', 'he', 'hy', 'ja', 'ka', 'kn', 'ko', 'ku',
	'mk', 'ml', 'mn', 'mr', 'my', 'ps', 'ru', 'sd',
	'sr', 'tg', 'th', 'uk', 'ug', 'ur', 'yi', 'zh'
	};


--[[--------------------------&lt; L A N G U A G E   R E M A P P I N G &gt;------------------------------------------

These tables hold language information that is different (correct) from MediaWiki's definitions

]]

	local lang_code_remap = {													-- used for |language= and |script-title= / |script-chapter=
		['bh'] = 'Bihari',														-- MediaWiki uses 'bh' as a subdomain name for Bhojpuri wWikipedia: bh.wikipedia.org
		['bn'] = 'Bengali',														-- MediaWiki returns Bangla
		['cnr'] = 'Montenegrin',												-- 'new' 639 code that MediaWiki does not yet understand
	}

	local lang_name_remap = {													-- used for |language=
		['bangla'] = {'Bengali', 'bn'},											-- MediaWiki returns Bangla (the endonym) but we want Bengali (the exonym); here we remap
		['bengali'] = {'Bengali', 'bn'},										-- MediaWiki doesn't use exonym so here we provide correct language name and 639-1 code
		['bihari'] = {'Bihari', 'bh'},											-- MediaWiki replaces 'Bihari' with 'Bhojpuri' so 'Bihari' cannot be found
		['bhojpuri'] = {'Bhojpuri', 'bho'},										-- MediaWiki uses 'bh' as a subdomain name for Bhojpuri wWikipedia: bh.wikipedia.org
		['montenegrin'] = {'Montenegrin', 'cnr'},								-- 'new' 639 code that MediaWiki does not yet understand
	}

--[[--------------------------&lt; M A I N T E N A N C E _ C A T E G O R I E S &gt;----------------------------------

Here we name maintenance categories to be used in maintenance messages.

]]

local maint_cats = {
	['ASIN'] = 'CS1 maint: ASIN uses ISBN',
	['authors'] = 'CS1 maint: Uses authors parameter',
	['bot:_unknown'] = 'CS1 maint: BOT: original-url status unknown',
	['date_format'] = 'CS1 maint: Date format',
	['date_year'] = 'CS1 maint: Date and year',
	['disp_auth_ed'] = 'CS1 maint: display-$1',									-- $1 is authors or editors; gets value from special_case_translation table
	['editors'] = 'CS1 maint: Uses editors parameter',
	['embargo'] = 'CS1 maint: PMC embargo expired',
	['english'] = 'CS1 maint: English language specified',
	['etal'] = 'CS1 maint: Explicit use of et al.',
	['extra_text'] = 'CS1 maint: Extra text',
	['extra_text_names'] = 'CS1 maint: Extra text: $1',							-- $1 is &lt;name&gt;s list; gets value from special_case_translation table
	['ignore_isbn_err'] = 'CS1 maint: Ignored ISBN errors',
	['interviewers'] = 'CS1 maint: Uses interviewers parameter',
	['missing_pipe'] = 'CS1 maint: Missing pipe',
	['mult_names'] = 'CS1 maint: Multiple names: $1',							-- $1 is &lt;name&gt;s list; gets value from special_case_translation table
	['pmc_format'] = 'CS1 maint: PMC format',
	['unfit'] = 'CS1 maint: Unfit url',
	['unknown_lang'] = 'CS1 maint: Unrecognized language',
	['untitled'] = 'CS1 maint: Untitled periodical',
	}


--[[--------------------------&lt; P R O P E R T I E S _ C A T E G O R I E S &gt;------------------------------------

Here we name properties categories

]]

local prop_cats = {
	['foreign_lang_source'] = 'CS1 $1-language sources ($2)',					-- |language= categories; $1 is language name, $2 is ISO639-1 code
	['foreign_lang_source_2'] = 'CS1 foreign language sources (ISO 639-2)|$1',	-- |language= category; a cat for ISO639-2 languages; $1 is the ISO 639-2 code
	['script'] = 'CS1 uses foreign language script',							-- when language specified by |script-title=xx: doesn't have its own category
	['script_with_name'] = 'CS1 uses $1-language script ($2)',					-- |script-title=xx: has matching category; $1 is language name, $2 is ISO639-1 code
	['jul_greg_uncertainty'] = 'CS1: Julian–Gregorian uncertainty',				-- probably temporary cat to identify scope of template with dates 1 October 1582 – 1 January 1926
	}


--[[--------------------------&lt; T I T L E _ T Y P E S &gt;--------------------------------------------------------

Here we map a template's CitationClass to TitleType (default values for |type= parameter)

]]

local title_types = {
	['AV-media-notes'] = 'Media notes',
	['interview'] = 'Interview',
	['mailinglist'] = 'Mailing list',
	['map'] = 'Map',
	['podcast'] = 'Podcast',
	['pressrelease'] = 'Press release',
	['report'] = 'Report',
	['techreport'] = 'Technical report',
	['thesis'] = 'Thesis',
	}


--[[--------------------------&lt; E R R O R _ C O N D I T I O N S &gt;----------------------------------------------

Error condition table

The following contains a list of IDs for various error conditions defined in the code.  For each ID, we specify a
text message to display, an error category to include, and whether the error message should be wrapped as a hidden comment.

Anchor changes require identical changes to matching anchor in Help:CS1 errors

]]

local error_conditions = {
	accessdate_missing_url = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;access-date=&lt;/code&gt; requires &lt;code style="'..code_style..'"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'accessdate_missing_url',
		category = 'Pages using citations with accessdate and no URL',
		hidden = true },
	archive_missing_date = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;archive-url=&lt;/code&gt; requires &lt;code style="'..code_style..'"&gt;&amp;#124;archive-date=&lt;/code&gt;',
		anchor = 'archive_missing_date',
		category = 'Pages with archiveurl citation errors',
		hidden = false },
	archive_missing_url = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;archive-url=&lt;/code&gt; requires &lt;code style="'..code_style..'"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'archive_missing_url',
		category = 'Pages with archiveurl citation errors',
		hidden = false },
	archive_url = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;archive-url=&lt;/code&gt; is malformed: $1',
		anchor = 'archive_url',
		category = 'Pages with archiveurl citation errors',
		hidden = false },
	arxiv_missing = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;arxiv=&lt;/code&gt; required',
		anchor = 'arxiv_missing',
		category = 'CS1 errors: arXiv',											-- same as bad arxiv
		hidden = false },
	arxiv_params_not_supported = {
		message = 'Unsupported parameter(s) in cite arXiv',
		anchor = 'arxiv_params_not_supported',
		category = 'CS1 errors: arXiv',											-- same as bad arxiv
		hidden = false },
	bad_arxiv = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;arxiv=&lt;/code&gt; value',
		anchor = 'bad_arxiv',
		category = 'CS1 errors: arXiv',
		hidden = false },
	bad_asin = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;asin=&lt;/code&gt; value',
		anchor = 'bad_asin',
		category ='CS1 errors: ASIN',
		hidden = false },
	bad_bibcode = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;bibcode=&lt;/code&gt; $1',
		anchor = 'bad_bibcode',
		category = 'CS1 errors: bibcode',
		hidden = false },
	bad_biorxiv = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;biorxiv=&lt;/code&gt; value',
		anchor = 'bad_biorxiv',
		category = 'CS1 errors: bioRxiv',
		hidden = false },
	bad_citeseerx = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;citeseerx=&lt;/code&gt; value',
		anchor = 'bad_citeseerx',
		category = 'CS1 errors: citeseerx',
		hidden = false },
	bad_date = {
		message = 'Check date values in: &lt;code style="'..code_style..'"&gt;$1&lt;/code&gt;',
		anchor = 'bad_date',
		category = 'CS1 errors: dates',
		hidden = false },
	bad_doi = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;doi=&lt;/code&gt; value',
		anchor = 'bad_doi',
		category = 'CS1 errors: DOI',
		hidden = false },
	bad_hdl = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;hdl=&lt;/code&gt; value',
		anchor = 'bad_hdl',
		category = 'CS1 errors: HDL',
		hidden = false },
	bad_isbn = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;isbn=&lt;/code&gt; value: $1',
		anchor = 'bad_isbn',
		category = 'CS1 errors: ISBN',
		hidden = false },
	bad_ismn = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;ismn=&lt;/code&gt; value',
		anchor = 'bad_ismn',
		category = 'CS1 errors: ISMN',
		hidden = false },
	bad_issn = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;$1issn=&lt;/code&gt; value',
		anchor = 'bad_issn',
		category = 'CS1 errors: ISSN',
		hidden = false },
	bad_jfm = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;jfm=&lt;/code&gt; value',
		anchor = 'bad_jfm',
		category = 'CS1 errors: JFM',
		hidden = false },
	bad_lccn = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;lccn=&lt;/code&gt; value',
		anchor = 'bad_lccn',
		category = 'CS1 errors: LCCN',
		hidden = false },
	bad_usenet_id = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;message-id=&lt;/code&gt; value',
		anchor = 'bad_message_id',
		category = 'CS1 errors: message-id',
		hidden = false },
	bad_mr = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;mr=&lt;/code&gt; value',
		anchor = 'bad_mr',
		category = 'CS1 errors: MR',
		hidden = false },
	bad_ol = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;ol=&lt;/code&gt; value',
		anchor = 'bad_ol',
		category = 'CS1 errors: OL',
		hidden = false },
	bad_paramlink = {															-- for |title-link=, |author/editor/translator-link=, |series-link=, |episode-link=
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;$1=&lt;/code&gt; value',
		anchor = 'bad_paramlink',
		category = 'CS1 errors: parameter link',
		hidden = false },
	bad_pmc = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;pmc=&lt;/code&gt; value',
		anchor = 'bad_pmc',
		category = 'CS1 errors: PMC',
		hidden = false },
	bad_pmid = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;pmid=&lt;/code&gt; value',
		anchor = 'bad_pmid',
		category = 'CS1 errors: PMID',
		hidden = false },
	bad_oclc = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;oclc=&lt;/code&gt; value',
		anchor = 'bad_oclc',
		category = 'CS1 errors: OCLC',
		hidden = false },
	bad_ssrn = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;ssrn=&lt;/code&gt; value',
		anchor = 'bad_ssrn',
		category = 'CS1 errors: SSRN',
		hidden = false },
	bad_url = {
		message = 'Check $1 value',
		anchor = 'bad_url',
		category = 'Pages with URL errors',
		hidden = false },
	bad_zbl = {
		message = 'Check &lt;code style="'..code_style..'"&gt;&amp;#124;zbl=&lt;/code&gt; value',
		anchor = 'bad_zbl',
		category = 'CS1 errors: ZBL',
		hidden = false },
	bare_url_missing_title = {
		message = '$1 missing title',
		anchor = 'bare_url_missing_title',
		category = 'Pages with citations having bare URLs',
		hidden = false },
	biorxiv_missing = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;biorxiv=&lt;/code&gt; required',
		anchor = 'biorxiv_missing',
		category = 'CS1 errors: bioRxiv',										-- same as bad bioRxiv
		hidden = false },
	chapter_ignored = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;$1=&lt;/code&gt; ignored',
		anchor = 'chapter_ignored',
		category = 'CS1 errors: chapter ignored',
		hidden = false },
	citation_missing_title = {
		message = 'Missing or empty &lt;code style="'..code_style..'"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'citation_missing_title',
		category = 'Pages with citations lacking titles',
		hidden = false },
	citeseerx_missing = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;citeseerx=&lt;/code&gt; required',
		anchor = 'citeseerx_missing',
		category = 'CS1 errors: citeseerx',										-- same as bad citeseerx
		hidden = false },
	cite_web_url = {															-- this error applies to cite web and to cite podcast
		message = 'Missing or empty &lt;code style="'..code_style..'"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'cite_web_url',
		category = 'Pages using web citations with no URL',
		hidden = true },
	contributor_ignored = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;contributor=&lt;/code&gt; ignored',
		anchor = 'contributor_ignored',
		category = 'CS1 errors: contributor',
		hidden = false },
	contributor_missing_required_param = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;contributor=&lt;/code&gt; requires &lt;code style="'..code_style..'"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'contributor_missing_required_param',
		category = 'CS1 errors: contributor',
		hidden = false },
	deprecated_params = {
		message = 'Cite uses deprecated parameter &lt;code style="'..code_style..'"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'deprecated_params',
		category = 'CS1 errors: deprecated parameters',
		hidden = false },
	empty_citation = {
		message = 'Empty citation',
		anchor = 'empty_citation',
		category = 'Pages with empty citations',
		hidden = false },
	first_missing_last = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;first$2=&lt;/code&gt; missing &lt;code style="'..code_style..'"&gt;&amp;#124;last$2=&lt;/code&gt; in $1',
		anchor = 'first_missing_last',
		category = 'CS1 errors: missing author or editor',
		hidden = false },
	format_missing_url = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;$1=&lt;/code&gt; requires &lt;code style="'..code_style..'"&gt;&amp;#124;$2=&lt;/code&gt;',
		anchor = 'format_missing_url',
		category = 'Pages using citations with format and no URL',
		hidden = true },
	invalid_param_val = {
		message = 'Invalid &lt;code style="'..code_style..'"&gt;&amp;#124;$1=$2&lt;/code&gt;',
		anchor = 'invalid_param_val',
		category = 'CS1 errors: invalid parameter value',
		hidden = false },
	invisible_char = {
		message = '$1 in $2 at position $3',
		anchor = 'invisible_char',
		category = 'CS1 errors: invisible characters',
		hidden = false },
	missing_name = {
		message = 'Missing &lt;code style="'..code_style..'"&gt;&amp;#124;last$2=&lt;/code&gt; in $1',
		anchor = 'missing_name',
		category = 'CS1 errors: missing author or editor',
		hidden = false },
	param_access_requires_param = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;$1-access=&lt;/code&gt; requires &lt;code style="'..code_style..'"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'param_access_requires_param',
		category = 'CS1 errors: param-access',
		hidden = false },
	param_has_ext_link = {
		message = 'External link in &lt;code style="'..code_style..'"&gt;$1&lt;/code&gt;',
		anchor = 'param_has_ext_link',
		category = 'CS1 errors: external links',
		hidden = false },
	parameter_ignored = {
		message = 'Unknown parameter &lt;code style="'..code_style..'"&gt;&amp;#124;$1=&lt;/code&gt; ignored',
		anchor = 'parameter_ignored',
		category = 'Pages with citations using unsupported parameters',
		hidden = false },
	parameter_ignored_suggest = {
		message = 'Unknown parameter &lt;code style="'..code_style..'"&gt;&amp;#124;$1=&lt;/code&gt; ignored (&lt;code style="'..code_style..'"&gt;&amp;#124;$2=&lt;/code&gt; suggested)',
		anchor = 'parameter_ignored_suggest',
		category = 'Pages with citations using unsupported parameters',
		hidden = false },
	redundant_parameters = {
		message = 'More than one of $1 specified',
		anchor = 'redundant_parameters',
		category = 'Pages with citations having redundant parameters',
		hidden = false },
	text_ignored = {
		message = 'Text "$1" ignored',
		anchor = 'text_ignored',
		category = 'Pages with citations using unnamed parameters',
		hidden = false },
	trans_missing_title = {
		message = '&lt;code style="'..code_style..'"&gt;&amp;#124;trans-$1=&lt;/code&gt; requires &lt;code style="'..code_style..'"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'trans_missing_title',
		category = 'CS1 errors: translated title',
		hidden = false },
	vancouver = {
		message = 'Vancouver style error: $1',
		anchor = 'vancouver',
		category = 'CS1 errors: Vancouver style',
		hidden = false },
	wikilink_in_url = {
		message = 'URL–wikilink conflict',										-- uses ndash
		anchor = 'wikilink_in_url',
		category = 'CS1 errors: URL–wikilink conflict',							-- uses ndash
		hidden = false },
	}


--[[--------------------------&lt; I D _ H A N D L E R S &gt;--------------------------------------------------------

The following contains a list of values for various defined identifiers.  For each identifier we specify a
variety of information necessary to properly render the identifier in the citation.

	parameters: a list of parameter aliases for this identifier
	link: Wikipedia article name
	q: wikidata q number for the identifier
	label: the alternate name to apply to link
	mode: 	'manual' when there is a specific function in the code to handle the identifier;
			'external' for identifiers that link outside of Wikipedia;
	prefix: the first part of a url that will be concatenated with a second part which usually contains the identifier
	encode: true if uri should be percent encoded; otherwise false
	COinS: identifier link or keyword for use in COinS:
		for identifiers registered at info-uri.info use: info:....
		for identifiers that have COinS keywords, use the keyword: rft.isbn, rft.issn, rft.eissn
		for others make a url using the value in prefix, use the keyword: pre (not checked; any text other than 'info' or 'rft' works here)
		set to nil to leave the identifier out of the COinS
	separator: character or text between label and the identifier in the rendered citation
	access: use this parameter to set the access level for all instances of this identifier.
			the value must be a valid access level for an identifier (see ['id-access'] in this file).
	custom_access: to enable custom access level for an identifier, set this parameter
			to the parameter that should control it (normally 'id-access')
]]

local id_handlers = {
	['ARXIV'] = {
		parameters = {'arxiv', 'eprint'},
		link = 'arXiv',
		q = 'Q118398',
		label = 'arXiv',
		mode = 'manual',
		prefix = '//arxiv.org/abs/', 											-- protocol relative tested 2013-09-04
		encode = false,
		COinS = 'info:arxiv',
		separator = ':',
		access = 'free',														-- free to read
	},
	['ASIN'] = {
		parameters = { 'asin', 'ASIN' },
		link = 'Amazon Standard Identification Number',
		q = 'Q1753278',
		label = 'ASIN',
		mode = 'manual',
		prefix = '//www.amazon.',
		COinS = nil,															-- no COinS for this id (needs thinking on implementation because |asin-tld=)
		separator = '&amp;nbsp;',
		encode = false;
	},
	['BIBCODE'] = {
		parameters = {'bibcode'},
		link = 'Bibcode',
		q = 'Q25754',
		label = 'Bibcode',
		mode = 'manual',
		prefix = 'http://adsabs.harvard.edu/abs/',
		encode = false,
		COinS = 'info:bibcode',
		separator = ':',
		custom_access = 'bibcode-access',
	},
	['BIORXIV'] = {
		parameters = {'biorxiv'},
		link = 'bioRxiv',
		q = 'Q19835482',
		label = 'bioRxiv',
		mode = 'manual',
		prefix = '//doi.org/10.1101/',
		COinS = 'pre',															-- use prefix value
		access = 'free',														-- free to read
		encode = true,
		separator = '&amp;nbsp;',
	},
	['CITESEERX'] = {
		parameters = {'citeseerx'},
		link = 'CiteSeerX',
		q = 'Q2715061',
		label = 'CiteSeerX',
		mode = 'manual',														-- manual for custom validation of the "doi"
		prefix = '//citeseerx.ist.psu.edu/viewdoc/summary?doi=',
		COinS =  'pre',															-- use prefix value
		access = 'free',														-- free to read
		encode = true,
		separator = '&amp;nbsp;',
	},
	['DOI'] = {
		parameters = { 'doi', 'DOI' },
		link = 'Digital object identifier',
		q = 'Q25670',
		label = 'doi',
		mode = 'manual',
		prefix = '//doi.org/',
		COinS = 'info:doi',
		separator = ':',
		encode = true,
		custom_access = 'doi-access',
	},
	['EISSN'] = {
		parameters = {'eissn', 'EISSN'},
		link = 'International_Standard_Serial_Number#Electronic_ISSN',
		q = 'Q46339674',
		label = 'eISSN',
		mode = 'manual',
		prefix = '//www.worldcat.org/issn/',
		COinS = 'rft.eissn',
		encode = false,
		separator = '&amp;nbsp;',
	},
	['HDL'] = {
		parameters = { 'hdl', 'HDL' },
		link = 'Handle System',
		q = 'Q3126718',
		label = 'hdl',
		mode = 'manual',
		prefix = '//hdl.handle.net/',
		COinS = 'info:hdl',
		separator = ':',
		encode = true,
		custom_access = 'hdl-access',
	},
	['ISBN'] = {
		parameters = {'isbn', 'ISBN', 'isbn13', 'ISBN13'},
		link = 'International Standard Book Number',
		q = 'Q33057',
		label = 'ISBN',
		mode = 'manual',
		prefix = 'Special:BookSources/',
		COinS = 'rft.isbn',
		separator = '&amp;nbsp;',
	},
	['ISMN'] = {
		parameters = {'ismn', 'ISMN'},
		link = 'International Standard Music Number',
		q = 'Q1666938',
		label = 'ISMN',
		mode = 'manual',
		prefix = '',															-- not currently used;
		COinS = 'nil',															-- nil because we can't use pre or rft or info:
		separator = '&amp;nbsp;',
	},
	['ISSN'] = {
		parameters = {'issn', 'ISSN'},
		link = 'International Standard Serial Number',
		q = 'Q131276',
		label = 'ISSN',
		mode = 'manual',
		prefix = '//www.worldcat.org/issn/',
		COinS = 'rft.issn',
		encode = false,
		separator = '&amp;nbsp;',
	},
	['JFM'] = {
		parameters = {'jfm', 'JFM'},
		link = 'Jahrbuch über die Fortschritte der Mathematik',
		q = '',
		label = 'JFM',
		mode = 'manual',
		prefix = '//zbmath.org/?format=complete&amp;q=an:',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
	},
	['JSTOR'] = {
		parameters = {'jstor', 'JSTOR'},
		link = 'JSTOR',
		q = 'Q1420342',
		label = 'JSTOR',
		mode = 'external',
		prefix = '//www.jstor.org/stable/', 									-- protocol relative tested 2013-09-04
		COinS = 'pre',															-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
		custom_access = 'jstor-access',
	},
	['LCCN'] = {
		parameters = {'LCCN', 'lccn'},
		link = 'Library of Congress Control Number',
		q = 'Q620946',
		label = 'LCCN',
		mode = 'manual',
		prefix = '//lccn.loc.gov/', 											-- protocol relative tested 2015-12-28
		COinS = 'info:lccn',													-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
	},
	['MR'] = {
		parameters = {'MR', 'mr'},
		link = 'Mathematical Reviews',
		q = 'Q211172',
		label = 'MR',
		mode = 'manual',
		prefix = '//www.ams.org/mathscinet-getitem?mr=', 						-- protocol relative tested 2013-09-04
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
	},
	['OCLC'] = {
		parameters = {'OCLC', 'oclc'},
		link = 'OCLC',
		q = 'Q190593',
		label = 'OCLC',
		mode = 'manual',
		prefix = '//www.worldcat.org/oclc/',
		COinS = 'info:oclcnum',
		encode = true,
		separator = '&amp;nbsp;',
	},
	['OL'] = {
		parameters = { 'ol', 'OL' },
		link = 'Open Library',
		q = 'Q1201876',
		label = 'OL',
		mode = 'manual',
		prefix = '//openlibrary.org/',
		COinS = nil,															-- no COinS for this id (needs thinking on implementation because /authors/books/works/OL)
		separator = '&amp;nbsp;',
		encode = true,
		custom_access = 'ol-access',
	},
	['OSTI'] = {
		parameters = {'OSTI', 'osti'},
		link = 'Office of Scientific and Technical Information',
		q = 'Q2015776',
		label = 'OSTI',
		mode = 'external',
		prefix = '//www.osti.gov/energycitations/product.biblio.jsp?osti_id=',	-- protocol relative tested 2013-09-04
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		custom_access = 'osti-access',
	},
	['PMC'] = {
		parameters = {'PMC', 'pmc'},
		link = 'PubMed Central',
		q = 'Q229883',
		label = 'PMC',
		mode = 'manual',
		prefix = '//www.ncbi.nlm.nih.gov/pmc/articles/PMC',
		suffix = " ",
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		access = 'free',														-- free to read
	},
	['PMID'] = {
		parameters = {'PMID', 'pmid'},
		link = 'PubMed Identifier',
		q = '',
		label = 'PMID',
		mode = 'manual',
		prefix = '//www.ncbi.nlm.nih.gov/pubmed/',
		COinS = 'info:pmid',
		encode = false,
		separator = '&amp;nbsp;',
	},
	['RFC'] = {
		parameters = {'RFC', 'rfc'},
		link = 'Request for Comments',
		q = 'Q212971',
		label = 'RFC',
		mode = 'external',
		prefix = '//tools.ietf.org/html/rfc',
		COinS = 'pre',															-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
		access = 'free',														-- free to read
	},
	['SSRN'] = {
		parameters = {'SSRN', 'ssrn'},
		link = 'Social Science Research Network',
		q = 'Q7550801',
		label = 'SSRN',
		mode = 'manual',
		prefix = '//ssrn.com/abstract=', 										-- protocol relative tested 2013-09-04
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		access = 'free',														-- always free to read
	},
	['USENETID'] = {
		parameters = {'message-id'},
		link = 'Usenet',
		q = 'Q193162',
		label = 'Usenet:',
		mode = 'manual',
		prefix = 'news:',
		encode = false,
		COinS = 'pre',															-- use prefix value
		separator = '&amp;nbsp;',
	},
	['ZBL'] = {
		parameters = {'ZBL', 'zbl'},
		link = 'Zentralblatt MATH',
		q = 'Q190269',
		label = 'Zbl',
		mode = 'manual',
		prefix = '//zbmath.org/?format=complete&amp;q=an:',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
	},
	}


return 	{
	aliases = aliases,
	special_case_translation = special_case_translation,
	defaults = defaults,
	date_names = date_names,
	error_conditions = error_conditions,
	id_handlers = id_handlers,
	keywords = keywords,
	stripmarkers=stripmarkers,
	invisible_chars = invisible_chars,
	indic_script = indic_script,
	maint_cats = maint_cats,
	messages = messages,
	presentation = presentation,
	prop_cats = prop_cats,
	script_lang_codes = script_lang_codes,
	lang_code_remap = lang_code_remap,
	lang_name_remap = lang_name_remap,
	title_types = title_types,
	uncategorized_namespaces = uncategorized_namespaces,
	uncategorized_subpages = uncategorized_subpages,
	templates_using_volume = templates_using_volume,
	templates_using_issue = templates_using_issue,
	templates_not_using_page = templates_not_using_page,
	}</text>
      <sha1>b4b6v6g7zb0mswiij14g838ylh8ae60</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Date validation</title>
    <ns>828</ns>
    <id>42164542</id>
    <revision>
      <id>845306994</id>
      <parentid>845164985</parentid>
      <timestamp>2018-06-10T22:34:32Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>synch from sandbox;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="45179">
local p = {}


--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local is_set, in_array;															-- imported functions from selected Module:Citation/CS1/Utilities
local cfg;																		-- table of tables imported from slected Module:Citation/CS1/Configuration

--[=[-------------------------&lt; I S _ V A L I D _ A C C E S S D A T E &gt;----------------------------------------

returns true if:
	Wikipedia start date &lt;= accessdate &lt; today + 2 days

Wikipedia start date is 2001-01-15T00:00:00 UTC which is 979516800 seconds after 1970-01-01T00:00:00 UTC (the start of Unix time)
accessdate is the date provided in |accessdate= at time 00:00:00 UTC
today is the current date at time 00:00:00 UTC plus 48 hours
	if today is 2015-01-01T00:00:00 then
		adding 24 hours gives 2015-01-02T00:00:00 – one second more than today
		adding 24 hours gives 2015-01-03T00:00:00 – one second more than tomorrow

This function does not work if it is fed month names for languages other than English.  Wikimedia #time: parser
apparently doesn't understand non-Engish date month names. This function will always return false when the date
contains a non-English month name because good1 is false after the call to lang.formatDate().  To get around that
call this function with YYYY-MM-DD format dates.

]=]

local function is_valid_accessdate (accessdate)
	local lang = mw.getContentLanguage();
	local good1, good2;
	local access_ts, tomorrow_ts;												-- to hold unix time stamps representing the dates
		
	good1, access_ts = pcall( lang.formatDate, lang, 'U', accessdate );			-- convert accessdate value to unix timesatmp 
	good2, tomorrow_ts = pcall( lang.formatDate, lang, 'U', 'today + 2 days' );	-- today midnight + 2 days is one second more than all day tomorrow
	
	if good1 and good2 then														-- lang.formatDate() returns a timestamp in the local script which which tonumber() may not understand
		access_ts = tonumber (access_ts) or lang:parseFormattedNumber (access_ts);			-- convert to numbers for the comparison;
		tomorrow_ts = tonumber (tomorrow_ts) or lang:parseFormattedNumber (tomorrow_ts);
	else
		return false;															-- one or both failed to convert to unix time stamp
	end

	if 979516800 &lt;= access_ts and access_ts &lt; tomorrow_ts then					-- Wikipedia start date &lt;= accessdate &lt; tomorrow's date
		return true;
	else
		return false;															-- accessdate out of range
	end
end


--[[--------------------------&lt; G E T _ M O N T H _ N U M B E R &gt;----------------------------------------------

returns a number according to the month in a date: 1 for January, etc.  Capitalization and spelling must be correct. If not a valid month, returns 0

]]

local function get_month_number (month)
	return cfg.date_names['local'].long[month] or cfg.date_names['local'].short[month] or		-- look for local names first
			cfg.date_names['en'].long[month] or	cfg.date_names['en'].short[month] or			-- failing that, look for English names
			0;																					-- not a recognized month name
end


--[[--------------------------&lt; I S _ V A L I D _ E M B A R G O _ D A T E &gt;------------------------------------

returns true and date value if that value has proper dmy, mdy, ymd format.

returns false and 9999 (embargoed forever) when date value is not proper format; assumes that when |embargo= is
set, the editor intended to embargo a pmc but |embargo= does not hold a single date.

]]

local function is_valid_embargo_date (v)
	if v:match ('^%d%d%d%d%-%d%d%-%d%d$') or									-- ymd
		v:match ('^%d%d?%s+%a+%s+%d%d%d%d$') or									-- dmy
		v:match ('^%a+%s+%d%d?%s*,%s*%d%d%d%d$') then							-- mdy
			return true, v;
	end
	return false, '9999';														-- if here not good date so return false and set embargo date to long time in future
end


--[[--------------------------&lt; G E T _ S E A S O N _ N U M B E R &gt;--------------------------------------------

returns a number according to the sequence of seasons in a year: 1 for Winter, etc.  Capitalization and spelling must be correct. If not a valid season, returns 0

Uses ISO DIS 8601 2016 part 2 §4.7  Divisions of a year for hemishpere-independent seasons:
	21-24 = Spring, Summer, Autumn, Winter, independent of “Hemisphere”

These additional divisions not currently supported:
	25-28 = Spring - Northern Hemisphere, Summer- Northern Hemisphere, Autumn - Northern Hemisphere, Winter - Northern Hemisphere
	29-32 = Spring – Southern Hemisphere, Summer– Southern Hemisphere, Autumn – Southern Hemisphere, Winter - Southern Hemisphere
	33-36 = Quarter 1, Quarter 2, Quarter 3, Quarter 4 (3 months each)
	37-39 = Quadrimester 1, Quadrimester 2, Quadrimester 3 (4 months each)
	40-41 = Semestral 1, Semestral-2 (6 months each)


]]

local function get_season_number (season)
	return cfg.date_names['local'].season[season] or							-- look for local names first
			cfg.date_names['en'].season[season] or								-- failing that, look for English names
			0;																	-- not a recognized season name
end

--[[--------------------------&lt; I S _ P R O P E R _ N A M E &gt;--------------------------------------------------

returns a non-zero number if date contains a recognized proper name.  Capitalization and spelling must be correct.

]]

local function is_proper_name (name)
	return cfg.date_names['local'].named[name] or								-- look for local names dates first
			cfg.date_names['en'].named[name] or									-- failing that, look for English names
			0;																	-- not a recognized named date
end

--[[--------------------------&lt; I S _ V A L I D _ M O N T H _ O R _ S E A S O N &gt;------------------------------

--returns true if month or season is valid (properly spelled, capitalized, abbreviated)

]]

local function is_valid_month_or_season (month_season)
	if 0 == get_month_number (month_season) then		-- if month text isn't one of the twelve months, might be a season
		if 0 == get_season_number (month_season) then	-- not a month, is it a season?
			return false;								-- return false not a month or one of the five seasons
		end
	end
	return true;
end

--[[--------------------------&lt; I S _ V A L I D _ Y E A R &gt;----------------------------------------------------

Function gets current year from the server and compares it to year from a citation parameter.  Years more than one year in the future are not acceptable.

]]
local year_limit;
local function is_valid_year(year)
	if not is_set(year_limit) then
		year_limit = tonumber(os.date("%Y"))+1;			-- global variable so we only have to fetch it once
	end
	return tonumber(year) &lt;= year_limit;				-- false if year is in the future more than one year
end

--[[--------------------------&lt; I S _ V A L I D _ D A T E &gt;----------------------------------------------------
Returns true if day is less than or equal to the number of days in month and year is no farther into the future
than next year; else returns false.

Assumes Julian calendar prior to year 1582 and Gregorian calendar thereafter. Accounts for Julian calendar leap
years before 1582 and Gregorian leap years after 1582. Where the two calendars overlap (1582 to approximately
1923) dates are assumed to be Gregorian.

]]

local function is_valid_date (year, month, day)
local days_in_month = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
local month_length;
	if not is_valid_year(year) then												-- no farther into the future than next year
		return false;
	end
	
	month = tonumber(month);													-- required for YYYY-MM-DD dates
	
	if (2==month) then															-- if February
		month_length = 28;														-- then 28 days unless
		if 1582 &gt; tonumber(year) then											-- Julian calendar
			if 0==(year%4) then
				month_length = 29;
			end
		else																	-- Gregorian calendar
			if (0==(year%4) and (0~=(year%100) or 0==(year%400))) then			-- is a leap year?
				month_length = 29;												-- if leap year then 29 days in February
			end
		end
	else
		month_length=days_in_month[month];
	end

	if tonumber (day) &gt; month_length then
		return false;
	end
	return true;
end

--[[--------------------------&lt; I S _ V A L I D _ M O N T H _ R A N G E _ S T Y L E &gt;--------------------------

Months in a range are expected to have the same style: Jan–Mar or October–December but not February–Mar or Jul–August. 
There is a special test for May because it can be either short or long form.

Returns true when style for both months is the same

]]

local function is_valid_month_range_style (month1, month2)
local len1 = month1:len();
local len2 = month2:len();
	if len1 == len2 then
		return true;															-- both months are short form so return true
	elseif 'May' == month1 or 'May'== month2 then
		return true;															-- both months are long form so return true
	elseif 3 == len1 or 3 == len2 then
		return false;															-- months are mixed form so return false
	else
		return true;															-- both months are long form so return true
	end
end


--[[--------------------------&lt; I S _ V A L I D _ M O N T H _ S E A S O N _ R A N G E &gt;------------------------

Check a pair of months or seasons to see if both are valid members of a month or season pair.

Month pairs are expected to be left to right, earliest to latest in time.

All season ranges are accepted as valid because there are publishers out there who have published a Summer–Spring YYYY issue so ... ok

]]

local function is_valid_month_season_range(range_start, range_end)
	local range_start_number = get_month_number (range_start);
	local range_end_number;
	
	if 0 == range_start_number then												-- is this a month range?
		range_start_number = get_season_number (range_start);					-- not a month; is it a season? get start season number
		range_end_number = get_season_number (range_end);						-- get end season number

		if (0 ~= range_start_number) and (0 ~= range_end_number) then
			return true;														-- any season pairing is accepted
		end
		return false;															-- range_start and/or range_end is not a season
	end
																				-- here when range_start is a month
	range_end_number = get_month_number (range_end);							-- get end month number
	if range_start_number &lt; range_end_number then								-- range_start is a month; does range_start precede range_end?
		if is_valid_month_range_style (range_start, range_end) then				-- do months have the same style?
			return true;														-- proper order and same style
		end
	end
	return false;																-- range_start month number is greater than or equal to range end number; or range end isn't a month
end


--[[--------------------------&lt; M A K E _ C O I N S _ D A T E &gt;------------------------------------------------

This function receives a table of date parts for one or two dates and an empty table reference declared in
Module:Citation/CS1.  The function is called only for |date= parameters and only if the |date=&lt;value&gt; is 
determined to be a valid date format.  The question of what to do with invalid date formats is not answered here.

The date parts in the input table are converted to an ISO 8601 conforming date string:
	single whole dates:		yyyy-mm-dd
	month and year dates:	yyyy-mm
	year dates:				yyyy
	ranges:					yyyy-mm-dd/yyyy-mm-dd
							yyyy-mm/yyyy-mm
							yyyy/yyyy

Dates in the Julian calendar are reduced to year or year/year so that we don't have to do calendar conversion from
Julian to Proleptic Gregorian.

The input table has:
	year, year2 – always present; if before 1582, ignore months and days if present
	month, month2 – 0 if not provided, 1-12 for months, 21-24 for seasons; 99 Christmas
	day, day2 –  0 if not provided, 1-31 for days
	
the output table receives:
	rftdate:	an IS8601 formatted date
	rftchron:	a free-form version of the date, usually without year which is in rftdate (season ranges and propername dates)
	rftssn:		one of four season keywords: winter, spring, summer, fall (lowercase)

]]

local function make_COinS_date (input, tCOinS_date)
	local date;																	-- one date or first date in a range
	local date2 = '';															-- end of range date
-- start temporary Julian / Gregorian calendar uncertainty detection
	local year = tonumber(input.year);											-- this temporary code to determine the extent of sources dated to the Julian/Gregorian
	local month = tonumber(input.month);										-- interstice 1 October 1582 – 1 January 1926
	local day = tonumber (input.day);
	if (0 ~= day) and															-- day must have a value for this to be a whole date
		(((1582 == year) and (10 &lt;= month) and (12 &gt;= month)) or				-- any whole 1582 date from 1 october to 31 December or
			((1926 == year) and (1 == month) and (1 == input.day)) or			-- 1 January 1926 or
				((1582 &lt; year) and (1925 &gt;= year))) then						-- any date 1 January 1583 – 31 December 1925
					tCOinS_date.inter_cal_cat = true;							-- set category flag true
	end
-- end temporary Julian / Gergorian calendar uncertainty detection
	
	if 1582 &gt; tonumber(input.year) or 20 &lt; tonumber(input.month) then			-- Julian calendar or season so &amp;rft.date gets year only
		date = input.year;
		if 0 ~= input.year2 and input.year ~= input.year2 then					-- if a range, only the second year portion when not the same as range start year
			date = string.format ('%.4d/%.4d', tonumber(input.year), tonumber(input.year2))		-- assemble the date range
		end
		if 20 &lt; tonumber(input.month) then										-- if season or propername date
			local season = {[24]='winter', [21]='spring', [22]='summer', [23]='fall', [99]='Christmas'};	-- seasons lowercase, no autumn; proper names use title case
			if 0 == input.month2 then											-- single season date
				if 30 &lt;tonumber(input.month) then
					tCOinS_date.rftchron = season[input.month];					-- proper name dates
				else
					tCOinS_date.rftssn = season[input.month];					-- seasons
				end
			else																-- season range with a second season specified
				if input.year ~= input.year2 then								-- season year – season year range or season year–year
					tCOinS_date.rftssn = season[input.month];					-- start of range season; keep this?
					if 0~= input.month2 then
						tCOinS_date.rftchron = string.format ('%s %s – %s %s', season[input.month], input.year, season[input.month2], input.year2);
					end
				else															-- season–season year range
					tCOinS_date.rftssn = season[input.month];					-- start of range season; keep this?
					tCOinS_date.rftchron = season[input.month] .. '–' .. season[input.month2];	-- season–season year range
				end
			end
		end
		tCOinS_date.rftdate = date;
		return;																	-- done
	end
	
	if 0 ~= input.day then
		date = string.format ('%s-%.2d-%.2d', input.year, tonumber(input.month), tonumber(input.day));	-- whole date
	elseif 0 ~= input.month then
		date = string.format ('%s-%.2d', input.year, tonumber(input.month));	-- year and month
	else
		date = string.format ('%s', input.year);								-- just year
	end

	if 0 ~= input.year2 then
		if 0 ~= input.day2 then
			date2 = string.format ('/%s-%.2d-%.2d', input.year2, tonumber(input.month2), tonumber(input.day2));		-- whole date
		elseif 0 ~= input.month2 then
			date2 = string.format ('/%s-%.2d', input.year2, tonumber(input.month2));	-- year and month
		else
			date2 = string.format ('/%s', input.year2);							-- just year
		end
	end
	
	tCOinS_date.rftdate = date .. date2;										-- date2 has the '/' separator
	return;
end


--[[--------------------------&lt; C H E C K _ D A T E &gt;----------------------------------------------------------

Check date format to see that it is one of the formats approved by WP:DATESNO or WP:DATERANGE. Exception: only
allowed range separator is endash.  Additionally, check the date to see that it is a real date: no 31 in 30-day
months; no 29 February when not a leap year.  Months, both long-form and three character abbreviations, and seasons
must be spelled correctly.  Future years beyond next year are not allowed.

If the date fails the format tests, this function returns false and does not return values for anchor_year and
COinS_date.  When this happens, the date parameter is used in the COinS metadata and the CITEREF identifier gets
its year from the year parameter if present otherwise CITEREF does not get a date value.

Inputs:
	date_string - date string from date-holding parameters (date, year, accessdate, embargo, archivedate, etc.)

Returns:
	false if date string is not a real date; else
	true, anchor_year, COinS_date
		anchor_year can be used in CITEREF anchors
		COinS_date is ISO 8601 format date; see make_COInS_date()

]]

local function check_date (date_string, tCOinS_date, test_accessdate)
	local year;			-- assume that year2, months, and days are not used;
	local year2=0;		-- second year in a year range
	local month=0;
	local month2=0;		-- second month in a month range
	local day=0;
	local day2=0;		-- second day in a day range
	local anchor_year;
	local coins_date;

	if date_string:match("^%d%d%d%d%-%d%d%-%d%d$") then										-- year-initial numerical year month day format
		year, month, day=string.match(date_string, "(%d%d%d%d)%-(%d%d)%-(%d%d)");
		if 12 &lt; tonumber(month) or 1 &gt; tonumber(month) or 1582 &gt; tonumber(year) or 0 == tonumber(day) then return false; end	-- month or day number not valid or not Gregorian calendar
		anchor_year = year;
	elseif mw.ustring.match(date_string, "^%D- +[1-9]%d?, +[1-9]%d%d%d%a?$") then						-- month-initial: month day, year
		month, day, anchor_year, year=mw.ustring.match(date_string, "(%D-) +(%d%d?),%s*((%d%d%d%d?)%a?)");
		month = get_month_number (month);
		if 0 == month then return false; end												-- return false if month text isn't one of the twelve months
				
	elseif mw.ustring.match(date_string, "^%D- +[1-9]%d?[%-–][1-9]%d?, +[1-9]%d%d%d%a?$") then				-- month-initial day range: month day–day, year; days are separated by endash
		month, day, day2, anchor_year, year=mw.ustring.match(date_string, "(%D-) +(%d%d?)[%-–](%d%d?), +((%d%d%d%d)%a?)");
		if tonumber(day) &gt;= tonumber(day2) then return false; end							-- date range order is left to right: earlier to later; dates may not be the same;
		month = get_month_number (month);
		if 0 == month then return false; end												-- return false if month text isn't one of the twelve months
		month2=month;																		-- for metadata
		year2=year;

	elseif mw.ustring.match(date_string, "^[1-9]%d? +%D- +[1-9]%d%d%d%a?$") then						-- day-initial: day month year
		day, month, anchor_year, year=mw.ustring.match(date_string, "(%d%d*)%s*(%D-) +((%d%d%d%d?)%a?)");
		month = get_month_number (month);
		if 0 == month then return false; end												-- return false if month text isn't one of the twelve months

	elseif mw.ustring.match(date_string, "^[1-9]%d?[%-–][1-9]%d? +%D- +[1-9]%d%d%d%a?$") then				-- day-range-initial: day–day month year; days are separated by endash
		day, day2, month, anchor_year, year=mw.ustring.match(date_string, "(%d%d?)[%-–](%d%d?) +(%D-) +((%d%d%d%d)%a?)");
		if tonumber(day) &gt;= tonumber(day2) then return false; end							-- date range order is left to right: earlier to later; dates may not be the same;
		month = get_month_number (month);
		if 0 == month then return false; end												-- return false if month text isn't one of the twelve months
		month2=month;																		-- for metadata
		year2=year;

	elseif mw.ustring.match(date_string, "^[1-9]%d? +%D- +[%-–] +[1-9]%d? +%D- +[1-9]%d%d%d%a?$") then		-- day initial month-day-range: day month - day month year; uses spaced endash
		day, month, day2, month2, anchor_year, year=mw.ustring.match(date_string, "(%d%d?) +(%D-) +[%-–] +(%d%d?) +(%D-) +((%d%d%d%d)%a?)");
		if (not is_valid_month_season_range(month, month2)) or not is_valid_year(year) then return false; end	-- date range order is left to right: earlier to later;
		month = get_month_number (month);													-- for metadata
		month2 = get_month_number (month2);
		year2=year;

	elseif mw.ustring.match(date_string, "^%D- +[1-9]%d? +[%-–] +%D- +[1-9]%d?, +[1-9]%d%d%d%a?$") then		-- month initial month-day-range: month day – month day, year;  uses spaced endash
		month, day, month2, day2, anchor_year, year=mw.ustring.match(date_string, "(%D-) +(%d%d?) +[%-–] +(%D-) +(%d%d?), +((%d%d%d%d)%a?)");
		if (not is_valid_month_season_range(month, month2)) or not is_valid_year(year) then return false; end
		month = get_month_number (month);													-- for metadata
		month2 = get_month_number (month2);
		year2=year;

	elseif mw.ustring.match(date_string, "^[1-9]%d? +%D- +[1-9]%d%d%d +[%-–] +[1-9]%d? +%D- +[1-9]%d%d%d%a?$") then		-- day initial month-day-year-range: day month year - day month year; uses spaced endash
		day, month, year, day2, month2, anchor_year, year2=mw.ustring.match(date_string, "(%d%d?) +(%D-) +(%d%d%d%d) +[%-–] +(%d%d?) +(%D-) +((%d%d%d%d)%a?)");
		if tonumber(year2) &lt;= tonumber(year) then return false; end												-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) or not is_valid_month_range_style(month, month2) then return false; end		-- year2 no more than one year in the future; months same style
		month = get_month_number (month);																		-- for metadata
		month2 = get_month_number (month2);

	elseif mw.ustring.match(date_string, "^%D- +[1-9]%d?, +[1-9]%d%d%d +[%-–] +%D- +[1-9]%d?, +[1-9]%d%d%d%a?$") then		-- month initial month-day-year-range: month day, year – month day, year;  uses spaced endash
		month, day, year, month2, day2, anchor_year, year2=mw.ustring.match(date_string, "(%D-) +(%d%d?), +(%d%d%d%d) +[%-–] +(%D-) +(%d%d?), +((%d%d%d%d)%a?)");
		if tonumber(year2) &lt;= tonumber(year) then return false; end												-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) or not is_valid_month_range_style(month, month2) then return false; end		-- year2 no more than one year in the future; months same style
		month = get_month_number (month);																		-- for metadata
		month2 = get_month_number (month2);

	elseif mw.ustring.match(date_string, "^%D- +[1-9]%d%d%d[%-–]%d%d%a?$") then								-- special case Winter/Summer year-year (YYYY-YY); year separated with unspaced endash
		local century;
		month, year, century, anchor_year, year2=mw.ustring.match(date_string, "(%D-) +((%d%d)%d%d)[%-–]((%d%d)%a?)");
		if 'Winter' ~= month and 'Summer' ~= month then return false end;					-- 'month' can only be Winter or Summer
		anchor_year=year..'–'..anchor_year;													-- assemble anchor_year from both years
		year2 = century..year2;																-- add the century to year2 for comparisons
		if 1 ~= tonumber(year2) - tonumber(year) then return false; end						-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) then return false; end									-- no year farther in the future than next year
		month = get_season_number (month);

	elseif mw.ustring.match(date_string, "^%D- +[1-9]%d%d%d[%-–][1-9]%d%d%d%a?$") then						-- special case Winter/Summer year-year; year separated with unspaced endash
		month, year, anchor_year, year2=mw.ustring.match(date_string, "(%D-) +(%d%d%d%d)[%-–]((%d%d%d%d)%a?)");
		if 'Winter' ~= month and 'Summer' ~= month then return false end;					-- 'month' can only be Winter or Summer
		anchor_year=year..'–'..anchor_year;													-- assemble anchor_year from both years
		if 1 ~= tonumber(year2) - tonumber(year) then return false; end						-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) then return false; end									-- no year farther in the future than next year
		month = get_season_number (month);													-- for metadata

	elseif mw.ustring.match(date_string, "^%D- +[1-9]%d%d%d +[%-–] +%D- +[1-9]%d%d%d%a?$") then				-- month/season year - month/season year; separated by spaced endash
		month, year, month2, anchor_year, year2=mw.ustring.match(date_string, "(%D-) +(%d%d%d%d) +[%-–] +(%D-) +((%d%d%d%d)%a?)");
		anchor_year=year..'–'..anchor_year;													-- assemble anchor_year from both years
		if tonumber(year) &gt;= tonumber(year2) then return false; end							-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end									-- no year farther in the future than next year
		if 0 ~= get_month_number(month) and 0 ~= get_month_number(month2) and is_valid_month_range_style(month, month2) then 	-- both must be month year, same month style
			month = get_month_number(month);
			month2 = get_month_number(month2);
		elseif 0 ~= get_season_number(month) and 0 ~= get_season_number(month2) then		-- both must be or season year, not mixed
			month = get_season_number(month);
			month2 = get_season_number(month2);
		else
			 return false;
		end

	elseif mw.ustring.match(date_string, "^%D-[%-–]%D- +[1-9]%d%d%d%a?$") then					-- month/season range year; months separated by endash 
		month, month2, anchor_year, year=mw.ustring.match(date_string, "(%D-)[%-–](%D-)%s*((%d%d%d%d)%a?)");
		if (not is_valid_month_season_range(month, month2)) or (not is_valid_year(year)) then return false; end
		if 0 ~= get_month_number(month) then									-- determined to be a valid range so just check this one to know if month or season
			month = get_month_number(month);
			month2 = get_month_number(month2);
		else
			month = get_season_number(month);
			month2 = get_season_number(month2);
		end
		year2=year;
		
	elseif mw.ustring.match(date_string, "^%D- +%d%d%d%d%a?$") then							-- month/season year or proper-name year
		month, anchor_year, year=mw.ustring.match(date_string, "(%D-)%s*((%d%d%d%d)%a?)");
		if not is_valid_year(year) then return false; end
		if not is_valid_month_or_season (month) and 0 == is_proper_name (month) then return false; end
		if 0 ~= get_month_number(month) then									-- determined to be a valid range so just check this one to know if month or season
			month = get_month_number(month);
		elseif 0 ~= get_season_number(month) then
			month = get_season_number(month);
		else
			month = is_proper_name (month);										-- must be proper name; not supported in COinS
		end

	elseif mw.ustring.match(date_string, "^[1-9]%d%d%d?[%-–][1-9]%d%d%d?%a?$") then				-- Year range: YYY-YYY or YYY-YYYY or YYYY–YYYY; separated by unspaced endash; 100-9999
		year, anchor_year, year2=mw.ustring.match(date_string, "(%d%d%d%d?)[%-–]((%d%d%d%d?)%a?)");
		anchor_year=year..'–'..anchor_year;										-- assemble anchor year from both years
		if tonumber(year) &gt;= tonumber(year2) then return false; end				-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year

	elseif mw.ustring.match(date_string, "^[1-9]%d%d%d[%-–]%d%d%a?$") then						-- Year range: YYYY–YY; separated by unspaced endash
		local century;
		year, century, anchor_year, year2=mw.ustring.match(date_string, "((%d%d)%d%d)[%-–]((%d%d)%a?)");
		anchor_year=year..'–'..anchor_year;										-- assemble anchor year from both years
		if 13 &gt; tonumber(year2) then return false; end							-- don't allow 2003-05 which might be May 2003
		year2 = century..year2;													-- add the century to year2 for comparisons
		if tonumber(year) &gt;= tonumber(year2) then return false; end				-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year

	elseif date_string:match("^[1-9]%d%d%d?%a?$") then							-- year; here accept either YYY or YYYY
		anchor_year, year=date_string:match("((%d%d%d%d?)%a?)");
		if false == is_valid_year(year) then
			return false;
		end

	else
		return false;															-- date format not one of the MOS:DATE approved formats
	end

	if test_accessdate then														-- test accessdate here because we have numerical date parts
		if 0 ~= year and 0 ~= month and 0 ~= day and 							-- all parts of a single date required
			0 == year2 and 0 == month2 and 0 == day2 then						-- none of these; accessdate must not be a range
				if not is_valid_accessdate (year..'-'..month..'-'..day) then	
					return false;												-- return false when accessdate out of bounds
				end
		else
			return false;														-- return false when accessdate is a range of two dates
		end
	end

	local result=true;															-- check whole dates for validity; assume true because not all dates will go through this test
	if 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 == month2 and 0 == day2 then		-- YMD (simple whole date)
		result=is_valid_date(year,month,day);

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 == month2 and 0 ~= day2 then	-- YMD-d (day range)
		result=is_valid_date(year,month,day);
		result=result and is_valid_date(year,month,day2);

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 ~= month2 and 0 ~= day2 then	-- YMD-md (day month range)
		result=is_valid_date(year,month,day);
		result=result and is_valid_date(year,month2,day2);

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 ~= year2 and 0 ~= month2 and 0 ~= day2 then	-- YMD-ymd (day month year range)
		result=is_valid_date(year,month,day);
		result=result and is_valid_date(year2,month2,day2);
	end
	
	if false == result then return false; end

	if nil ~= tCOinS_date then													-- this table only passed into this function when testing |date= parameter values
		make_COinS_date ({year=year, month=month, day=day, year2=year2, month2=month2, day2=day2}, tCOinS_date);	-- make an ISO 8601 date string for COinS
	end
	
	return true, anchor_year;													-- format is good and date string represents a real date
end	


--[[--------------------------&lt; D A T E S &gt;--------------------------------------------------------------------

Cycle the date-holding parameters in passed table date_parameters_list through check_date() to check compliance with MOS:DATE. For all valid dates, check_date() returns
true. The |date= parameter test is unique, it is the only date holding parameter from which values for anchor_year (used in CITEREF identifiers) and COinS_date (used in
the COinS metadata) are derived.  The |date= parameter is the only date-holding parameter that is allowed to contain the no-date keywords "n.d." or "nd" (without quotes).

Unlike most error messages created in this module, only one error message is created by this function. Because all of the date holding parameters are processed serially,
a single error message is created as the dates are tested.

]]

local function dates(date_parameters_list, tCOinS_date)
	local anchor_year;		-- will return as nil if the date being tested is not |date=
	local COinS_date;		-- will return as nil if the date being tested is not |date=
	local embargo_date;															-- if embargo date is a good dmy, mdy, ymd date then holds original value else reset to 9999
	local error_message = "";
	local good_date = false;
	
	for k, v in pairs(date_parameters_list) do									-- for each date-holding parameter in the list
		if is_set(v.val) then														-- if the parameter has a value
			v.val = mw.ustring.gsub (v.val, '%d', cfg.date_names.local_digits);			-- translate 'local' digits to Western 0-9
			if v.val:match("^c%. [1-9]%d%d%d?%a?$") then							-- special case for c. year or with or without CITEREF disambiguator - only |date= and |year=
				local year = v.val:match("c%. ([1-9]%d%d%d?)%a?");					-- get the year portion so it can be tested
				if 'date'==k then
					anchor_year, COinS_date = v.val:match("((c%. [1-9]%d%d%d?)%a?)");	-- anchor year and COinS_date only from |date= parameter
					good_date = is_valid_year(year);
				elseif 'year'==k then
					good_date = is_valid_year(year);
				end
			elseif 'date'==k then												-- if the parameter is |date=
				if v.val:match("^n%.d%.%a?$") then									-- if |date=n.d. with or without a CITEREF disambiguator
					good_date, anchor_year, COinS_date = true, v.val:match("((n%.d%.)%a?)");	--"n.d."; no error when date parameter is set to no date
				elseif v.val:match("^nd%a?$") then									-- if |date=nd with or without a CITEREF disambiguator
					good_date, anchor_year, COinS_date = true, v.val:match("((nd)%a?)");	--"nd";	no error when date parameter is set to no date
				else
					good_date, anchor_year, COinS_date = check_date (v.val, tCOinS_date);	-- go test the date
				end
			elseif 'year'==k then												-- if the parameter is |year= it should hold only a year value
				if v.val:match("^[1-9]%d%d%d?%a?$") then							-- if |year= 3 or 4 digits only with or without a CITEREF disambiguator
					good_date, anchor_year, COinS_date = true, v.val:match("((%d+)%a?)");
				end
			elseif 'access-date'==k then										-- if the parameter is |date=
				good_date = check_date (v.val, nil, true);							-- go test the date; nil is a placeholder; true is the test_accessdate flag
			elseif 'embargo'==k then											-- if the parameter is |embargo=
				good_date = check_date (v.val);										-- go test the date
				if true == good_date then										-- if the date is a valid date
					good_date, embargo_date = is_valid_embargo_date (v.val);		-- is |embargo= date a single dmy, mdy, or ymd formatted date? yes:returns embargo; no: returns 9999
				end
			else																-- any other date-holding parameter
				good_date = check_date (v.val);										-- go test the date
			end
			if false==good_date then											-- assemble one error message so we don't add the tracking category multiple times
				if is_set(error_message) then									-- once we've added the first portion of the error message ...
					error_message=error_message .. ", ";						-- ... add a comma space separator
				end
				error_message=error_message .. "&amp;#124;" .. v.name .. "=";		-- add the failed parameter
			end
		end
	end
	return anchor_year, embargo_date, error_message;											-- and done
end


--[[--------------------------&lt; Y E A R _ D A T E _ C H E C K &gt;------------------------------------------------

Compare the value provided in |year= with the year value(s) provided in |date=.  This function returns a numeric value:
	0 - year value does not match the year value in date
	1 - (default) year value matches the year value in date or one of the year values when date contains two years
	2 - year value matches the year value in date when date is in the form YYYY-MM-DD and year is disambiguated (|year=YYYYx)

]]

local function year_date_check (year_string, date_string)
	local year;
	local date1;
	local date2;
	local result = 1;															-- result of the test; assume that the test passes
	
	year = year_string:match ('(%d%d%d%d?)');

	if date_string:match ('%d%d%d%d%-%d%d%-%d%d') and year_string:match ('%d%d%d%d%a') then	--special case where both date and year are required YYYY-MM-DD and YYYYx
		date1 = date_string:match ('(%d%d%d%d)');
		year = year_string:match ('(%d%d%d%d)');
		if year ~= date1 then
			result = 0;															-- years don't match
		else
			result = 2;															-- years match; but because disambiguated, don't add to maint cat
		end
		
	elseif date_string:match ("%d%d%d%d?.-%d%d%d%d?") then						-- any of the standard range formats of date with two three- or four-digit years
		date1, date2 = date_string:match ("(%d%d%d%d?).-(%d%d%d%d?)");
		if year ~= date1 and year ~= date2 then
			result = 0;
		end

	elseif mw.ustring.match(date_string, "%d%d%d%d[%-–]%d%d") then								-- YYYY-YY date ranges
		local century;
		date1, century, date2 = mw.ustring.match(date_string, "((%d%d)%d%d)[%-–]+(%d%d)");
		date2 = century..date2;													-- convert YY to YYYY
		if year ~= date1 and year ~= date2 then
			result = 0;
		end

	elseif date_string:match ("%d%d%d%d?") then									-- any of the standard formats of date with one year
		date1 = date_string:match ("(%d%d%d%d?)");
		if year ~= date1 then
			result = 0;
		end
	else
		result = 0;																-- no recognizable year in date
	end
	return result;
end


--[[-------------------------&lt; R E F O R M A T   T A B L E S &gt;------------------------------------------------

These table are used exclusively for reformatting dates

]]

local source_patterns = {						-- this table holds patterns that match allowed date formats used to extract date components
	['dmy'] = '^(%d%d?)%s+(%a+)%s+(%d%d%d%d)$',
	['mdy'] = '^(%a+)%s+(%d%d?),%s+(%d%d%d%d)$',
	['ymd'] = '^(%d%d%d%d)%-(%d%d)-(%d%d)$',
	}

local short_formats = {							-- this table holds format strings used by os.date() for short month names
	['dmy'] = '%e %b %Y',
	['mdy'] = '%b %e, %Y',
	['ymd'] = '%F',
	}

local long_formats = {							-- this table holds format strings used by os.date() for long month names
	['dmy'] = '%e %B %Y',
	['mdy'] = '%B %e, %Y',
	['ymd'] = '%F',
	}


--[[-------------------------&lt; G E T _ D M Y _ D A T E _ P A R T S &gt;------------------------------------------

extracts year, month and day from DMY formatted date, places them in the source_date table, and returns.

]]

local function get_dmy_date_parts (date, source_date)
	source_date.day, source_date.month, source_date.year = date:match (source_patterns['dmy']);	-- get date components as strings
	source_date.month = get_month_number (source_date.month);					-- get month number
end


--[[-------------------------&lt; G E T _ M D Y _ D A T E _ P A R T S &gt;------------------------------------------

extracts year, month and day from MDY formatted date, places them in the source_date table, and returns.

]]

local function get_mdy_date_parts (date, source_date)
	source_date.month, source_date.day, source_date.year = date:match (source_patterns['mdy']);	-- get date components as strings
	source_date.month = get_month_number (source_date.month);					-- get month number
end


--[[-------------------------&lt; G E T _ Y M D _ D A T E _ P A R T S &gt;------------------------------------------

extracts year, month and day from YMD formatted date, places them in the source_date table, and returns.

]]

local function get_ymd_date_parts (date, source_date)
	source_date.year, source_date.month, source_date.day = date:match (source_patterns['ymd']);	-- get date components as strings
end


--[[-------------------------&lt; R E F O R M A T _ D A T E S &gt;--------------------------------------------------

Reformats existing dates into the format specified by format and short.

format is one of several keywords: dmy, dmy-all, mdy, mdy-all, ymd, ymd-all.  The all version includes access- and
archive-dates; otherwise these dates are not reformatted

Date ranges, season dates, proper name dates are not currently supported.

For i18n:  This code works only at en.wiki because os.date() doesn't support any languages other than English.
mw.getContentLanguage():formatDate() will work at non-English wikis only when the date format is yyyy-mm-dd. This is
the same issue that plagues is_valid_accessdate()

It is possible that a solution like that written for ht:Module:Citation/CS1/Date_validation date_name_xlate() could be applied to this problem

]]

local function reformat_dates (date_parameters_list, format, short)
	local all = false;															-- set to false to skip access- and archive-dates
	local result = false;
	local format_str;
	local source_date = {};
	
	if format:match('%a+%-all') then
		format = format:match('(%a+)%-all');									-- extract the format
		all = true;																-- set to true to format access- and archive-dates
	end
	
	for param_name, param_val in pairs (date_parameters_list) do				-- for each date-holding parameter in the list
		if is_set (param_val.val) then											-- if the parameter has a value
			if not (not all and in_array (param_name, {'access-date', 'archive-date'})) then	-- skip access- or archive-date unless format is xxx-all; yeah, ugly; TODO: find a better way
				for source, pattern in pairs (source_patterns) do
					if param_val.val:match (pattern) then
						if 'ymd' == source then
							get_ymd_date_parts (param_val.val, source_date);	-- get the date parts into the source_date table
						elseif 'dmy' == source then
							get_dmy_date_parts (param_val.val, source_date);	-- get the date parts into the source_date table
						elseif 'mdy' == source then
							get_mdy_date_parts (param_val.val, source_date);	-- get the date parts into the source_date table
						end
	
						if 'ymd' == format and 1582 &gt; tonumber(source_date.year) then	-- ymd format dates not allowed before 1582
							return false;											-- abandon reformatting
						end
						
						if short then
							format_str = short_formats[format];
						else
							format_str = long_formats[format];
						end
																					-- convert date and save;
						date_parameters_list[param_name].val = mw.text.trim (os.date (format_str, os.time(source_date)));	-- strip leading space when single digit day and %e is first format
						result = true;
					end	-- if
				end		-- for
			end			-- if
		end				-- if
	end					-- for
return result;																	-- declare result and done
end


--[[--------------------------&lt; D A T E _ H Y P H E N _ T O _ D A S H &gt;----------------------------------------

Loops through the list of date-holding parameters and converts any hyphen to an ndash.  Not called if the cs1|2
template has any date errors.

Modifies the date_parameters_list and returns true if hyphens are replaced, else returns false.

]]

local function date_hyphen_to_dash (date_parameters_list)
	local result = false;
	local n;
	for param_name, param_val in pairs(date_parameters_list) do					-- for each date-holding parameter in the list
		if is_set (param_val.val) then
			if not mw.ustring.match (param_val.val, '%d%d%d%d%-%d%d%-%d%d') then		-- for those that are not ymd dates (ustring because here digits may not be western)
				param_val.val, n = param_val.val:gsub ('%-', '–');							-- replace any hyphen with ndash
				if 0 ~= n then
					date_parameters_list[param_name].val = param_val.val;					-- update the list
					result = true;
				end
			end
		end
	end
	return result;																-- so we know if any hyphens were replaced
end


--[[-------------------------&lt; D A T E _ N A M E _ X L A T E &gt;------------------------------------------------

Attempts to translate English month names to local-language month names using names supplied by MediaWiki's
date parser function.  This is simple name-for-name replacement and may not work for all languages.

if xlat_dig is true, this function will also translate western (English) digits to the local language's digits.
This will also translate ymd dates.

]]

local function	date_name_xlate (date_parameters_list, xlt_dig)
	local xlate;
	local mode;																	-- long or short month names
	local modified = false;
	local date;
	
	for param_name, param_val in pairs(date_parameters_list) do					-- for each date-holding parameter in the list
		if is_set(param_val.val) then											-- if the parameter has a value
			date = param_val.val;
			for month in mw.ustring.gmatch (date, '%a+') do						-- iterate through all dates in the date (single date or date range)
				if cfg.date_names.en.long[month] then
					mode = 'F';													-- English name is long so use long local name
				elseif cfg.date_names.en.short[month] then
					mode = 'M';													-- English name is short so use short local name
				else
					mode = nil;													-- not an English month name; could be local language month name or an English season name
				end
		
				if mode then															-- might be a season
					xlate = mw.getContentLanguage():formatDate(mode, '1' .. month);		-- translate the month name to this local language
					date = mw.ustring.gsub (date, month, xlate);						-- replace the English with the translation
					date_parameters_list[param_name].val = date;						-- save the translated date
					modified = true;
				end
			end

			if xlt_dig then														-- shall we also translate digits?
				date = date:gsub ('%d', cfg.date_names.xlate_digits);			-- translate digits from western to 'local digits'
				date_parameters_list[param_name].val = date;					-- save the translated date
				modified = true;
			end
		end
	end
	
	return modified;
	end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local imported functions table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr, utilities_page_ptr)
	is_set = utilities_page_ptr.is_set;											-- import functions from selected Module:Citation/CS1/Utilities module
	in_array = utilities_page_ptr.in_array;										-- import functions from selected Module:Citation/CS1/Utilities module
	cfg = cfg_table_ptr;														-- import tables from selected Module:Citation/CS1/Configuration
end



return {																		-- return exported functions
	dates = dates,
	year_date_check = year_date_check,
	reformat_dates = reformat_dates,
	date_hyphen_to_dash = date_hyphen_to_dash,
	date_name_xlate = date_name_xlate,
	set_selected_modules = set_selected_modules
	}</text>
      <sha1>1vsyvap7t0bc9gmgq5zawhizlu9ytx6</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Identifiers</title>
    <ns>828</ns>
    <id>48812124</id>
    <revision>
      <id>848669193</id>
      <parentid>846625988</parentid>
      <timestamp>2018-07-03T13:47:11Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>doi.org is not accepting fully url encoded urls; '/' character must not be encoded;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="46670">
local identifiers = {};


--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local is_set, in_array, set_error, select_one, add_maint_cat, substitute, make_wikilink;	-- functions in Module:Citation/CS1/Utilities

local z;																		-- table of tables defined in Module:Citation/CS1/Utilities

local cfg;																		-- table of configuration tables that are defined in Module:Citation/CS1/Configuration


--============================&lt;&lt; H E L P E R   F U N C T I O N S &gt;&gt;============================================

--[[--------------------------&lt; E X T E R N A L _ L I N K _ I D &gt;----------------------------------------------

Formats a wiki style external link

]]

local function external_link_id(options)
	local url_string = options.id;
	local ext_link;
	
	if options.encode == true or options.encode == nil then
		url_string = mw.uri.encode( url_string );
		if 'doi' == options.label then											-- 2018-07-02 doi.org stopped accepting urls with url encoded '/' (%2F)
			url_string = url_string:gsub ('%%2F', '/');							-- special case for doi; undo url-encoded slashes
		end
	end
	
	ext_link = mw.ustring.format ('[%s%s%s %s]', options.prefix, url_string, options.suffix or "", mw.text.nowiki(options.id));
	if is_set(options.access) then
		ext_link = substitute (cfg.presentation['access-signal'], {ext_link, cfg.presentation[options.access]});	-- add the free-to-read / paywall lock
	end
	
	return table.concat	({
		make_wikilink (options.link, options.label),
		options.separator or '&amp;nbsp;',
		ext_link
		});
end


--[[--------------------------&lt; I N T E R N A L _ L I N K _ I D &gt;----------------------------------------------

Formats a wiki style internal link

]]

local function internal_link_id(options)

	return table.concat (
		{
		make_wikilink (options.link, options.label),
		options.separator or '&amp;nbsp;',
		make_wikilink (
			table.concat (
				{
				options.prefix,
				options.id,
				options.suffix or ''
				}),
			mw.text.nowiki (options.id)
			);
		});
end


--[[--------------------------&lt; I S _ E M B A R G O E D &gt;------------------------------------------------------

Determines if a PMC identifier's online version is embargoed. Compares the date in |embargo= against today's date.  If embargo date is
in the future, returns the content of |embargo=; otherwise, returns and empty string because the embargo has expired or because
|embargo= was not set in this cite.

]]

local function is_embargoed (embargo)
	if is_set (embargo) then
		local lang = mw.getContentLanguage();
		local good1, embargo_date, good2, todays_date;
		good1, embargo_date = pcall( lang.formatDate, lang, 'U', embargo );
		good2, todays_date = pcall( lang.formatDate, lang, 'U' );
	
		if good1 and good2 then													-- if embargo date and today's date are good dates
			if tonumber( embargo_date ) &gt;= tonumber( todays_date ) then			-- is embargo date is in the future?
				return embargo;													-- still embargoed
			else
				add_maint_cat ('embargo')
				return '';														-- unset because embargo has expired
			end
		end
	end
	return '';																	-- |embargo= not set return empty string
end


--[[--------------------------&lt; IS _ V A L I D _ I S X N &gt;-----------------------------------------------------

ISBN-10 and ISSN validator code calculates checksum across all isbn/issn digits including the check digit.
ISBN-13 is checked in isbn().

If the number is valid the result will be 0. Before calling this function, issbn/issn must be checked for length
and stripped of dashes, spaces and other non-isxn characters.

]]

local function is_valid_isxn (isxn_str, len)
	local temp = 0;
	isxn_str = { isxn_str:byte(1, len) };	-- make a table of byte values '0' → 0x30 .. '9' → 0x39, 'X' → 0x58
	len = len+1;							-- adjust to be a loop counter
	for i, v in ipairs( isxn_str ) do		-- loop through all of the bytes and calculate the checksum
		if v == string.byte( "X" ) then		-- if checkdigit is X (compares the byte value of 'X' which is 0x58)
			temp = temp + 10*( len - i );	-- it represents 10 decimal
		else
			temp = temp + tonumber( string.char(v) )*(len-i);
		end
	end
	return temp % 11 == 0;					-- returns true if calculation result is zero
end


--[[--------------------------&lt; IS _ V A L I D _ I S X N _ 1 3 &gt;-----------------------------------------------

ISBN-13 and ISMN validator code calculates checksum across all 13 isbn/ismn digits including the check digit.
If the number is valid, the result will be 0. Before calling this function, isbn-13/ismn must be checked for length
and stripped of dashes, spaces and other non-isxn-13 characters.

]]

local function is_valid_isxn_13 (isxn_str)
	local temp=0;
	
	isxn_str = { isxn_str:byte(1, 13) };										-- make a table of byte values '0' → 0x30 .. '9' → 0x39
	for i, v in ipairs( isxn_str ) do
		temp = temp + (3 - 2*(i % 2)) * tonumber( string.char(v) );				-- multiply odd index digits by 1, even index digits by 3 and sum; includes check digit
	end
	return temp % 10 == 0;														-- sum modulo 10 is zero when isbn-13/ismn is correct
end


--[[--------------------------&lt; N O R M A L I Z E _ L C C N &gt;--------------------------------------------------

lccn normalization (http://www.loc.gov/marc/lccn-namespace.html#normalization)
1. Remove all blanks.
2. If there is a forward slash (/) in the string, remove it, and remove all characters to the right of the forward slash.
3. If there is a hyphen in the string:
	a. Remove it.
	b. Inspect the substring following (to the right of) the (removed) hyphen. Then (and assuming that steps 1 and 2 have been carried out):
		1. All these characters should be digits, and there should be six or less. (not done in this function)
		2. If the length of the substring is less than 6, left-fill the substring with zeroes until the length is six.

Returns a normalized lccn for lccn() to validate.  There is no error checking (step 3.b.1) performed in this function.
]]

local function normalize_lccn (lccn)
	lccn = lccn:gsub ("%s", "");									-- 1. strip whitespace

	if nil ~= string.find (lccn,'/') then
		lccn = lccn:match ("(.-)/");								-- 2. remove forward slash and all character to the right of it
	end

	local prefix
	local suffix
	prefix, suffix = lccn:match ("(.+)%-(.+)");						-- 3.a remove hyphen by splitting the string into prefix and suffix

	if nil ~= suffix then											-- if there was a hyphen
		suffix=string.rep("0", 6-string.len (suffix)) .. suffix;	-- 3.b.2 left fill the suffix with 0s if suffix length less than 6
		lccn=prefix..suffix;										-- reassemble the lccn
	end
	
	return lccn;
	end

--============================&lt;&lt; I D E N T I F I E R   F U N C T I O N S &gt;&gt;====================================

--[[--------------------------&lt; A R X I V &gt;--------------------------------------------------------------------

See: http://arxiv.org/help/arxiv_identifier

format and error check arXiv identifier.  There are three valid forms of the identifier:
the first form, valid only between date codes 9108 and 0703 is:
	arXiv:&lt;archive&gt;.&lt;class&gt;/&lt;date code&gt;&lt;number&gt;&lt;version&gt;
where:
	&lt;archive&gt; is a string of alpha characters - may be hyphenated; no other punctuation
	&lt;class&gt; is a string of alpha characters - may be hyphenated; no other punctuation
	&lt;date code&gt; is four digits in the form YYMM where YY is the last two digits of the four-digit year and MM is the month number January = 01
		first digit of YY for this form can only 9 and 0
	&lt;number&gt; is a three-digit number
	&lt;version&gt; is a 1 or more digit number preceded with a lowercase v; no spaces (undocumented)
	
the second form, valid from April 2007 through December 2014 is:
	arXiv:&lt;date code&gt;.&lt;number&gt;&lt;version&gt;
where:
	&lt;date code&gt; is four digits in the form YYMM where YY is the last two digits of the four-digit year and MM is the month number January = 01
	&lt;number&gt; is a four-digit number
	&lt;version&gt; is a 1 or more digit number preceded with a lowercase v; no spaces

the third form, valid from January 2015 is:
	arXiv:&lt;date code&gt;.&lt;number&gt;&lt;version&gt;
where:
	&lt;date code&gt; and &lt;version&gt; are as defined for 0704-1412
	&lt;number&gt; is a five-digit number
]]

local function arxiv (id, class)
	local handler = cfg.id_handlers['ARXIV'];
	local year, month, version;
	local err_cat = '';
	local text;
	
	if id:match("^%a[%a%.%-]+/[90]%d[01]%d%d%d%d$") or id:match("^%a[%a%.%-]+/[90]%d[01]%d%d%d%dv%d+$") then	-- test for the 9108-0703 format w/ &amp; w/o version
		year, month = id:match("^%a[%a%.%-]+/([90]%d)([01]%d)%d%d%d[v%d]*$");
		year = tonumber(year);
		month = tonumber(month);
		if ((not (90 &lt; year or 8 &gt; year)) or (1 &gt; month or 12 &lt; month)) or		-- if invalid year or invalid month
			((91 == year and 7 &gt; month) or (7 == year and 3 &lt; month)) then		-- if years ok, are starting and ending months ok?
				err_cat = ' ' .. set_error( 'bad_arxiv' );						-- set error message
		end
	elseif id:match("^%d%d[01]%d%.%d%d%d%d$") or id:match("^%d%d[01]%d%.%d%d%d%dv%d+$") then	-- test for the 0704-1412 w/ &amp; w/o version
		year, month = id:match("^(%d%d)([01]%d)%.%d%d%d%d[v%d]*$");
		year = tonumber(year);
		month = tonumber(month);
		if ((7 &gt; year) or (14 &lt; year) or (1 &gt; month or 12 &lt; month)) or			-- is year invalid or is month invalid? (doesn't test for future years)
			((7 == year) and (4 &gt; month)) then --or									-- when year is 07, is month invalid (before April)?
				err_cat = ' ' .. set_error( 'bad_arxiv' );						-- set error message
		end
	elseif id:match("^%d%d[01]%d%.%d%d%d%d%d$") or id:match("^%d%d[01]%d%.%d%d%d%d%dv%d+$") then	-- test for the 1501- format w/ &amp; w/o version
		year, month = id:match("^(%d%d)([01]%d)%.%d%d%d%d%d[v%d]*$");
		year = tonumber(year);
		month = tonumber(month);
		if ((15 &gt; year) or (1 &gt; month or 12 &lt; month)) then						-- is year invalid or is month invalid? (doesn't test for future years)
			err_cat = ' ' .. set_error( 'bad_arxiv' );							-- set error message
		end
	else
		err_cat = ' ' .. set_error( 'bad_arxiv' );								-- arXiv id doesn't match any format
	end

	text = external_link_id({link = handler.link, label = handler.label,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode, access=handler.access}) .. err_cat;

	if is_set (class) then
		class = ' [[' .. '//arxiv.org/archive/' .. class .. ' ' .. class .. ']]';	-- external link within square brackets, not wikilink
	else
		class = '';																-- empty string for concatenation
	end
	
	return text .. class;
end


--[[--------------------------&lt; B I B C O D E &gt;--------------------------------------------------------------------

Validates (sort of) and formats a bibcode id.

Format for bibcodes is specified here: http://adsabs.harvard.edu/abs_doc/help_pages/data.html#bibcodes

But, this: 2015arXiv151206696F is apparently valid so apparently, the only things that really matter are length, 19 characters
and first four digits must be a year.  This function makes these tests:
	length must be 19 characters
	characters in position
		1–4 must be digits and must represent a year in the range of 1000 – next year
		5 must be a letter
		6 must be letter, ampersand, or dot (ampersand cannot directly precede a dot; &amp;. )
		7–8 must be letter, digit, ampersand, or dot (ampersand cannot directly precede a dot; &amp;. )
		9–18 must be letter, digit, or dot
		19 must be a letter or dot

]]

local function bibcode (id, access)
	local handler = cfg.id_handlers['BIBCODE'];
	local err_type;
	local year;

	local text = external_link_id({link=handler.link, label=handler.label,
		prefix=handler.prefix, id=id, separator=handler.separator, encode=handler.encode,
		access=access});
	
	if 19 ~= id:len() then
		err_type = 'length';
	else
		year = id:match ("^(%d%d%d%d)[%a][%a&amp;%.][%a&amp;%.%d][%a&amp;%.%d][%a%d%.]+[%a%.]$")	-- 
		if not year then														-- if nil then no pattern match
			err_type = 'value';													-- so value error
		else
			local next_year = tonumber(os.date ('%Y'))+1;						-- get the current year as a number and add one for next year
			year = tonumber (year);												-- convert year portion of bibcode to a number
			if (1000 &gt; year) or (year &gt; next_year) then
				err_type = 'year';												-- year out of bounds
			end
			if id:find('&amp;%.') then
				err_type = 'journal';											-- journal abbreviation must not have '&amp;.' (if it does its missing a letter)
			end
		end
	end

	if is_set (err_type) then													-- if there was an error detected
		text = text .. ' ' .. set_error( 'bad_bibcode', {err_type});
	end
	return text;
end


--[[--------------------------&lt; B I O R X I V &gt;-----------------------------------------------------------------

Format bioRxiv id and do simple error checking.  BiorXiv ids are exactly 6 digits.
The bioRxiv id is the number following the last slash in the bioRxiv-issued DOI:
https://doi.org/10.1101/078733 -&gt; 078733

]]

local function biorxiv(id)
	local handler = cfg.id_handlers['BIORXIV'];
	local err_cat = '';															-- presume that bioRxiv id is valid
	
	if nil == id:match("^%d%d%d%d%d%d$") then									-- if bioRxiv id has anything but six digits
		err_cat = ' ' .. set_error( 'bad_biorxiv');	-- set an error message
	end
	
	return external_link_id({link = handler.link, label = handler.label,
			prefix=handler.prefix,id=id,separator=handler.separator,
			encode=handler.encode, access=handler.access}) .. err_cat;
end


--[[--------------------------&lt; C I T E S E E R X &gt;------------------------------------------------------------

CiteSeerX use their own notion of "doi" (not to be confused with the identifiers resolved via doi.org).

The description of the structure of this identifier can be found at Help_talk:Citation_Style_1/Archive_26#CiteSeerX_id_structure
]]

local function citeseerx (id)
	local handler = cfg.id_handlers['CITESEERX'];
	local matched;
	
	local text = external_link_id({link=handler.link, label=handler.label,
		prefix=handler.prefix, id=id, separator=handler.separator, encode=handler.encode,
		access=handler.access});
	
	matched = id:match ("^10%.1%.1%.[1-9]%d?%d?%d?%.[1-9]%d?%d?%d?$");
	if not matched then
		text = text .. ' ' .. set_error( 'bad_citeseerx' );
	end
	return text;
end


--[[--------------------------&lt; D O I &gt;------------------------------------------------------------------------

Formats a DOI and checks for DOI errors.

DOI names contain two parts: prefix and suffix separated by a forward slash.
	Prefix: directory indicator '10.' followed by a registrant code
	Suffix: character string of any length chosen by the registrant

This function checks a DOI name for: prefix/suffix.  If the doi name contains spaces or endashes, or, if it ends
with a period or a comma, this function will emit a bad_doi error message.

DOI names are case-insensitive and can incorporate any printable Unicode characters so the test for spaces, endash,
and terminal punctuation may not be technically correct but it appears, that in practice these characters are rarely
if ever used in doi names.

]]

local function doi(id, inactive, access)
	local cat = ""
	local handler = cfg.id_handlers['DOI'];
	
	local text;
	if is_set(inactive) then
		local inactive_year = inactive:match("%d%d%d%d") or '';					-- try to get the year portion from the inactive date
		if is_set(inactive_year) then
			table.insert( z.error_categories, "Pages with DOIs inactive since " .. inactive_year );
		else
			table.insert( z.error_categories, "Pages with inactive DOIs" );		-- when inactive doesn't contain a recognizable year
		end
		inactive = " (" .. cfg.messages['inactive'] .. " " .. inactive .. ")" 
	end
	text = external_link_id({link = handler.link, label = handler.label,
		prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode, access=access}) .. (inactive or '')

	if nil == id:match("^10%.[^%s–]-/[^%s–]-[^%.,]$") then						-- doi must begin with '10.', must contain a fwd slash, must not contain spaces or endashes, and must not end with period or comma
		cat = ' ' .. set_error( 'bad_doi' );
	end

	return text .. cat 
end


--[[--------------------------&lt; H D L &gt;------------------------------------------------------------------------

Formats an HDL with minor error checking.

HDL names contain two parts: prefix and suffix separated by a forward slash.
	Prefix: character string using any character in the UCS-2 character set except '/'
	Suffix: character string of any length using any character in the UCS-2 character set chosen by the registrant

This function checks a HDL name for: prefix/suffix.  If the HDL name contains spaces, endashes, or, if it ends
with a period or a comma, this function will emit a bad_hdl error message.

HDL names are case-insensitive and can incorporate any printable Unicode characters so the test for endashes and
terminal punctuation may not be technically correct but it appears, that in practice these characters are rarely
if ever used in HDLs.

]]

local function hdl(id, access)
	local handler = cfg.id_handlers['HDL'];
	
	local text = external_link_id({link = handler.link, label = handler.label,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode, access=access})

	if nil == id:match("^[^%s–]-/[^%s–]-[^%.,]$") then							-- hdl must contain a fwd slash, must not contain spaces, endashes, and must not end with period or comma
		text = text .. ' ' .. set_error( 'bad_hdl' );
	end
	return text;
end


--[[--------------------------&lt; I S B N &gt;----------------------------------------------------------------------

Determines whether an ISBN string is valid

]]

local function isbn( isbn_str )
	if nil ~= isbn_str:match("[^%s-0-9X]") then
		return false, 'invalid character';										-- fail if isbn_str contains anything but digits, hyphens, or the uppercase X
	end
	isbn_str = isbn_str:gsub( "-", "" ):gsub( " ", "" );						-- remove hyphens and spaces
	local len = isbn_str:len();
 
	if len ~= 10 and len ~= 13 then
		return false, 'length';													-- fail if incorrect length
	end

	if len == 10 then
		if isbn_str:match( "^%d*X?$" ) == nil then								-- fail if isbn_str has 'X' anywhere but last position
			return false, 'invalid form';									
		end
		return is_valid_isxn(isbn_str, 10), 'checksum';
	else
		if isbn_str:match( "^%d+$" ) == nil then
			return false, 'invalid character';									-- fail if isbn13 is not all digits
		end
		if isbn_str:match( "^97[89]%d*$" ) == nil then
			return false, 'invalid prefix';										-- fail when isbn13 does not begin with 978 or 979
		end
		return is_valid_isxn_13 (isbn_str), 'checksum';
	end
end


--[[--------------------------&lt; A M A Z O N &gt;------------------------------------------------------------------

Formats a link to Amazon.  Do simple error checking: asin must be mix of 10 numeric or uppercase alpha
characters.  If a mix, first character must be uppercase alpha; if all numeric, asins must be 10-digit
isbn. If 10-digit isbn, add a maintenance category so a bot or awb script can replace |asin= with |isbn=.
Error message if not 10 characters, if not isbn10, if mixed and first character is a digit.

This function is positioned here because it calls isbn()

]]

local function asin(id, domain)
	local err_cat = ""

	if not id:match("^[%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u]$") then
		err_cat = ' ' .. set_error ('bad_asin');								-- asin is not a mix of 10 uppercase alpha and numeric characters
	else
		if id:match("^%d%d%d%d%d%d%d%d%d[%dX]$") then							-- if 10-digit numeric (or 9 digits with terminal X)
			if isbn( id ) then													-- see if asin value is isbn10
				add_maint_cat ('ASIN');
			elseif not is_set (err_cat) then
				err_cat = ' ' .. set_error ('bad_asin');						-- asin is not isbn10
			end
		elseif not id:match("^%u[%d%u]+$") then
			err_cat = ' ' .. set_error ('bad_asin');							-- asin doesn't begin with uppercase alpha
		end
	end
	if not is_set(domain) then 
		domain = "com";
	elseif in_array (domain, {'jp', 'uk'}) then			-- Japan, United Kingdom
		domain = "co." .. domain;
	elseif in_array (domain, {'au', 'br', 'mx'}) then	-- Australia, Brazil, Mexico
		domain = "com." .. domain;
	end
	local handler = cfg.id_handlers['ASIN'];
	return external_link_id({link=handler.link,
		label=handler.label, prefix=handler.prefix .. domain .. "/dp/",
		id=id, encode=handler.encode, separator = handler.separator}) .. err_cat;
end


--[[--------------------------&lt; I S M N &gt;----------------------------------------------------------------------

Determines whether an ISMN string is valid.  Similar to isbn-13, ismn is 13 digits begining 979-0-... and uses the
same check digit calculations.  See http://www.ismn-international.org/download/Web_ISMN_Users_Manual_2008-6.pdf
section 2, pages 9–12.

]]

local function ismn (id)
	local handler = cfg.id_handlers['ISMN'];
	local text;
	local valid_ismn = true;
	local id_copy;

	id_copy = id;																-- save a copy because this testing is destructive
	id=id:gsub( "[%s-–]", "" );													-- strip spaces, hyphens, and endashes from the ismn

	if 13 ~= id:len() or id:match( "^9790%d*$" ) == nil then					-- ismn must be 13 digits and begin 9790
		valid_ismn = false;
	else
		valid_ismn=is_valid_isxn_13 (id);										-- validate ismn
	end

--	text = internal_link_id({link = handler.link, label = handler.label,		-- use this (or external version) when there is some place to link to
--		prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode})
 
	text = table.concat (
		{
		make_wikilink (handler.link, handler.label),
		handler.separator,
		id_copy
		});		-- because no place to link to yet

	if false == valid_ismn then
		text = text .. ' ' .. set_error( 'bad_ismn' )							-- add an error message if the ismn is invalid
	end 
	
	return text;
end


--[[--------------------------&lt; I S S N &gt;----------------------------------------------------------------------

Validate and format an issn.  This code fixes the case where an editor has included an ISSN in the citation but
has separated the two groups of four digits with a space.  When that condition occurred, the resulting link looked
like this:

	|issn=0819 4327 gives: [http://www.worldcat.org/issn/0819 4327 0819 4327]	-- can't have spaces in an external link
	
This code now prevents that by inserting a hyphen at the issn midpoint.  It also validates the issn for length
and makes sure that the checkdigit agrees with the calculated value.  Incorrect length (8 digits), characters
other than 0-9 and X, or checkdigit / calculated value mismatch will all cause a check issn error message.  The
issn is always displayed with a hyphen, even if the issn was given as a single group of 8 digits.

]]

local function issn(id, e)
	local issn_copy = id;														-- save a copy of unadulterated issn; use this version for display if issn does not validate
	local handler;
	local text;
	local valid_issn = true;
	
	if e then
		 handler = cfg.id_handlers['EISSN'];
	else
		 handler = cfg.id_handlers['ISSN'];
	end

	id=id:gsub( "[%s-–]", "" );													-- strip spaces, hyphens, and endashes from the issn

	if 8 ~= id:len() or nil == id:match( "^%d*X?$" ) then						-- validate the issn: 8 digits long, containing only 0-9 or X in the last position
		valid_issn=false;														-- wrong length or improper character
	else
		valid_issn=is_valid_isxn(id, 8);										-- validate issn
	end

	if true == valid_issn then
		id = string.sub( id, 1, 4 ) .. "-" .. string.sub( id, 5 );				-- if valid, display correctly formatted version
	else
		id = issn_copy;															-- if not valid, use the show the invalid issn with error message
	end
	
	text = external_link_id({link = handler.link, label = handler.label,
		prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode})
 
	if false == valid_issn then
		text = text .. ' ' .. set_error( 'bad_issn', e and 'e' or '' )			-- add an error message if the issn is invalid
	end 
	
	return text
end


--[[--------------------------&lt; J F M &gt;-----------------------------------------------------------------------

A numerical identifier in the form nn.nnnn.nn

]]

local function jfm (id)
	local handler = cfg.id_handlers['JFM'];
	local id_num;
	local err_cat = '';
	
	id_num = id:match ('^[Jj][Ff][Mm](.*)$');									-- identifier with jfm prefix; extract identifier

	if is_set (id_num) then
		add_maint_cat ('jfm_format');
	else																		-- plain number without mr prefix
		id_num = id;															-- if here id does not have prefix
	end

	if id_num and id_num:match('^%d%d%.%d%d%d%d%.%d%d$') then
		id = id_num;															-- jfm matches pattern
	else
		err_cat = ' ' .. set_error( 'bad_jfm' );								-- set an error message
	end
	
	return external_link_id({link = handler.link, label = handler.label,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat;
end


--[[--------------------------&lt; L C C N &gt;----------------------------------------------------------------------

Format LCCN link and do simple error checking.  LCCN is a character string 8-12 characters long. The length of
the LCCN dictates the character type of the first 1-3 characters; the rightmost eight are always digits.
http://info-uri.info/registry/OAIHandler?verb=GetRecord&amp;metadataPrefix=reg&amp;identifier=info:lccn/

length = 8 then all digits
length = 9 then lccn[1] is lower case alpha
length = 10 then lccn[1] and lccn[2] are both lower case alpha or both digits
length = 11 then lccn[1] is lower case alpha, lccn[2] and lccn[3] are both lower case alpha or both digits
length = 12 then lccn[1] and lccn[2] are both lower case alpha

]]

local function lccn(lccn)
	local handler = cfg.id_handlers['LCCN'];
	local err_cat = '';															-- presume that LCCN is valid
	local id = lccn;															-- local copy of the lccn

	id = normalize_lccn (id);													-- get canonical form (no whitespace, hyphens, forward slashes)
	local len = id:len();														-- get the length of the lccn

	if 8 == len then
		if id:match("[^%d]") then												-- if LCCN has anything but digits (nil if only digits)
			err_cat = ' ' .. set_error( 'bad_lccn' );							-- set an error message
		end
	elseif 9 == len then														-- LCCN should be adddddddd
		if nil == id:match("%l%d%d%d%d%d%d%d%d") then							-- does it match our pattern?
			err_cat = ' ' .. set_error( 'bad_lccn' );							-- set an error message
		end
	elseif 10 == len then														-- LCCN should be aadddddddd or dddddddddd
		if id:match("[^%d]") then												-- if LCCN has anything but digits (nil if only digits) ...
			if nil == id:match("^%l%l%d%d%d%d%d%d%d%d") then					-- ... see if it matches our pattern
				err_cat = ' ' .. set_error( 'bad_lccn' );						-- no match, set an error message
			end
		end
	elseif 11 == len then														-- LCCN should be aaadddddddd or adddddddddd
		if not (id:match("^%l%l%l%d%d%d%d%d%d%d%d") or id:match("^%l%d%d%d%d%d%d%d%d%d%d")) then	-- see if it matches one of our patterns
			err_cat = ' ' .. set_error( 'bad_lccn' );							-- no match, set an error message
		end
	elseif 12 == len then														-- LCCN should be aadddddddddd
		if not id:match("^%l%l%d%d%d%d%d%d%d%d%d%d") then						-- see if it matches our pattern
			err_cat = ' ' .. set_error( 'bad_lccn' );							-- no match, set an error message
		end
	else
		err_cat = ' ' .. set_error( 'bad_lccn' );								-- wrong length, set an error message
	end

	if not is_set (err_cat) and nil ~= lccn:find ('%s') then
		err_cat = ' ' .. set_error( 'bad_lccn' );								-- lccn contains a space, set an error message
	end

	return external_link_id({link = handler.link, label = handler.label,
			prefix=handler.prefix,id=lccn,separator=handler.separator, encode=handler.encode}) .. err_cat;
end


--[[--------------------------&lt; M R &gt;--------------------------------------------------------------------------

A seven digit number; if not seven digits, zero-fill leading digits to make seven digits.

]]

local function mr (id)
	local handler = cfg.id_handlers['MR'];
	local id_num;
	local id_len;
	local err_cat = '';
	
	id_num = id:match ('^[Mm][Rr](%d+)$');										-- identifier with mr prefix

	if is_set (id_num) then
		add_maint_cat ('mr_format');
	else																		-- plain number without mr prefix
		id_num = id:match ('^%d+$');											-- if here id is all digits
	end

	id_len = id_num and id_num:len() or 0;
	if (7 &gt;= id_len) and (0 ~= id_len) then
		id = string.rep ('0', 7-id_len ) .. id_num;								-- zero-fill leading digits
	else
		err_cat = ' ' .. set_error( 'bad_mr' );									-- set an error message
	end
	
	return external_link_id({link = handler.link, label = handler.label,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat;
end


--[[--------------------------&lt; O C L C &gt;----------------------------------------------------------------------

Validate and format an oclc id.  https://www.oclc.org/batchload/controlnumber.en.html

]]

local function oclc (id)
	local handler = cfg.id_handlers['OCLC'];
	local number;
	local err_msg = '';															-- empty string for concatenation
	
	if id:match('^ocm%d%d%d%d%d%d%d%d$') then									-- ocm prefix and 8 digits; 001 field (12 characters)
		number = id:match('ocm(%d+)');											-- get the number
	elseif id:match('^ocn%d%d%d%d%d%d%d%d%d$') then								-- ocn prefix and 9 digits; 001 field (12 characters)
		number = id:match('ocn(%d+)');											-- get the number
	elseif id:match('^on%d%d%d%d%d%d%d%d%d%d+$') then							-- on prefix and 10 or more digits; 001 field (12 characters)
		number = id:match('^on(%d%d%d%d%d%d%d%d%d%d+)$');						-- get the number
	elseif id:match('^%(OCoLC%)[1-9]%d*$') then									-- (OCoLC) prefix and variable number digits; no leading zeros; 035 field
		number = id:match('%(OCoLC%)([1-9]%d*)');								-- get the number
		if 9 &lt; number:len() then
			number = nil;														-- contrain to 1 to 9 digits; change this when oclc issues 10-digit numbers
		end
	elseif id:match('^%d+$') then												-- no prefix
		number = id;															-- get the number
		if 10 &lt; number:len() then
			number = nil;														-- contrain to 1 to 10 digits; change this when oclc issues 11-digit numbers
		end
	end

	if number then																-- proper format
		id = number;															-- exclude prefix, if any, from external link
	else
		err_msg = ' ' .. set_error( 'bad_oclc' )								-- add an error message if the id is malformed
	end
	
	local text = external_link_id({link=handler.link, label=handler.label,
		prefix=handler.prefix, id=id, separator=handler.separator, encode=handler.encode}) .. err_msg;

	return text;
end


--[[--------------------------&lt; O P E N L I B R A R Y &gt;--------------------------------------------------------

Formats an OpenLibrary link, and checks for associated errors.

]]

local function openlibrary(id, access)
	local code;
	local handler = cfg.id_handlers['OL'];
	local ident;
	
	ident, code = id:gsub('^OL', ''):match("^(%d+([AMW]))$");					-- optional OL prefix followed immediately by digits followed by 'A', 'M', or 'W'; remove OL prefix

	if not is_set (ident) then													-- if malformed return an error
		return external_link_id({link=handler.link, label=handler.label,
			prefix=handler.prefix .. 'OL',
			id=id, separator=handler.separator,	encode = handler.encode,
			access = access}) .. ' ' .. set_error( 'bad_ol' );
	end
	
	id = ident;																	-- use ident without the optional OL prefix (it has been removed)
	
	if ( code == "A" ) then
		return external_link_id({link=handler.link, label=handler.label,
			prefix=handler.prefix .. 'authors/OL',
			id=id, separator=handler.separator,	encode = handler.encode,
			access = access})
	end
	
	if ( code == "M" ) then
		return external_link_id({link=handler.link, label=handler.label,
			prefix=handler.prefix .. 'books/OL',
			id=id, separator=handler.separator,	encode = handler.encode,
			access = access})
	end

	if ( code == "W" ) then
		return external_link_id({link=handler.link, label=handler.label,
			prefix=handler.prefix .. 'works/OL',
			id=id, separator=handler.separator,	encode = handler.encode,
			access = access})
	end
end


--[[--------------------------&lt; P M C &gt;------------------------------------------------------------------------

Format a PMC, do simple error checking, and check for embargoed articles.

The embargo parameter takes a date for a value. If the embargo date is in the future the PMC identifier will not
be linked to the article.  If the embargo date is today or in the past, or if it is empty or omitted, then the
PMC identifier is linked to the article through the link at cfg.id_handlers['PMC'].prefix.

PMC embargo date testing is done in function is_embargoed () which is called earlier because when the citation
has |pmc=&lt;value&gt; but does not have a |url= then |title= is linked with the PMC link.  Function is_embargoed ()
returns the embargo date if the PMC article is still embargoed, otherwise it returns an empty string.

PMCs are sequential numbers beginning at 1 and counting up.  This code checks the PMC to see that it contains only digits and is less
than test_limit; the value in local variable test_limit will need to be updated periodically as more PMCs are issued.

]]

local function pmc(id, embargo)
	local test_limit = 6500000;													-- update this value as PMCs approach
	local handler = cfg.id_handlers['PMC'];
	local err_cat = '';															-- presume that PMC is valid
	local id_num;
	local text;
	
	id_num = id:match ('^[Pp][Mm][Cc](%d+)$');									-- identifier with pmc prefix

	if is_set (id_num) then
		add_maint_cat ('pmc_format');
	else																		-- plain number without pmc prefix
		id_num = id:match ('^%d+$');											-- if here id is all digits
	end

	if is_set (id_num) then														-- id_num has a value so test it
		id_num = tonumber(id_num);												-- convert id_num to a number for range testing
		if 1 &gt; id_num or test_limit &lt; id_num then								-- if PMC is outside test limit boundaries
			err_cat = ' ' .. set_error( 'bad_pmc' );							-- set an error message
		else
			id = tostring (id_num);												-- make sure id is a string
		end
	else																		-- when id format incorrect
		err_cat = ' ' .. set_error( 'bad_pmc' );								-- set an error message
	end
	
	if is_set (embargo) then													-- is PMC is still embargoed?
		text = table.concat (													-- still embargoed so no external link
			{
			make_wikilink (handler.link, handler.label),
			handler.separator,
			id,
			err_cat
			});
	else
		text = external_link_id({link = handler.link, label = handler.label,	-- no embargo date or embargo has expired, ok to link to article
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode, access=handler.access}) .. err_cat;
	end
	return text;
end


--[[--------------------------&lt; P M I D &gt;----------------------------------------------------------------------

Format PMID and do simple error checking.  PMIDs are sequential numbers beginning at 1 and counting up.  This
code checks the PMID to see that it contains only digits and is less than test_limit; the value in local variable
test_limit will need to be updated periodically as more PMIDs are issued.

]]

local function pmid(id)
	local test_limit = 32000000;												-- update this value as PMIDs approach
	local handler = cfg.id_handlers['PMID'];
	local err_cat = '';															-- presume that PMID is valid
	
	if id:match("[^%d]") then													-- if PMID has anything but digits
		err_cat = ' ' .. set_error( 'bad_pmid' );								-- set an error message
	else																		-- PMID is only digits
		local id_num = tonumber(id);											-- convert id to a number for range testing
		if 1 &gt; id_num or test_limit &lt; id_num then								-- if PMID is outside test limit boundaries
			err_cat = ' ' .. set_error( 'bad_pmid' );							-- set an error message
		end
	end
	
	return external_link_id({link = handler.link, label = handler.label,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat;
end


--[[--------------------------&lt; S S R N &gt;----------------------------------------------------------------------

Format an ssrn, do simple error checking

SSRNs are sequential numbers beginning at 100? and counting up.  This code checks the ssrn to see that it is
only digits and is greater than 99 and less than test_limit; the value in local variable test_limit will need
to be updated periodically as more SSRNs are issued.

]]

local function ssrn (id)
	local test_limit = 3500000;													-- update this value as SSRNs approach
	local handler = cfg.id_handlers['SSRN'];
	local err_cat = '';															-- presume that SSRN is valid
	local id_num;
	local text;
	
	id_num = id:match ('^%d+$');												-- id must be all digits

	if is_set (id_num) then														-- id_num has a value so test it
		id_num = tonumber(id_num);												-- convert id_num to a number for range testing
		if 100 &gt; id_num or test_limit &lt; id_num then								-- if SSRN is outside test limit boundaries
			err_cat = ' ' .. set_error( 'bad_ssrn' );							-- set an error message
		end
	else																		-- when id format incorrect
		err_cat = ' ' .. set_error( 'bad_ssrn' );								-- set an error message
	end
	
	text = external_link_id({link = handler.link, label = handler.label,
		prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode, access=handler.access}) .. err_cat;

	return text;
end


--[[--------------------------&lt; U S E N E T _ I D &gt;------------------------------------------------------------

Validate and format a usenet message id.  Simple error checking, looks for 'id-left@id-right' not enclosed in
'&lt;' and/or '&gt;' angle brackets.

]]

local function usenet_id (id)
	local handler = cfg.id_handlers['USENETID'];

	local text = external_link_id({link = handler.link, label = handler.label,
		prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode})
 
	if not id:match('^.+@.+$') or not id:match('^[^&lt;].*[^&gt;]$')then				-- doesn't have '@' or has one or first or last character is '&lt; or '&gt;'
		text = text .. ' ' .. set_error( 'bad_usenet_id' )						-- add an error message if the message id is invalid
	end 
	
	return text
end


--[[--------------------------&lt; Z B L &gt;-----------------------------------------------------------------------

A numerical identifier in the form nnnn.nnnnn - leading zeros in the first quartet optional

]]

local function zbl (id)
	local handler = cfg.id_handlers['ZBL'];
	local id_num;
	local err_cat = '';
	
	id_num = id:match ('^[Zz][Bb][Ll](.*)$');									-- identifier with zbl prefix; extract identifier

	if is_set (id_num) then
		add_maint_cat ('zbl_format');
	else																		-- plain number without zbl prefix
		id_num = id;															-- if here id does not have prefix
	end

	if id_num:match('^%d?%d?%d?%d%.%d%d%d%d%d$') then
		id = id_num;															-- id matches pattern
	else
		err_cat = ' ' .. set_error( 'bad_zbl' );								-- set an error message
	end
	
	return external_link_id({link = handler.link, label = handler.label,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat;
end


--============================&lt;&lt; I N T E R F A C E   F U N C T I O N S &gt;&gt;==========================================

--[[--------------------------&lt; B U I L D _ I D _ L I S T &gt;--------------------------------------------------------

Takes a table of IDs created by extract_ids() and turns it into a table of formatted ID outputs.

inputs:
	id_list – table of identifiers built by extract_ids()
	options – table of various template parameter values used to modify some manually handled identifiers

]]

local function build_id_list( id_list, options )
	local new_list, handler = {};

	local function fallback(k) return { __index = function(t,i) return cfg.id_handlers[k][i] end } end;
	
	for k, v in pairs( id_list ) do												-- k is uc identifier name as index to cfg.id_handlers; e.g. cfg.id_handlers['ISBN'], v is a table
		-- fallback to read-only cfg
		handler = setmetatable( { ['id'] = v, ['access'] = options.IdAccessLevels[k] }, fallback(k) );

		if handler.mode == 'external' then
			table.insert( new_list, {handler.label, external_link_id( handler ) } );
		elseif handler.mode == 'internal' then
			table.insert( new_list, {handler.label, internal_link_id( handler ) } );
		elseif handler.mode ~= 'manual' then
			error( cfg.messages['unknown_ID_mode'] );
		elseif k == 'ARXIV' then
			table.insert( new_list, {handler.label, arxiv( v, options.Class ) } ); 
		elseif k == 'ASIN' then
			table.insert( new_list, {handler.label, asin( v, options.ASINTLD ) } ); 
		elseif k == 'BIBCODE' then
			table.insert( new_list, {handler.label, bibcode( v, handler.access ) } );
		elseif k == 'BIORXIV' then
			table.insert( new_list, {handler.label, biorxiv( v ) } );
		elseif k == 'CITESEERX' then
			table.insert( new_list, {handler.label, citeseerx( v ) } );
		elseif k == 'DOI' then
			table.insert( new_list, {handler.label, doi( v, options.DoiBroken, handler.access ) } );
		elseif k == 'EISSN' then
			table.insert( new_list, {handler.label, issn( v, true ) } );		-- true distinguishes eissn from issn
		elseif k == 'HDL' then
			table.insert( new_list, {handler.label, hdl( v, handler.access ) } );
		elseif k == 'ISBN' then
			local ISBN = internal_link_id( handler );
			local check;
			local err_type = '';
			check, err_type = isbn( v );
			if not check then
				if is_set(options.IgnoreISBN) then								-- ISBN is invalid; if |ignore-isbn-error= set
					add_maint_cat ('ignore_isbn_err');							-- ad a maint category
				else
					ISBN = ISBN .. set_error( 'bad_isbn', {err_type}, false, " ", "" );	-- else display an error message
				end
			elseif is_set(options.IgnoreISBN) then								-- ISBN is OK; if |ignore-isbn-error= set
				add_maint_cat ('ignore_isbn_err');								-- because |ignore-isbn-error= unnecessary
			end
			table.insert( new_list, {handler.label, ISBN } );				
		elseif k == 'ISMN' then
			table.insert( new_list, {handler.label, ismn( v ) } );
		elseif k == 'ISSN' then
			table.insert( new_list, {handler.label, issn( v ) } );
		elseif k == 'JFM' then
			table.insert( new_list, {handler.label, jfm( v ) } );
		elseif k == 'LCCN' then
			table.insert( new_list, {handler.label, lccn( v ) } );
		elseif k == 'MR' then
			table.insert( new_list, {handler.label, mr( v ) } );
		elseif k == 'OCLC' then
			table.insert( new_list, {handler.label, oclc( v ) } );
		elseif k == 'OL' or k == 'OLA' then
			table.insert( new_list, {handler.label, openlibrary( v, handler.access ) } );
		elseif k == 'PMC' then
			table.insert( new_list, {handler.label, pmc( v, options.Embargo ) } );
		elseif k == 'PMID' then
			table.insert( new_list, {handler.label, pmid( v ) } );
		elseif k == 'SSRN' then
			table.insert( new_list, {handler.label, ssrn( v ) } );
		elseif k == 'USENETID' then
			table.insert( new_list, {handler.label, usenet_id( v ) } );
		elseif k == 'ZBL' then
			table.insert( new_list, {handler.label, zbl( v ) } );
		else
			error( cfg.messages['unknown_manual_ID'] );
		end
	end
	
	local function comp( a, b )	-- used in following table.sort()
		return a[1]:lower() &lt; b[1]:lower();
	end
	
	table.sort( new_list, comp );
	for k, v in ipairs( new_list ) do
		new_list[k] = v[2];
	end
	
	return new_list;
end


--[[--------------------------&lt; E X T R A C T _ I D S &gt;------------------------------------------------------------

Populates ID table from arguments using configuration settings. Loops through cfg.id_handlers and searches args for
any of the parameters listed in each cfg.id_handlers['...'].parameters.  If found, adds the parameter and value to
the identifier list.  Emits redundant error message is more than one alias exists in args

]]

local function extract_ids( args )
	local id_list = {};															-- list of identifiers found in args
	for k, v in pairs( cfg.id_handlers ) do										-- k is uc identifier name as index to cfg.id_handlers; e.g. cfg.id_handlers['ISBN'], v is a table
		v = select_one( args, v.parameters, 'redundant_parameters' );			-- v.parameters is a table of aliases for k; here we pick one from args if present
		if is_set(v) then id_list[k] = v; end									-- if found in args, add identifier to our list
	end
	return id_list;
end


--[[--------------------------&lt; E X T R A C T _ I D _ A C C E S S _ L E V E L S &gt;--------------------------------------

Fetches custom id access levels from arguments using configuration settings.
Parameters which have a predefined access level (e.g. arxiv) do not use this
function as they are directly rendered as free without using an additional parameter.

]]

local function extract_id_access_levels( args, id_list )
	local id_accesses_list = {};
	for k, v in pairs( cfg.id_handlers ) do
		local access_param = v.custom_access;
		local k_lower = string.lower(k);
		if is_set(access_param) then
			local access_level = args[access_param];
			if is_set(access_level) then
				if not in_array (access_level:lower(), cfg.keywords['id-access']) then
					table.insert( z.message_tail, { set_error( 'invalid_param_val', {access_param, access_level}, true ) } );	
					access_level = nil;
				end
				if not is_set(id_list[k]) then
					table.insert( z.message_tail, { set_error( 'param_access_requires_param', {k_lower}, true ) } );
				end
				if is_set(access_level) then
					access_level = access_level:lower();
				end
				id_accesses_list[k] = access_level;
			end
		end
	end
	return id_accesses_list;
end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local cfg table and imported functions table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr, utilities_page_ptr)
	cfg = cfg_table_ptr;

	is_set = utilities_page_ptr.is_set;											-- import functions from select Module:Citation/CS1/Utilities module
	in_array = utilities_page_ptr.in_array;
	set_error = utilities_page_ptr.set_error;
	select_one = utilities_page_ptr.select_one;
	add_maint_cat = utilities_page_ptr.add_maint_cat;
	substitute = utilities_page_ptr.substitute;
	make_wikilink = utilities_page_ptr.make_wikilink;

	z = utilities_page_ptr.z;													-- table of tables in Module:Citation/CS1/Utilities
end


return {
	build_id_list = build_id_list,
	extract_ids = extract_ids,
	extract_id_access_levels = extract_id_access_levels,
	is_embargoed = is_embargoed;
	set_selected_modules = set_selected_modules;
	}</text>
      <sha1>by356mih61wyb9ydfuxhkhpgq954vg6</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Utilities</title>
    <ns>828</ns>
    <id>48808487</id>
    <revision>
      <id>808669316</id>
      <parentid>729837287</parentid>
      <timestamp>2017-11-04T10:41:15Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>synch from sandbox;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="13878">local u = {}

local z = {
	error_categories = {};														-- for categorizing citations that contain errors
	error_ids = {};
	message_tail = {};
	maintenance_cats = {};														-- for categorizing citations that aren't erroneous per se, but could use a little work
	properties_cats = {};														-- for categorizing citations based on certain properties, language of source for instance
};


--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local cfg;																		-- table of tables imported from selected Module:Citation/CS1/Configuration


--[[--------------------------&lt; I S _ S E T &gt;------------------------------------------------------------------

Returns true if argument is set; false otherwise. Argument is 'set' when it exists (not nil) or when it is not an empty string.

]]

local function is_set( var )
	return not (var == nil or var == '');
end


--[[--------------------------&lt; I N _ A R R A Y &gt;--------------------------------------------------------------

Whether needle is in haystack

]]

local function in_array( needle, haystack )
	if needle == nil then
		return false;
	end
	for n,v in ipairs( haystack ) do
		if v == needle then
			return n;
		end
	end
	return false;
end


--[[--------------------------&lt; S U B S T I T U T E &gt;----------------------------------------------------------

Populates numbered arguments in a message string using an argument table.

]]

local function substitute( msg, args )
	return args and mw.message.newRawMessage( msg, args ):plain() or msg;
end


--[[--------------------------&lt; E R R O R _ C O M M E N T &gt;----------------------------------------------------

Wraps error messages with css markup according to the state of hidden.

]]

local function error_comment( content, hidden )
	return substitute( hidden and cfg.presentation['hidden-error'] or cfg.presentation['visible-error'], content );
end


--[=[-------------------------&lt; M A K E _ W I K I L I N K &gt;----------------------------------------------------

Makes a wikilink; when bot link and display text is provided, returns a wikilink in the form [[L|D]]; if only
link is provided, returns a wikilink in the form [[L]]; if neither are provided or link is omitted, returns an
empty string.

]=]

local function make_wikilink (link, display)
	if is_set (link) then
		if is_set (display) then
			return table.concat ({'[[', link, '|', display, ']]'});
		else
			return table.concat ({'[[', link, ']]'});
		end
	else
		return '';
	end
end


--[[--------------------------&lt; S E T _ E R R O R &gt;--------------------------------------------------------------

Sets an error condition and returns the appropriate error message.  The actual placement of the error message in the output is
the responsibility of the calling function.

]]

local function set_error( error_id, arguments, raw, prefix, suffix )
	local error_state = cfg.error_conditions[ error_id ];
	
	prefix = prefix or "";
	suffix = suffix or "";
	
	if error_state == nil then
		error( cfg.messages['undefined_error'] );								-- because missing error handler in Module:Citation/CS1/Configuration
	elseif is_set( error_state.category ) then
		table.insert( z.error_categories, error_state.category );
	end
	
	local message = substitute( error_state.message, arguments );

	message = table.concat (
		{
		message,
		' (',
		make_wikilink (
			table.concat (
				{
				cfg.messages['help page link'],
				'#',
				error_state.anchor
				}),
			cfg.messages['help page label']),
		')'
		});

--	message = table.concat ({message, ' (', substitute (cfg.presentation['wikilink'], 
--		{cfg.messages['help page link'] .. '#' .. error_state.anchor, cfg.messages['help page label']}), ')'});
--	message = message .. " ([[" .. cfg.messages['help page link'] .. 
--		"#" .. error_state.anchor .. "|" ..
--		cfg.messages['help page label'] .. "]])";
	
	z.error_ids[ error_id ] = true;
	if in_array( error_id, { 'bare_url_missing_title', 'trans_missing_title' } )
			and z.error_ids['citation_missing_title'] then
		return '', false;
	end
	
	message = table.concat({ prefix, message, suffix });
	
	if raw == true then
		return message, error_state.hidden;
	end		
		
	return error_comment( message, error_state.hidden );
end


--[[-------------------------&lt; I S _ A L I A S _ U S E D &gt;-----------------------------------------------------

This function is used by select_one() to determine if one of a list of alias parameters is in the argument list
provided by the template.

Input:
	args – pointer to the arguments table from calling template
	alias – one of the list of possible aliases in the aliases lists from Module:Citation/CS1/Configuration
	index – for enumerated parameters, identifies which one
	enumerated – true/false flag used choose how enumerated aliases are examined
	value – value associated with an alias that has previously been selected; nil if not yet selected
	selected – the alias that has previously been selected; nil if not yet selected
	error_list – list of aliases that are duplicates of the alias already selected

Returns:
	value – value associated with alias we selected or that was previously selected or nil if an alias not yet selected
	selected – the alias we selected or the alias that was previously selected or nil if an alias not yet selected

]]

local function is_alias_used (args, alias, index, enumerated, value, selected, error_list)
	if enumerated then															-- is this a test for an enumerated parameters?
		alias = alias:gsub ('#', index);										-- replace '#' with the value in index
	else
		alias = alias:gsub ('#', '');											-- remove '#' if it exists
	end

	if is_set(args[alias]) then													-- alias is in the template's argument list
		if value ~= nil and selected ~= alias then								-- if we have already selected one of the aliases
			local skip;
			for _, v in ipairs(error_list) do									-- spin through the error list to see if we've added this alias
				if v == alias then
					skip = true;
					break;														-- has been added so stop looking 
				end
			end
			if not skip then													-- has not been added so
				table.insert( error_list, alias );								-- add error alias to the error list
			end
		else
			value = args[alias];												-- not yet selected an alias, so select this one
			selected = alias;
		end
	end
	return value, selected;														-- return newly selected alias, or previously selected alias
end


--[[--------------------------&lt; A D D _ M A I N T _ C A T &gt;------------------------------------------------------

Adds a category to z.maintenance_cats using names from the configuration file with additional text if any.
To prevent duplication, the added_maint_cats table lists the categories by key that have been added to z.maintenance_cats.

]]

local added_maint_cats = {}														-- list of maintenance categories that have been added to z.maintenance_cats
local function add_maint_cat (key, arguments)
	if not added_maint_cats [key] then
		added_maint_cats [key] = true;											-- note that we've added this category
		table.insert( z.maintenance_cats, substitute (cfg.maint_cats [key], arguments));	-- make name then add to table
	end
end


--[[--------------------------&lt; S A F E _ F O R _ I T A L I C S &gt;----------------------------------------------

Protects a string that will be wrapped in wiki italic markup '' ... ''

Note: We cannot use &lt;i&gt; for italics, as the expected behavior for italics specified by ''...'' in the title is that
they will be inverted (i.e. unitalicized) in the resulting references.  In addition, &lt;i&gt; and '' tend to interact
poorly under Mediawiki's HTML tidy.

]]

local function safe_for_italics( str )
	if not is_set(str) then
		return str;
	else
		if str:sub(1,1) == "'" then str = "&lt;span&gt;&lt;/span&gt;" .. str; end
		if str:sub(-1,-1) == "'" then str = str .. "&lt;span&gt;&lt;/span&gt;"; end
		
		-- Remove newlines as they break italics.
		return str:gsub( '\n', ' ' );
	end
end


--[[--------------------------&lt; W R A P _ S T Y L E &gt;----------------------------------------------------------

Applies styling to various parameters.  Supplied string is wrapped using a message_list configuration taking one
argument; protects italic styled parameters.  Additional text taken from citation_config.presentation - the reason
this function is similar to but separate from wrap_msg().

]]

local function wrap_style (key, str)
	if not is_set( str ) then
		return "";
	elseif in_array( key, { 'italic-title', 'trans-italic-title' } ) then
		str = safe_for_italics( str );
	end

	return substitute( cfg.presentation[key], {str} );
end


--[[--------------------------&lt; S E L E C T _ O N E &gt;----------------------------------------------------------

Chooses one matching parameter from a list of parameters to consider.  The list of parameters to consider is just
names.  For parameters that may be enumerated, the position of the numerator in the parameter name is identified
by the '#' so |author-last1= and |author1-last= are represented as 'author-last#' and 'author#-last'.

Because enumerated parameter |&lt;param&gt;1= is an alias of |&lt;param&gt;= we must test for both possibilities.


Generates an error if more than one match is present.

]]

local function select_one( args, aliases_list, error_condition, index )
	local value = nil;															-- the value assigned to the selected parameter
	local selected = '';														-- the name of the parameter we have chosen
	local error_list = {};

	if index ~= nil then index = tostring(index); end

	for _, alias in ipairs( aliases_list ) do									-- for each alias in the aliases list
		if alias:match ('#') then												-- if this alias can be enumerated
			if '1' == index then												-- when index is 1 test for enumerated and non-enumerated aliases
				value, selected = is_alias_used (args, alias, index, false, value, selected, error_list);	-- first test for non-enumerated alias
			end
			value, selected = is_alias_used (args, alias, index, true, value, selected, error_list);		-- test for enumerated alias
		else
			value, selected = is_alias_used (args, alias, index, false, value, selected, error_list);		--test for non-enumerated alias
		end
	end

	if #error_list &gt; 0 and 'none' ~= error_condition then						-- for cases where this code is used outside of extract_names()
		local error_str = "";
		for _, k in ipairs( error_list ) do
			if error_str ~= "" then error_str = error_str .. cfg.messages['parameter-separator'] end
			error_str = error_str .. wrap_style ('parameter', k);
		end
		if #error_list &gt; 1 then
			error_str = error_str .. cfg.messages['parameter-final-separator'];
		else
			error_str = error_str .. cfg.messages['parameter-pair-separator'];
		end
		error_str = error_str .. wrap_style ('parameter', selected);
		table.insert( z.message_tail, { set_error( error_condition, {error_str}, true ) } );
	end
	
	return value, selected;
end


--[=[-------------------------&lt; R E M O V E _ W I K I _ L I N K &gt;----------------------------------------------

Gets the display text from a wikilink like [[A|B]] or [[B]] gives B

The str:gsub() returns either A|B froma [[A|B]] or B from [[B]] or B from B (no wikilink markup).

In l(), l:gsub() removes the link and pipe (if they exist); the second :gsub() trims white space from the label
if str was wrapped in wikilink markup.  Presumably, this is because without wikimarkup in str, there is no match
in the initial gsub, the replacement function l() doesn't get called.

]=]

local function remove_wiki_link (str)
	return (str:gsub( "%[%[([^%[%]]*)%]%]", function(l)
		return l:gsub( "^[^|]*|(.*)$", "%1" ):gsub("^%s*(.-)%s*$", "%1");
	end));
end


--[=[-------------------------&lt; I S _ W I K I L I N K &gt;--------------------------------------------------------

Determines if str is a wikilink, extracts, and returns the the wikilink type, link text, and display text parts.
If str is a complex wikilink ([[L|D]]):
	returns wl_type 2 and D and L from [[L|D]];
if str is a simple wikilink ([[D]])
	returns wl_type 1 and D from [[D]] and L as empty string;
if not a wikilink:
	returns wl_type 0, str as D, and L as empty string.

trims leading and trailing white space and pipes from L and D ([[L|]] and [[|D]] are accepted by MediaWiki and
treated like [[D]]; while [[|D|]] is not accepted by MediaWiki, here, we accept it and return D without the pipes).

]=]

local function is_wikilink (str)
	local D, L
	local wl_type = 2;															-- assume that str is a complex wikilink [[L|D]]

	L, D = str:match ('%[%[([^|]+)|([^%]]+)%]%]');								-- get L and D from [[L|D]] 

	if not is_set (D) then														-- if no separate link
		D = str:match ('%[%[([^%]]*)|*%]%]');									-- get D from [[D]]
		wl_type = 1; 
	end
	
	if not is_set (D) then														-- no wikilink markup
		D = str;																-- return the string as D
		wl_type = 0;															-- but say that it is not a wikilink
	end
	
	D = mw.text.trim (D, '%s|');												-- trim white space and pipe characters 
	L = L and mw.text.trim (L, '%s|');
	
	return wl_type, D, L or '';
end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local cfg table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr)
	cfg = cfg_table_ptr;
	
end



return {																		-- return exported functions and tables
	is_set = is_set,
	in_array = in_array,
	substitute = substitute,
	error_comment = error_comment,
	set_error = set_error,
	select_one = select_one,
	add_maint_cat = add_maint_cat,
	wrap_style = wrap_style,
	safe_for_italics = safe_for_italics,
	remove_wiki_link = remove_wiki_link,
	is_wikilink = is_wikilink,
	make_wikilink = make_wikilink,
	set_selected_modules = set_selected_modules,
	z = z,
	}</text>
      <sha1>paqzmjiy0g42xcm0br82k5z9jczlnm6</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Whitelist</title>
    <ns>828</ns>
    <id>39013723</id>
    <revision>
      <id>845164991</id>
      <parentid>826155019</parentid>
      <timestamp>2018-06-09T21:37:04Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>synch from sandbox;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="18965">
--[[--------------------------&lt; P A R A M E T E R S   N O T   S U P P O R T E D &gt;------------------------------

This is a list of parameters that once were but now are no longer supported:

	['albumlink'] = nil,			-- unique alias of titlelink used by old cite AV media notes
	['albumtype'] = nil,			-- controled inappropriate functionality in the old cite AV media notes
	['artist'] = nil,				-- unique alias of others used by old cite AV media notes
	['ARXIV'] = nil,				-- not an initialization
	['Author'] = nil,				-- non-standard capitalization
	['authorformat'] = nil,			-- primarily used to support Vancouver format which functionality now part of name-list-format
	['author-format'] = nil,		-- primarily used to support Vancouver format which functionality now part of name-list-format
	['author-name-separator'] = nil,-- primarily used to support Vancouver format which functionality now part of name-list-format
	['author-separator'] = nil,		-- primarily used to support Vancouver format which functionality now part of name-list-format
	['began'] = nil,				-- module handles date ranges; cite episode and cite series
	['BIBCODE'] = nil,				-- not an initialization
	['callsign'] = nil,				-- cite interview removed
	['call-sign'] = nil,			-- cite interview removed
	['chapterlink'] = nil,			-- if ever necessary to link to a chapter article, |chapter= can be wikilinked 
	['chapter-link'] = nil,			-- 
	['city'] = nil,					-- cite interview removed
	['coauthor'] = nil,				-- redundant to |authorn=; not made part of metadata
	['coauthors'] = nil,			-- redundant to |authorn=; not made part of metadata
	['cointerviewers'] = nil,		-- unique alias of others used by old cite interview
	['day'] = nil,					-- deprecated in {{citation/core}} and somehow undeprecated in Module:Citation/CS1 and now finally removed
	['director'] = nil,				-- unique alias of author used by old cite DVD-notes
	['doi_brokendate'] = nil,                  -- alias of doi-broken-date
	['doi_inactivedate'] = nil,                  -- alias of doi-inactive-date
	['DoiBroken'] = nil,			-- not used, non-standard captialization
	['Editor'] = nil,				-- non-standard capitalization
	['editorformat'] = nil,			-- primarily used to support Vancouver format which functionality now part of name-list-format
	['EditorSurname'] = nil,		-- non-standard capitalization
	['editor-format'] = nil,		-- primarily used to support Vancouver format which functionality now part of name-list-format
	['EditorGiven'] = nil,			-- non-standard capitalization
	['editor-name-separator'] = nil,-- primarily used to support Vancouver format which functionality now part of name-list-format
	['editor-separator'] = nil,		-- primarily used to support Vancouver format which functionality now part of name-list-format
	['Embargo'] = nil,				-- not used, non-standard capitalization
	['ended'] = nil,				-- module handles date ranges; cite episode and cite series
	['month'] = nil,				-- functionality supported by |date=
	['name-separator'] = nil,		-- primarily used to support Vancouver format which functionality now part of name-list-format
	['notestitle'] = nil,			-- unique alias of chapter used by old cite AV media notes
	['PPrefix'] = nil,				-- non-standard capitalization
	['PPPrefix'] = nil,				-- not used, non-standard capitalization
	['pp-prefix'] = nil,			-- not used, not documented
	['p-prefix'] = nil,				-- not used, not documented
	['program'] = nil,				-- cite interview removed
	['publisherid'] = nil,			-- unique alias of id used by old cite AV media notes and old cite DVD-notes
	['Ref'] = nil,					-- non-standard capitalization
	['separator'] = nil,			-- this functionality now provided by |mode=
	['template doc demo'] = nil,            -- alias of template doc demo
	['titleyear'] = nil,			-- unique alias of origyear used by old cite DVD-notes
	['trans_chapter'] = nil,                -- alias of trans-chapter
	['trans_title'] = nil,                  -- alias of trans-title

	['Author#'] = nil,				-- non-standard capitalization
	['authors#'] = nil,				-- no need for multiple lists of author names
	['Editor#'] = nil,				-- non-standard capitalization
	['editors#'] = nil,				-- no need for multiple lists of editor names
	['EditorGiven#'] = nil,			-- non-standard capitalization
	['EditorSurname#'] = nil,		-- non-standard capitalization

]]

--[[--------------------------&lt; S U P P O R T E D   P A R A M E T E R S &gt;--------------------------------------

Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items can have three values:
	true - these parameters are valid and supported parameters
	false - these parameters are deprecated but still supported
	nil - these parameters are no longer supported (when setting a parameter to nil, leave a comment stating the reasons for invalidating the parameter)
	
]]

local whitelist = {}

local basic_arguments = {
	['accessdate'] = true,
	['access-date'] = true,
	['agency'] = true,
	['airdate'] = true,
	['air-date'] = true,
	['archivedate'] = true,
	['archive-date'] = true,
	['archive-format'] = true,
	['archiveurl'] = true,
	['archive-url'] = true,
	['article'] = true,
	['arxiv'] = true,
	['asin'] = true,
	['ASIN'] = true,
	['asin-tld'] = true,
	['ASIN-TLD'] = true,
	['at'] = true,
	['author'] = true,
	['author-first'] = true,
	['author-last'] = true,
	['authorlink'] = true,
	['author-link'] = true,
	['authormask'] = true,
	['author-mask'] = true,
	['authors'] = true,
	['bibcode'] = true,
	['bibcode-access'] = true,
	['biorxiv'] = true,
	['booktitle'] = true,
	['book-title'] = true,
	['cartography'] = true,
	['chapter'] = true,
	['chapter-format'] = true,
	['chapterurl'] = true,
	['chapter-url'] = true,
	['chapter-url-access'] = true,
	['citeseerx'] = true,
	['class'] = true,				-- cite arxiv and arxiv identifiers
	['collaboration'] = true,
	['conference'] = true,
	['conference-format'] = true,
	['conferenceurl'] = true,
	['conference-url'] = true,
	['contribution'] = true,
	['contribution-format'] = true,
	['contributionurl'] = true,
	['contribution-url'] = true,
	['contributor'] = true,
	['contributor-first'] = true,
	['contributor-last'] = true,
	['contributor-given'] = true,
	['contributor-surname'] = true,
	['contributor-link'] = true,
	['contributor-mask'] = true,
	['credits'] = true,				-- cite episode, cite serial
	['date'] = true,
	['deadurl'] = true,
	['dead-url'] = true,
	['degree'] = true,
	['department'] = true,
	['df'] = true,
	['dictionary'] = true,
	['displayauthors'] = true,
	['display-authors'] = true,
	['displayeditors'] = true,
	['display-editors'] = true,
	['docket'] = true,
	['doi'] = true,
	['DOI'] = true,
	['doi-access'] = true,
	['doi-broken'] = true,
	['doi-broken-date'] = true,
	['doi-inactive-date'] = true,
	['edition'] = true,
	['editor'] = true,
	['editor-first'] = true,
	['editor-given'] = true,
	['editor-last'] = true,
	['editorlink'] = true,
	['editor-link'] = true,
	['editormask'] = true,
	['editor-mask'] = true,
	['editors'] = true,
	['editor-surname'] = true,
	['eissn'] = true,
	['EISSN'] = true,
	['embargo'] = true,
	['encyclopaedia'] = true,
	['encyclopedia'] = true,
	['entry'] = true,
	['episode'] = true,															-- cite serial only TODO: make available to cite episode?
	['episodelink'] = true,														-- cite episode and cite serial
	['episode-link'] = true,													-- cite episode and cite serial
	['eprint'] = true,															-- cite arxiv and arxiv identifiers
	['event'] = true,
	['event-format'] = true,
	['eventurl'] = true,
	['event-url'] = true,
	['first'] = true,
	['format'] = true,
	['given'] = true,
	['hdl'] = true,
	['HDL'] = true,
	['hdl-access'] = true,
	['host'] = true,
	['id'] = true,
	['ID'] = true,
	['ignoreisbnerror'] = true,
	['ignore-isbn-error'] = true,
	['in'] = false,
	['inset'] = true,
	['institution'] = true,
	['interviewer'] = true,
	['interviewer-first'] = true,
	['interviewer-last'] = true,
	['interviewerlink'] = true,
	['interviewer-link'] = true,
	['interviewermask'] = true,
	['interviewer-mask'] = true,
	['interviewers'] = true,
	['isbn'] = true,
	['ISBN'] = true,
	['isbn13'] = true,
	['ISBN13'] = true,
	['ismn'] = true,
	['ISMN'] = true,
	['issn'] = true,
	['ISSN'] = true,
	['issue'] = true,
	['jfm'] = true,
	['JFM'] = true,
	['journal'] = true,
	['jstor'] = true,
	['JSTOR'] = true,
	['jstor-access'] = true,
	['lang'] = true,
	['language'] = true,
	['last'] = true,
	['lastauthoramp'] = true,
	['last-author-amp'] = true,
	['laydate'] = true,
	['lay-date'] = true,
	['laysource'] = true,
	['lay-source'] = true,
	['laysummary'] = true,
	['lay-summary'] = true,
	['lay-format'] = true,
	['layurl'] = true,
	['lay-url'] = true,
	['lccn'] = true,
	['LCCN'] = true,
	['location'] = true,
	['magazine'] = true,
	['mailinglist'] = true,				-- cite mailing list only
	['mailing-list'] = true,			-- cite mailing list only
	['map'] = true,						-- cite map only
	['map-format'] = true,				-- cite map only
	['mapurl'] = true,					-- cite map only
	['map-url'] = true,					-- cite map only
	['medium'] = true,
	['message-id'] = true,			-- cite newsgroup
	['minutes'] = true,
	['mode'] = true,
	['mr'] = true,
	['MR'] = true,
	['name-list-format'] = true,
	['network'] = true,
	['newsgroup'] = true,
	['newspaper'] = true,
	['nocat'] = true,
	['no-cat'] = true,
	['nopp'] = true,
	['no-pp'] = true,
	['notracking'] = true,
	['no-tracking'] = true,
	['number'] = true,
	['oclc'] = true,
	['OCLC'] = true,
	['ol'] = true,
	['OL'] = true,
	['ol-access'] = true,
	['origyear'] = true,
	['orig-year'] = true,
	['osti'] = true,
	['OSTI'] = true,
	['osti-access'] = true,
	['others'] = true,
	['p'] = true,
	['page'] = true,
	['pages'] = true,
	['people'] = true,
	['periodical'] = true,
	['place'] = true,
	['pmc'] = true,
	['PMC'] = true,
	['pmid'] = true,
	['PMID'] = true,
	['postscript'] = true,
	['pp'] = true,
	['publicationdate'] = true,
	['publication-date'] = true,
	['publicationplace'] = true,
	['publication-place'] = true,
	['publisher'] = true,
	['quotation'] = true,
	['quote'] = true,
	['ref'] = true,
	['registration'] = true,
	['rfc'] = true,
	['RFC'] = true,
	['scale'] = true,
	['script-chapter'] = true,
	['script-title'] = true,
	['season'] = true,
	['section'] = true,
	['section-format'] = true,
	['sections'] = true,					-- cite map only
	['sectionurl'] = true,
	['section-url'] = true,
	['series'] = true,
	['serieslink'] = true,
	['series-link'] = true,
	['seriesno'] = true,
	['series-no'] = true,
	['seriesnumber'] = true,
	['series-number'] = true,
	['series-separator'] = true,
	['sheet'] = true,															-- cite map only
	['sheets'] = true,															-- cite map only
	['ssrn'] = true,
	['SSRN'] = true,
	['station'] = true,
	['subject'] = true,
	['subjectlink'] = true,
	['subject-link'] = true,
	['subscription'] = true,
	['surname'] = true,
	['template-doc-demo'] = true,
	['time'] = true,
	['timecaption'] = true,
	['time-caption'] = true,
	['title'] = true,
	['titlelink'] = true,
	['title-link'] = true,
	['trans-chapter'] = true,
	['trans-map'] = true,
	['transcript'] = true,
	['transcript-format'] = true,
	['transcripturl'] = true,
	['transcript-url'] = true,
	['trans-title'] = true,
	['translator'] = true,
	['translator-first'] = true,
	['translator-last'] = true,
	['translator-given'] = true,
	['translator-surname'] = true,
	['translator-link'] = true,
	['translator-mask'] = true,
	['type'] = true,
	['url'] = true,
	['URL'] = true,
	['url-access'] = true,
	['vauthors'] = true,
	['veditors'] = true,
	['version'] = true,
	['via'] = true,
	['volume'] = true,
	['website'] = true,
	['work'] = true,
	['year'] = true,
	['zbl'] = true,
	['ZBL'] = true,
}

local numbered_arguments = {
	['author#'] = true,
	['author-first#'] = true,
	['author#-first'] = true,
	['author-last#'] = true,
	['author#-last'] = true,
	['author-link#'] = true,
	['author#link'] = true,
	['author#-link'] = true,
	['authorlink#'] = true,
	['author-mask#'] = true,
	['author#mask'] = true,
	['author#-mask'] = true,
	['authormask#'] = true,
	['contributor#'] = true,
	['contributor-first#'] = true,
	['contributor#-first'] = true,
	['contributor-last#'] = true,
	['contributor#-last'] = true,
	['contributor-given#'] = true,
	['contributor#-given'] = true,
	['contributor-surname#'] = true,
	['contributor#-surname'] = true,
	['contributor-link#'] = true,
	['contributor#-link'] = true,
	['contributor-mask#'] = true,
	['contributor#-mask'] = true,
	['editor#'] = true,
	['editor-first#'] = true,
	['editor#-first'] = true,
	['editor#-given'] = true,
	['editor-given#'] = true,
	['editor-last#'] = true,
	['editor#-last'] = true,
	['editor-link#'] = true,
	['editor#link'] = true,
	['editor#-link'] = true,
	['editorlink#'] = true,
	['editor-mask#'] = true,
	['editor#mask'] = true,
	['editor#-mask'] = true,
	['editormask#'] = true,
	['editor#-surname'] = true,
	['editor-surname#'] = true,
	['first#'] = true,
	['given#'] = true,
	['interviewer#'] = true,
	['interviewer-first#'] = true,
	['interviewer#-first'] = true,
	['interviewer-last#'] = true,
	['interviewer#-last'] = true,
	['interviewer-link#'] = true,
	['interviewer#-link'] = true,
	['interviewer-mask#'] = true,
	['interviewer#-mask'] = true,
	['last#'] = true,
	['subject#'] = true,
	['subject-link#'] = true,
	['subject#link'] = true,
	['subject#-link'] = true,
	['subjectlink#'] = true,
	['surname#'] = true,
	['translator#'] = true,
	['translator-first#'] = true,
	['translator#-first'] = true,
	['translator-last#'] = true,
	['translator#-last'] = true,
	['translator-given#'] = true,
	['translator#-given'] = true,
	['translator-surname#'] = true,
	['translator#-surname'] = true,
	['translator-link#'] = true,
	['translator#-link'] = true,
	['translator-mask#'] = true,
	['translator#-mask'] = true,
}

--[[--------------------------&lt; C I T E   A R X I V   S U P P O R T E D   P A R A M E T E R S &gt;----------------

This is an experiment that attempts to use validate() and a limited list of valid parameters to validate the
parameters provided in a cite arxiv template.  This method might be expanded to other templates being considered.

Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items can have three values:
	true - these parameters are valid and supported parameters
	false - these parameters are deprecated but still supported
	nil - these parameters are no longer supported (when setting a parameter to nil, leave a comment stating the reasons for invalidating the parameter)
	
]]

--[[
This is a list of parameters that once were but now are no longer supported:
	['ARXIV'] = nil,				-- not an initialization
	['version'] = nil,				-- this is the cite arxiv parameter; |version= still supported by other cs1|2 templates

]]

local arxiv_basic_arguments = {
	['arxiv'] = true,
	['class'] = true,															-- cite arxiv and arxiv identifiers
	['eprint'] = true,															-- cite arxiv and arxiv identifiers
}


--[[--------------------------&lt; C I T E   B I O R X I V   S U P P O R T E D   P A R A M E T E R S &gt;------------

This is an experiment that attempts to use validate() and a limited list of valid parameters to validate the
parameters provided in a cite biorxiv template.  This method might be expanded to other templates being considered.

Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items can have three values:
	true - these parameters are valid and supported parameters
	false - these parameters are deprecated but still supported
	nil - these parameters are no longer supported (when setting a parameter to nil, leave a comment stating the reasons for invalidating the parameter)
	
]]

local biorxiv_basic_arguments = {
	['biorxiv'] = true,
}


--[[--------------------------&lt; C I T E   C I T E S E E R X   S U P P O R T E D   P A R A M E T E R S &gt;--------

This is an experiment that attempts to use validate() and a limited list of valid parameters to validate the
parameters provided in a cite citeseerx template.  This method might be expanded to other templates being considered.

Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items can have three values:
	true - these parameters are valid and supported parameters
	false - these parameters are deprecated but still supported
	nil - these parameters are no longer supported (when setting a parameter to nil, leave a comment stating the reasons for invalidating the parameter)
	
]]

local citeseerx_basic_arguments = {
	['citeseerx'] = true,
}


--[[--------------------------&lt; L I M I T E D   S U P P O R T E D   P A R A M E T E R S &gt;----------------------

This is an experiment that attempts to use validate() and a limited list of valid parameters to validate the
parameters provided in a cite arxiv, cite biorxiv, or cite citeseerx templates.  These parameters are common to
all three templates

Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items can have three values:
	true - these parameters are valid and supported parameters
	false - these parameters are deprecated but still supported
	nil - these parameters are no longer supported (when setting a parameter to nil, leave a comment stating the reasons for invalidating the parameter)
	
]]

local limited_basic_arguments = {
	['at'] = true,
	['author'] = true,
	['author-first'] = true,
	['author-last'] = true,
	['authorlink'] = true,
	['author-link'] = true,
	['authormask'] = true,
	['author-mask'] = true,
	['authors'] = true,
	['collaboration'] = true,
	['date'] = true,
	['df'] = true,
	['display-authors'] = true,
	['first'] = true,
	['given'] = true,
	['language'] = true,
	['last'] = true,
	['lastauthoramp'] = true,
	['last-author-amp'] = true,
	['mode'] = true,
	['name-list-format'] = true,
	['nocat'] = true,
	['no-cat'] = true,
	['notracking'] = true,
	['no-tracking'] = true,
	['p'] = true,
	['page'] = true,
	['pages'] = true,
	['postscript'] = true,
	['pp'] = true,
	['quotation'] = true,
	['quote'] = true,
	['ref'] = true,
	['surname'] = true,
	['template-doc-demo'] = true,
	['title'] = true,
	['url'] = true,
	['URL'] = true,
	['vauthors'] = true,
	['year'] = true,
}
local limited_numbered_arguments = {
	['author#'] = true,
	['author-first#'] = true,
	['author#-first'] = true,
	['author-last#'] = true,
	['author#-last'] = true,
	['author-link#'] = true,
	['author#link'] = true,
	['author#-link'] = true,
	['authorlink#'] = true,
	['author-mask#'] = true,
	['author#mask'] = true,
	['author#-mask'] = true,
	['authormask#'] = true,
	['first#'] = true,
	['given#'] = true,
	['last#'] = true,
	['surname#'] = true,
}

return {
	basic_arguments = basic_arguments,
	numbered_arguments = numbered_arguments,
	limited_basic_arguments = limited_basic_arguments,
	limited_numbered_arguments = limited_numbered_arguments,
	arxiv_basic_arguments = arxiv_basic_arguments,
	biorxiv_basic_arguments = biorxiv_basic_arguments,
	citeseerx_basic_arguments = citeseerx_basic_arguments
};</text>
      <sha1>lp1v9j0dsfcvr8rl07rvlt9icnpqnzw</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Delink</title>
    <ns>828</ns>
    <id>38999128</id>
    <revision>
      <id>695173753</id>
      <parentid>617654635</parentid>
      <timestamp>2015-12-14T07:03:21Z</timestamp>
      <contributor>
        <username>The Earwig</username>
        <id>7418060</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Module:Delink]]": [[WP:High-risk templates|Highly visible template]]: 55,000+ mainspace transclusions ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="6545">-- This module de-links most wikitext.

require('Module:No globals')

local p = {}

local getArgs

local function delinkReversePipeTrick(s)
    if s:match("^%[%[|.*[|\n]") then -- Check for newlines or multiple pipes.
        return s
    else
        return s:match("%[%[|(.*)%]%]")
    end
end

local function delinkPipeTrick(s)
    local linkarea, display = "", ""
    -- We need to deal with colons, brackets, and commas, per [[Help:Pipe trick]].
    
    -- First, remove the text before the first colon, if any.
    if s:match(":") then
        s = s:match("%[%[.-:(.*)|%]%]")
    -- If there are no colons, grab all of the text apart from the square brackets and the pipe.
    else
        s = s:match("%[%[(.*)|%]%]")
    end
    
    -- Next up, brackets and commas.
    if s:match("%(.-%)$") then -- Brackets trump commas.
        s = s:match("(.-) ?%(.-%)$")
    elseif s:match(",") then -- If there are no brackets, display only the text before the first comma.
        s = s:match("(.-),.*$")
    end
    return s
end

local function delinkWikilink(s)
    local result = s
    -- Deal with the reverse pipe trick.
    if result:match("%[%[|") then
        return delinkReversePipeTrick(result)
    end
    
    result = mw.uri.decode(result, "PATH") -- decode percent-encoded entities. Leave underscores and plus signs.
    result = mw.text.decode(result, true) -- decode HTML entities.
    
    -- Check for bad titles. To do this we need to find the
    -- title area of the link, i.e. the part before any pipes.
    local titlearea
    if result:match("|") then -- Find if we're dealing with a piped link.
        titlearea = result:match("^%[%[(.-)|.*%]%]")
    else
        titlearea = result:match("^%[%[(.-)%]%]")
    end
    -- Check for bad characters.
    if mw.ustring.match(titlearea, "[%[%]&lt;&gt;{}%%%c\n]") then
        return s
    end
    
    -- Check for categories, interwikis, and files.
    local colonprefix = result:match("%[%[(.-):.*%]%]") or "" -- Get the text before the first colon.
    local ns = mw.site.namespaces[colonprefix] -- see if this is a known namespace
    if mw.language.isKnownLanguageTag(colonprefix)
    or ( ns and ( ns.canonicalName == "File" or ns.canonicalName == "Category" ) ) then
        return ""
    end
    
    -- Remove the colon if the link is using the [[Help:Colon trick]].
    if result:match("%[%[:") then
        result = "[[" .. result:match("%[%[:(.*%]%])")
    end
    
    -- Deal with links using the [[Help:Pipe trick]].
    if mw.ustring.match(result, "^%[%[[^|]*|%]%]") then
        return delinkPipeTrick(result)
    end
    
    -- Find the display area of the wikilink
    if result:match("|") then -- Find if we're dealing with a piped link.
        result = result:match("^%[%[.-|(.+)%]%]")
        -- Remove new lines from the display of multiline piped links,
        -- where the pipe is before the first new line.
        result = result:gsub("\n", "")
    else
        result = result:match("^%[%[(.-)%]%]")
    end

    return result
end

local function delinkURL(s)
    -- Assume we have already delinked internal wikilinks, and that
    -- we have been passed some text between two square brackets [foo].
    
    -- If the text contains a line break it is not formatted as a URL, regardless of other content.
    if s:match("\n") then
        return s
    end
    
    -- Check if the text has a valid URL prefix and at least one valid URL character.
    local valid_url_prefixes = {"//", "http://", "https://", "ftp://", "gopher://", "mailto:", "news:", "irc://"} 
    local url_prefix
    for i,v in ipairs(valid_url_prefixes) do
        if mw.ustring.match(s, '^%[' .. v ..'[^"%s].*%]' ) then
            url_prefix = v
            break
        end
    end
    
    -- Get display text
    if not url_prefix then
        return s
    end
    s = s:match("^%[" .. url_prefix .. "(.*)%]") -- Grab all of the text after the URL prefix and before the final square bracket.
    s = s:match('^.-(["&lt;&gt; ].*)') or "" -- Grab all of the text after the first URL separator character ("&lt;&gt; ).
    s = mw.ustring.match(s, "^%s*(%S.*)$") or "" -- If the separating character was a space, trim it off.
    
    local s_decoded = mw.text.decode(s, true)
    if mw.ustring.match(s_decoded, "%c") then
        return s
    else    
        return s_decoded
    end
end

local function delinkLinkClass(s, pattern, delinkFunction)
    if not type(s) == "string" then
        error("Attempt to de-link non-string input.", 2)
    end
    if not ( type(pattern) == "string" and mw.ustring.sub(pattern, 1, 1) == "^" ) then
        error('Invalid pattern detected. Patterns must begin with "^".', 2)
    end
    -- Iterate over the text string, and replace any matched text. using the 
    -- delink function. We need to iterate character by character rather 
    -- than just use gsub, otherwise nested links aren't detected properly.
    local result = ""
    while s ~= '' do
        -- Replace text using one iteration of gsub.
        s = mw.ustring.gsub(s, pattern, delinkFunction, 1)
        -- Append the left-most character to the result string.
        result = result .. mw.ustring.sub(s, 1, 1)
        s = mw.ustring.sub(s, 2, -1)
    end
    return result
end

function p._delink(args)
    local text = args[1] or ""
    if args.refs == "yes" then
        -- Remove any [[Help:Strip markers]] representing ref tags. In most situations 
        -- this is not a good idea - only use it if you know what you are doing!
        text = mw.ustring.gsub(text, "UNIQ%w*%-ref%-%d*%-QINU", "")
    end
    if not (args.comments == "no") then
        text = text:gsub("&lt;!%-%-.-%-%-&gt;", "") -- Remove html comments.
    end
    if not (args.wikilinks == "no") then
        text = delinkLinkClass(text, "^%[%[.-%]%]", delinkWikilink) -- De-link wikilinks.
    end
    if not (args.urls == "no") then
        text = delinkLinkClass(text, "^%[.-%]", delinkURL) -- De-link URLs.
    end
    if not (args.whitespace == "no") then
        -- Replace single new lines with a single space, but leave double new lines
        -- and new lines only containing spaces or tabs before a second new line.
        text = mw.ustring.gsub(text, "([^\n \t][ \t]*)\n([ \t]*[^\n \t])", "%1 %2")
        text = text:gsub("[ \t]+", " ") -- Remove extra tabs and spaces.
    end
    return text
end

function p.delink(frame)
    if not getArgs then
    	getArgs = require('Module:Arguments').getArgs
    end
    return p._delink(getArgs(frame, {wrappers = 'Template:Delink'}))
end

return p</text>
      <sha1>9uut60bk5e8nnvyxo8jbf7qt3b17a4v</sha1>
    </revision>
  </page>
  <page>
    <title>Module:EditAtWikidata</title>
    <ns>828</ns>
    <id>51464265</id>
    <revision>
      <id>844801220</id>
      <parentid>745414922</parentid>
      <timestamp>2018-06-07T07:44:55Z</timestamp>
      <contributor>
        <username>Johnuniq</username>
        <id>6036800</id>
      </contributor>
      <comment>per request at [[Wikipedia:Village pump (technical)#Module:EditAtWikidata needs a small tweak|VPT]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="1904">-- Module to display an icon with a tooltip such as "Edit this at Wikidata".
-- Icon will be linked to the Wikidata entry for the article where this is placed.
-- This message is only displayed if a local_parameter is not supplied
-- i.e. when called from a template, it can be coded not to display the message
-- when a local parameter is in use, preventing the value form Wikidata being fetched.
-- The qid of a Wikidata entry can optionally be supplied for testing outside the article.
-- Usage:
-- {{#invoke:EditAtWikidata|showMessage|local_parameter}}
-- {{#invoke:EditAtWikidata|showMessage|qid=&lt;ArticleID&gt;|local_parameter}}

local p = {}

local i18n =
{
	["message"] = "Edit this at Wikidata"
}

p.showMessage = function(frame)
	-- There may be a local parameter supplied, if it's blank, set it to nil
	local local_parm =  mw.text.trim(frame.args[1] or "")
	if local_parm and (local_parm == "") then local_parm = nil end

	-- If there is a local parameter used, we don't want to display the message
	if local_parm then return nil end

	-- Can take a named parameter |qid which is the Wikidata ID for the article.
	-- This will not normally be used except for testing outside the article.
	local qid = frame.args.qid
	if qid and (qid == "") then qid = nil end

	-- The module can take a parameter pid=
	-- which will create a link to that property in the Wikidata entry for the article
	local propertyID = mw.text.trim(frame.args.pid or "")

	-- Get the object containing all the claims for the article
	local entity = mw.wikibase.getEntityObject(qid)
	if entity then
		local thisQid
		if qid then thisQid = qid else thisQid = entity.id end
		return
			" [[File:Blue pencil.svg |frameless |text-top |10px |alt=" ..
			i18n.message ..
			" |link=https://www.wikidata.org/wiki/" ..
			thisQid ..
			(propertyID == "" and "" or ("#" .. propertyID)) ..
			"|" .. i18n.message .. "]]"
	end
end

return p</text>
      <sha1>tf0jg7tkwd5evi97l5xi5yxgpt4ghsq</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Error</title>
    <ns>828</ns>
    <id>38948927</id>
    <revision>
      <id>750709040</id>
      <parentid>636708920</parentid>
      <timestamp>2016-11-21T11:11:11Z</timestamp>
      <contributor>
        <username>Materialscientist</username>
        <id>7852030</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Error]]": [[WP:High-risk templates|Highly visible template]] ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="1129">-- This module implements {{error}}.

local p = {}

local function _error(args)
    local tag = mw.ustring.lower(tostring(args.tag))

    -- Work out what html tag we should use.
    if not (tag == 'p' or tag == 'span' or tag == 'div') then
        tag = 'strong'
    end

    -- Generate the html.
    return tostring(mw.html.create(tag)
        :addClass('error')
        :wikitext(tostring(args.message or args[1] or error('no message specified', 2)))
    )
end

function p.error(frame)
    local args
    if type(frame.args) == 'table' then
        -- We're being called via #invoke. The args are passed through to the module
        -- from the template page, so use the args that were passed into the template.
        args = frame.args
    else
        -- We're being called from another module or from the debug console, so assume
        -- the args are passed in directly.
        args = frame
    end
    -- if the message parameter is present but blank, change it to nil so that Lua will
    -- consider it false.
    if args.message == "" then
        args.message = nil
    end
    return _error(args)
end

return p</text>
      <sha1>swpvwjcdmj2mkkmx9f7rbsdrfsnmirh</sha1>
    </revision>
  </page>
  <page>
    <title>Module:File link</title>
    <ns>828</ns>
    <id>42903140</id>
    <revision>
      <id>638642222</id>
      <parentid>638639021</parentid>
      <timestamp>2014-12-18T14:05:07Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>when calling this from wikitext use a more readable error message for missing file parameters</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="2544">-- This module provides a library for formatting file wikilinks.

local yesno = require('Module:Yesno')
local checkType = require('libraryUtil').checkType

local p = {}

function p._main(args)
	checkType('_main', 1, args, 'table')

	-- This is basically libraryUtil.checkTypeForNamedArg, but we are rolling our
	-- own function to get the right error level.
	local function checkArg(key, val, level)
		if type(val) ~= 'string' then
			error(string.format(
				"type error in '%s' parameter of '_main' (expected string, got %s)",
				key, type(val)
			), level)
		end
	end

	local ret = {}

	-- Adds a positional parameter to the buffer.
	local function addPositional(key)
		local val = args[key]
		if not val then
			return nil
		end
		checkArg(key, val, 4)
		ret[#ret + 1] = val
	end

	-- Adds a named parameter to the buffer. We assume that the parameter name
	-- is the same as the argument key.
	local function addNamed(key)
		local val = args[key]
		if not val then
			return nil
		end
		checkArg(key, val, 4)
		ret[#ret + 1] = key .. '=' .. val
	end

	-- Filename
	checkArg('file', args.file, 3)
	ret[#ret + 1] = 'File:' .. args.file

	-- Format
	if args.format then
		checkArg('format', args.format)
		if args.formatfile then
			checkArg('formatfile', args.formatfile)
			ret[#ret + 1] = args.format .. '=' .. args.formatfile
		else
			ret[#ret + 1] = args.format
		end
	end

	-- Border
	if yesno(args.border) then
		ret[#ret + 1] = 'border'
	end

	addPositional('location')
	addPositional('alignment')
	addPositional('size')
	addNamed('upright')
	addNamed('link')
	addNamed('alt')
	addNamed('page')
	addNamed('class')
	addNamed('lang')
	addNamed('start')
	addNamed('end')
	addNamed('thumbtime')
	addPositional('caption')

	return string.format('[[%s]]', table.concat(ret, '|'))
end

function p.main(frame)
	local origArgs = require('Module:Arguments').getArgs(frame, {
		wrappers = 'Template:File link'
	})
	if not origArgs.file then
		error("'file' parameter missing from [[Template:File link]]", 0)
	end

	-- Copy the arguments that were passed to a new table to avoid looking up
	-- every possible parameter in the frame object.
	local args = {}
	for k, v in pairs(origArgs) do
		-- Make _BLANK a special argument to add a blank parameter. For use in
		-- conditional templates etc. it is useful for blank arguments to be
		-- ignored, but we still need a way to specify them so that we can do
		-- things like [[File:Example.png|link=]].
		if v == '_BLANK' then
			v = ''
		end
		args[k] = v
	end
	return p._main(args)
end

return p</text>
      <sha1>bzc22v133v9z5yc4aisazripn6l94p8</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Hatnote</title>
    <ns>828</ns>
    <id>42498502</id>
    <revision>
      <id>779487706</id>
      <parentid>726656423</parentid>
      <timestamp>2017-05-09T05:20:32Z</timestamp>
      <contributor>
        <username>JJMC89</username>
        <id>24812038</id>
      </contributor>
      <comment>Add navigation-not-searchable class per [[Special:Permalink/779475248#Add navigation-not-searchable class|request]] (also see [[phab:T164781|T164781]])</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="6703">--------------------------------------------------------------------------------
--                              Module:Hatnote                                --
--                                                                            --
-- This module produces hatnote links and links to related articles. It       --
-- implements the {{hatnote}} and {{format link}} meta-templates and includes --
-- helper functions for other Lua hatnote modules.                            --
--------------------------------------------------------------------------------

local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType
local mArguments -- lazily initialise [[Module:Arguments]]
local yesno -- lazily initialise [[Module:Yesno]]

local p = {}

--------------------------------------------------------------------------------
-- Helper functions
--------------------------------------------------------------------------------

local function getArgs(frame)
	-- Fetches the arguments from the parent frame. Whitespace is trimmed and
	-- blanks are removed.
	mArguments = require('Module:Arguments')
	return mArguments.getArgs(frame, {parentOnly = true})
end

local function removeInitialColon(s)
	-- Removes the initial colon from a string, if present.
	return s:match('^:?(.*)')
end

function p.findNamespaceId(link, removeColon)
	-- Finds the namespace id (namespace number) of a link or a pagename. This
	-- function will not work if the link is enclosed in double brackets. Colons
	-- are trimmed from the start of the link by default. To skip colon
	-- trimming, set the removeColon parameter to false.
	checkType('findNamespaceId', 1, link, 'string')
	checkType('findNamespaceId', 2, removeColon, 'boolean', true)
	if removeColon ~= false then
		link = removeInitialColon(link)
	end
	local namespace = link:match('^(.-):')
	if namespace then
		local nsTable = mw.site.namespaces[namespace]
		if nsTable then
			return nsTable.id
		end
	end
	return 0
end

function p.formatPages(...)
	-- Formats a list of pages using formatLink and returns it as an array. Nil
	-- values are not allowed.
	local pages = {...}
	local ret = {}
	for i, page in ipairs(pages) do
		ret[i] = p._formatLink(page)
	end
	return ret
end

function p.formatPageTables(...)
	-- Takes a list of page/display tables and returns it as a list of
	-- formatted links. Nil values are not allowed.
	local pages = {...}
	local links = {}
	for i, t in ipairs(pages) do
		checkType('formatPageTables', i, t, 'table')
		local link = t[1]
		local display = t[2]
		links[i] = p._formatLink(link, display)
	end
	return links
end

function p.makeWikitextError(msg, helpLink, addTrackingCategory, title)
	-- Formats an error message to be returned to wikitext. If
	-- addTrackingCategory is not false after being returned from
	-- [[Module:Yesno]], and if we are not on a talk page, a tracking category
	-- is added.
	checkType('makeWikitextError', 1, msg, 'string')
	checkType('makeWikitextError', 2, helpLink, 'string', true)
	yesno = require('Module:Yesno')
	title = title or mw.title.getCurrentTitle()
	-- Make the help link text.
	local helpText
	if helpLink then
		helpText = ' ([[' .. helpLink .. '|help]])'
	else
		helpText = ''
	end
	-- Make the category text.
	local category
	if not title.isTalkPage and yesno(addTrackingCategory) ~= false then
		category = 'Hatnote templates with errors'
		category = string.format(
			'[[%s:%s]]',
			mw.site.namespaces[14].name,
			category
		)
	else
		category = ''
	end
	return string.format(
		'&lt;strong class="error"&gt;Error: %s%s.&lt;/strong&gt;%s',
		msg,
		helpText,
		category
	)
end

function p.disambiguate(page, disambiguator)
	-- Formats a page title with a disambiguation parenthetical,
	-- i.e. "Example" → "Example (disambiguation)".
	checkType('disambiguate', 1, page, 'string')
	checkType('disambiguate', 2, disambiguator, 'string', true)
	disambiguator = disambiguator or 'disambiguation'
	return string.format('%s (%s)', page, disambiguator)
end

--------------------------------------------------------------------------------
-- Format link
--
-- Makes a wikilink from the given link and display values. Links are escaped
-- with colons if necessary, and links to sections are detected and displayed
-- with " § " as a separator rather than the standard MediaWiki "#". Used in
-- the {{format hatnote link}} template.
--------------------------------------------------------------------------------

function p.formatLink(frame)
	local args = getArgs(frame)
	local link = args[1]
	local display = args[2]
	if not link then
		return p.makeWikitextError(
			'no link specified',
			'Template:Format hatnote link#Errors',
			args.category
		)
	end
	return p._formatLink(link, display)
end

function p._formatLink(link, display)
	checkType('_formatLink', 1, link, 'string')
	checkType('_formatLink', 2, display, 'string', true)

	-- Remove the initial colon for links where it was specified manually.
	link = removeInitialColon(link)

	-- Find whether a faux display value has been added with the {{!}} magic
	-- word.
	if not display then
		local prePipe, postPipe = link:match('^(.-)|(.*)$')
		link = prePipe or link
		display = postPipe
	end

	-- Find the display value.
	if not display then
		local page, section = link:match('^(.-)#(.*)$')
		if page then
			display = page .. ' §&amp;nbsp;' .. section
		end
	end

	-- Assemble the link.
	if display then
		return string.format(
			'[[:%s|%s]]',
			string.gsub(link, '|(.*)$', ''), --display overwrites manual piping
			display
		)
	else
		return string.format('[[:%s]]', link)
	end
end

--------------------------------------------------------------------------------
-- Hatnote
--
-- Produces standard hatnote text. Implements the {{hatnote}} template.
--------------------------------------------------------------------------------

function p.hatnote(frame)
	local args = getArgs(frame)
	local s = args[1]
	local options = {}
	if not s then
		return p.makeWikitextError(
			'no text specified',
			'Template:Hatnote#Errors',
			args.category
		)
	end
	options.extraclasses = args.extraclasses
	options.selfref = args.selfref
	return p._hatnote(s, options)
end

function p._hatnote(s, options)
	checkType('_hatnote', 1, s, 'string')
	checkType('_hatnote', 2, options, 'table', true)
	options = options or {}
	local classes = {'hatnote', 'navigation-not-searchable'}
	local extraclasses = options.extraclasses
	local selfref = options.selfref
	if type(extraclasses) == 'string' then
		classes[#classes + 1] = extraclasses
	end
	if selfref then
		classes[#classes + 1] = 'selfref'
	end
	return string.format(
		'&lt;div role="note" class="%s"&gt;%s&lt;/div&gt;',
		table.concat(classes, ' '),
		s
	)
end

return p</text>
      <sha1>c5z31x97gktc3q7nnp8mf48t01l4qst</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Hatnote list</title>
    <ns>828</ns>
    <id>50085079</id>
    <revision>
      <id>833955078</id>
      <parentid>833954678</parentid>
      <timestamp>2018-04-03T05:19:54Z</timestamp>
      <contributor>
        <username>Galobtter</username>
        <id>19502780</id>
      </contributor>
      <comment>fix</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="7209">--------------------------------------------------------------------------------
--                           Module:Hatnote list                              --
--                                                                            --
-- This module produces and formats lists for use in hatnotes. In particular, --
-- it implements the for-see list, i.e. lists of "For X, see Y" statements,   --
-- as used in {{about}}, {{redirect}}, and their variants. Also introduced    --
-- are andList &amp; orList helpers for formatting lists with those conjunctions. --
--------------------------------------------------------------------------------

local mArguments --initialize lazily
local mHatnote = require('Module:Hatnote')
local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType
local p = {}

--------------------------------------------------------------------------------
-- List stringification helper functions
--
-- These functions are used for stringifying lists, usually page lists inside
-- the "Y" portion of "For X, see Y" for-see items.
--------------------------------------------------------------------------------

--default options table used across the list stringification functions
local stringifyListDefaultOptions = {
	conjunction = "and",
	separator = ",",
	altSeparator = ";",
	space = " ",
	formatted = false
}

-- Stringifies a list generically; probably shouldn't be used directly
function stringifyList(list, options)
	-- Type-checks, defaults, and a shortcut
	checkType("stringifyList", 1, list, "table")
	if #list == 0 then return nil end
	checkType("stringifyList", 2, options, "table", true)
	options = options or {}
	for k, v in pairs(stringifyListDefaultOptions) do
		if options[k] == nil then options[k] = v end
	end
	local s = options.space
	-- Format the list if requested
	if options.formatted then list = mHatnote.formatPages(unpack(list)) end
	-- Set the separator; if any item contains it, use the alternate separator
	local separator = options.separator
	--searches display text only
	function searchDisp(t, f)
		return string.find(string.sub(t, (string.find(t, '|') or 0) + 1), f)
	end
	for k, v in pairs(list) do
		if searchDisp(v, separator) then
			separator = options.altSeparator
			break
		end
	end
	-- Set the conjunction, apply Oxford comma, and force a comma if #1 has "§"
	local conjunction = s .. options.conjunction .. s
	if #list == 2 and searchDisp(list[1], "§") or #list &gt; 2 then
		conjunction = separator .. conjunction
	end
	-- Return the formatted string
	return mw.text.listToText(list, separator .. s, conjunction)
end

--DRY function
function conjList (conj, list, fmt)
	return stringifyList(list, {conjunction = conj, formatted = fmt})
end

-- Stringifies lists with "and" or "or"
function p.andList (...) return conjList("and", ...) end
function p.orList (...) return conjList("or", ...) end

--------------------------------------------------------------------------------
-- For see
--
-- Makes a "For X, see [[Y]]." list from raw parameters. Intended for the
-- {{about}} and {{redirect}} templates and their variants.
--------------------------------------------------------------------------------

--default options table used across the forSee family of functions
local forSeeDefaultOptions = {
	andKeyword = 'and',
	title = mw.title.getCurrentTitle().text,
	otherText = 'other uses',
	forSeeForm = 'For %s, see %s.',
}

--Collapses duplicate punctuation
function punctuationCollapse (text)
	local replacements = {
		["%.%.$"] = ".",
		["%?%.$"] = "?",
		["%!%.$"] = "!",
		["%.%]%]%.$"] = ".]]",
		["%?%]%]%.$"] = "?]]",
		["%!%]%]%.$"] = "!]]"
	}
	for k, v in pairs(replacements) do text = string.gsub(text, k, v) end
	return text
end

-- Structures arguments into a table for stringification, &amp; options
function p.forSeeArgsToTable (args, from, options)
	-- Type-checks and defaults
	checkType("forSeeArgsToTable", 1, args, 'table')
	checkType("forSeeArgsToTable", 2, from, 'number', true)
	from = from or 1
	checkType("forSeeArgsToTable", 3, options, 'table', true)
	options = options or {}
	for k, v in pairs(forSeeDefaultOptions) do
		if options[k] == nil then options[k] = v end
	end
	-- maxArg's gotten manually because getArgs() and table.maxn aren't friends
	local maxArg = 0
	for k, v in pairs(args) do
		if type(k) == 'number' and k &gt; maxArg then maxArg = k end
	end
	-- Structure the data out from the parameter list:
	-- * forTable is the wrapper table, with forRow rows
	-- * Rows are tables of a "use" string &amp; a "pages" table of pagename strings
	-- * Blanks are left empty for defaulting elsewhere, but can terminate list
	local forTable = {}
	local i = from
	local terminated = false
	-- If there is extra text, and no arguments are given, give nil value
	-- to not produce default of "For other uses, see foo (disambiguation)"
	if options.extratext and i &gt; maxArg then return nil end
	-- Loop to generate rows
	repeat
		-- New empty row
		local forRow = {}
		-- On blank use, assume list's ended &amp; break at end of this loop
		forRow.use = args[i]
		if not args[i] then terminated = true end
		-- New empty list of pages
		forRow.pages = {}
		-- Insert first pages item if present
		table.insert(forRow.pages, args[i + 1])
		-- If the param after next is "and", do inner loop to collect params
		-- until the "and"'s stop. Blanks are ignored: "1|and||and|3" → {1, 3}
		while args[i + 2] == options.andKeyword do
			if args[i + 3] then 
				table.insert(forRow.pages, args[i + 3])
			end
			-- Increment to next "and"
			i = i + 2
		end
		-- Increment to next use
		i = i + 2
		-- Append the row
		table.insert(forTable, forRow)
	until terminated or i &gt; maxArg
	
	return forTable
end

-- Stringifies a table as formatted by forSeeArgsToTable
function p.forSeeTableToString (forSeeTable, options)
	-- Type-checks and defaults
	checkType("forSeeTableToString", 1, forSeeTable, "table", true)
	checkType("forSeeTableToString", 2, options, "table", true)
	options = options or {}
	for k, v in pairs(forSeeDefaultOptions) do
		if options[k] == nil then options[k] = v end
	end
	-- Stringify each for-see item into a list
	local strList = {}
	if forSeeTable then
		for k, v in pairs(forSeeTable) do
			local useStr = v.use or options.otherText
			local pagesStr = p.andList(v.pages, true) or mHatnote._formatLink(mHatnote.disambiguate(options.title))
			local forSeeStr = string.format(options.forSeeForm, useStr, pagesStr)
			forSeeStr = punctuationCollapse(forSeeStr)
			table.insert(strList, forSeeStr)
		end
	end
	if options.extratext then table.insert(strList, punctuationCollapse(options.extratext..'.')) end
	-- Return the concatenated list
	return table.concat(strList, ' ')
end

-- Produces a "For X, see [[Y]]" string from arguments. Expects index gaps
-- but not blank/whitespace values. Ignores named args and args &lt; "from".
function p._forSee (args, from, options)
	local forSeeTable = p.forSeeArgsToTable(args, from, options)
	return p.forSeeTableToString(forSeeTable, options)
end

-- As _forSee, but uses the frame.
function p.forSee (frame, from, options)
	mArguments = require('Module:Arguments')
	return p._forSee(mArguments.getArgs(frame), from, options)
end

return p</text>
      <sha1>2hmyydi47hep0hexbh8sw7ybxc07m5k</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Icon</title>
    <ns>828</ns>
    <id>45181164</id>
    <revision>
      <id>643803192</id>
      <parentid>643801146</parentid>
      <timestamp>2015-01-23T10:26:03Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:Icon: [[WP:High-risk templates|High-risk Lua module]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="659">-- This module implements [[Template:Icon]].

local data = mw.loadData('Module:Icon/data')

local p = {}

function p._main(args)
	local code = args.class or args[1]
	local iconData
	if code then
		code = code:match('^%s*(.-)%s*$'):lower() -- trim whitespace and put in lower case
		iconData = data[code]
	end
	if not iconData then
		iconData = data._DEFAULT
	end
	return string.format(
		'[[File:%s%s|%s|link=]]',
		iconData.image,
		iconData.tooltip and '|' .. iconData.tooltip or '',
		args.size or '16x16px'
	)
end

function p.main(frame)
	local args = {}
	for k, v in pairs(frame:getParent().args) do
		args[k] = v
	end
	return p._main(args)
end

return p</text>
      <sha1>4z7aot4f3pniw3w3az56t0kryggws40</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Icon/data</title>
    <ns>828</ns>
    <id>45181103</id>
    <revision>
      <id>824092874</id>
      <parentid>796570470</parentid>
      <timestamp>2018-02-05T07:45:43Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <minor/>
      <comment>icon for needed-class</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="8778">-- This module stores icon data for [[Module:Icon]].

--------------------------------------------------------------------------------
-- Icon data
--------------------------------------------------------------------------------

local data = {
	fa = {
		image = "Featured article star.svg",
		tooltip = "Featured article",
	},
	far = {
		image = "Cscr-star piece.png",
		tooltip = "Featured article review",
	},
	farc = {
		image = "Cscr-star piece.png",
		tooltip = "Featured article removal candidate",
	},
	ffa = {
		aliases = {"dfa"},
		image = "Featured article star - cross.svg",
		tooltip = "Former featured article",
	},
	fac = {
		aliases = {"fan"},
		image = "Cscr-candidate.svg",
		tooltip = "Featured article candidate",
	},
	ffac = {
		aliases = {"nofa"},
		image = "Featured article star - cross.svg",
		tooltip = "Failed featured article candidate",
	},
	fl = {
		image = "Featured article star.svg",
		tooltip = "Featured list",
	},
	flrc = {
		aliases = {"flr"},
		image = "Cscr-star piece.png",
		tooltip = "Featured list removal candidate",
	},
	ffl = {
		aliases = {"dfl"},
		image = "Cscr-featured-strike.svg",
		tooltip = "Former featured list",
	},
	flc = {
		aliases = {"fln"},
		image = "Cscr-candidate.svg",
		tooltip = "Featured list candidate",
	},
	fflc = {
		aliases = {"nofl"},
		image = "Cscr-former.svg",
		tooltip = "Failed featured list candidate",
	},
	a = {
		image = "Symbol a class.svg",
		tooltip = "A-Class article",
	},
	dac = {
		aliases = {"daa"},
		image = "Symbol unsupport A vote.svg",
		tooltip = "Demoted A-Class article",
	},
	acc = {
		aliases = {"acn", "aac"},
		image = "A candidate.svg",
		tooltip = "A-Class article candidate",
	},
	noac = {
		aliases = {"faac"},
		image = "Symbol unsupport A vote.svg",
		tooltip = "Failed A-Class article candidate",
	},
	ga = {
		image = "Symbol support vote.svg",
		tooltip = "Good article",
	},
	gar = {
		image = "GA Candidate Neutral vote(ChaosNil).svg",
		tooltip = "Good article reassessment",
	},
	dga = {
		image = "Symbol unsupport vote.svg",
		tooltip = "Delisted good article",
	},
	gan = {
		aliases = {"gac"},
		image = "GA candidate.svg",
		tooltip = "Good article nominee",
	},
	ga2 = {
		image = "Symbol neutral vote.svg",
		tooltip = "Good article, 2nd opinion",
	},
	gah = {
		image = "Symbol wait.svg",
		tooltip = "Good article on hold",
	},
	fgan = {
		aliases = {"noga", "gaf", "gf"},
		image = "Symbol oppose vote.svg",
		tooltip = "Failed good article nominee",
	},
	fp = {
		image = "Cscr-featured.svg",
		tooltip = "Featured picture",
	},
	fpc = {
		aliases = {"fpn"},
		image = "Cscr-candidate.svg",
		tooltip = "Featured picture candidate",
	},
	ffp = {
		image = "Cscr-former.svg",
		tooltip = "Former featured picture",
	},
	vp = {
		image = "ENWP VP Logo.svg",
		tooltip = "Valued picture",
	},
	vpc = {
		image = "Valued pics 1.svg",
		tooltip = "Valued picture candidate",
	},
	fs = {
		image = "Cscr-featured.svg",
		tooltip = "Featured sound",
	},
	ffs = {
		image = "Cscr-former.svg",
		tooltip = "Former featured sound",
	},
	fsc = {
		image = "Cscr-candidate.svg",
		tooltip = "Featured sound candidate",
	},
	fpo = {
		image = "Linecons big-star.svg",
		tooltip = "Before the featured portal process ceased in 2017, this had been designated as a featured portal.",
	},
	fpor = {
		image = "Cscr-star piece.png",
		tooltip = "Featured portal review",
	},
	ffpo = {
		image = "Featured article star - cross.svg",
		tooltip = "Former featured portal",
	},
	fpoc = {
		image = "Cscr-candidate.svg",
		tooltip = "Featured portal candidate",
	},
	ft = {
		image = "Cscr-featuredtopic.svg",
		tooltip = "Featured topic",
	},
	ftrc = {
		image = "Cscr-star piece.png",
		tooltip = "Featured topic removal candidate",
	},
	fft = {
		aliases = {"dft"},
		image = "DFT candidate_cluster.svg",
		tooltip = "Former featured topic",
	},
	ftc = {
		aliases = {"ftn"},
		image = "FT candidate cluster.svg",
		tooltip = "Featured topic candidate",
	},
	gt = {
		image = "Support cluster.svg",
		tooltip = "Good topic",
	},
	gtrc = {
		image = "Symbol unsupport vote.svg",
		tooltip = "Good topic removal candidate",
	},
	gtc = {
		aliases = {"gtn"},
		image = "GA candidate cluster.svg",
		tooltip = "Good topic candidate",
	},
	bplus = {
		aliases = {"b+"},
		image = "Symbol bplus class.svg",
		tooltip = "Bplus-Class article",
	},
	b = {
		image = "Symbol b class.svg",
		tooltip = "B-Class article",
	},
	br = {
		aliases = {"bcr"},
		image = "Bclass-checklist.svg",
		tooltip = "B-Class review",
	},
	c = {
		image = "Symbol c class.svg",
		tooltip = "C-Class article",
	},
	start = {
		image = "Symbol start class.svg",
		tooltip = "Start-Class article",
	},
	stub = {
		image = "Symbol stub class.svg",
		tooltip = "Stub-Class article",
	},
	list = {
		aliases = {"comparison"},
		image = "Symbol list class.svg",
		tooltip = "List-Class article",
	},
	no = {
		image = "Crystal button cancel.svg",
		tooltip = "Unknown-Class article",
	},
	book = {
		image = "Symbol book class2.svg",
		tooltip = "Wikipedia book",
	},
	category = {
		aliases = {"cat", "categ"},
		image = "Folder Hexagonal Icon.svg",
		tooltip = "Category",
	},
	disambiguation = {
		aliases = {"dab", "disamb", "disambig"},
		image = "Symbol dab class.svg",
		tooltip = "Disambiguation page",
	},
	image = {
		aliases = {"file"},
		image = "Video-x-generic.svg",
		tooltip = "File",
	},
    needed = {
        image = "Symbol needed class.svg",
        tooltip = "Needed article",
    },
	portal = {
		image = "Portal-puzzle.svg",
		tooltip = "Portal",
	},
	project = {
		image = "Symbol information vote.svg",
		tooltip = "Project page",
	},
	redirect = {
		aliases = {"red", "redir"},
		image = "Symbol redirect vote2.svg",
		tooltip = "Redirect",
	},
	template = {
		aliases = {"temp", "templ"},
		image = "Symbol template class.svg",
		tooltip = "Template",
	},
	essay = {
		image = "Essay.svg",
		tooltip = "Essay",
	},
	na = {
		image = "Symbol neutral vote.svg",
		tooltip = "Non-article page",
	},
	aa = {
		image = "Yes check.svg",
		tooltip = "Audited article of limited subject matter",
	},
	da = {
		image = "Symbol oppose vote.svg",
		tooltip = "Demoted article",
	},
	dyk = {
		image = "Symbol question.svg",
		tooltip = "Did You Know?",
	},
	dyk2 = {
		image = "DYK questionmark icon.svg",
		tooltip = "Did You Know?",
	},
	pr = {
		image = "Nuvola apps kedit.png",
		tooltip = "Peer review",
	},
	ppr = {
		image = "Nuvola apps kedit.png",
		tooltip = "Portal peer review",
	},
	q = {
		aliases = {"question"},
		image = "Symbol question.svg",
		tooltip = "Question",
	},
	qi = {
		image = "Quality images logo.svg",
		tooltip = "Quality image on Wikimedia Commons",
	},
	vi = {
		image = "Valued image seal.svg",
		tooltip = "Valued image on Wikimedia Commons",
	},
	tfa = {
		image = "Wikipedia-logo.svg",
		tooltip = "Today's Featured Article",
	},
	tfl = {
		image = "Wikipedia-logo.svg",
		tooltip = "Today's Featured List",
	},
	itn = {
		image = "Globe current.svg",
		tooltip = "In The News",
	},
	otd = {
		image = "Nuvola apps date.svg",
		tooltip = "On This Day",
	},
	wikiproject = {
		image = "People icon.svg",
		tooltip = "WikiProject",
	},
	wikipedia = {
		image = "Wikipedia-logo.svg",
		tooltip = "Wikipedia page",
	},
	commons = {
		image = "Commons-logo.svg",
		tooltip = "Commons page",
	},
	wikiquote = {
		image = "Wikiquote-logo.svg",
		tooltip = "Wikiquote page",
	},
	wikiversity = {
		image = "Wikiversity-logo.svg",
		tooltip = "Wikiversity page",
	},
	wikibooks = {
		image = "Wikibooks-logo.svg",
		tooltip = "Wikibooks page",
	},
	wikisource = {
		image = "Wikisource-logo.svg",
		tooltip = "Wikisource page",
	},
	wiktionary = {
		image = "Wiktionary-logo.svg",
		tooltip = "Wiktionary page",
	},
	wikinews = {
		image = "Wikinews-logo.svg",
		tooltip = "Wikinews page",
	},
	wikispecies = {
		image = "Wikispecies-logo.svg",
		tooltip = "Wikispecies page",
	},
	wikidata = {
		image = "Wikidata-logo.svg",
		tooltip = "Wikidata page",
	},
	wikivoyage = {
		image = "Wikivoyage-logo.svg",
		tooltip = "Wikivoyage page",
	},
	meta = {
		image = "Wikimedia Community Logo.svg",
		tooltip = "Meta-wiki page",
	},
	four = {
		image = "Four Award.svg",
		tooltip = "Four Award",
	},
	million = {
		image = "Million award logo.svg",
		tooltip = "Million Award",
	},
	_DEFAULT = {
		image = "Symbol question.svg",
	}
}

--------------------------------------------------------------------------------
-- End icon data
--------------------------------------------------------------------------------

-- Make aliases work the same as normal keys, and remove the "aliases" subtables. 
for k, t in pairs(data) do
	if t.aliases then
		for i, alias in ipairs(t.aliases) do
			data[alias] = t
		end
		t.aliases = nil
	end
	data[k] = t
end

return data</text>
      <sha1>6ebgx2fb4bqaz8hcalvyydbd3r8kzso</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Infobox</title>
    <ns>828</ns>
    <id>38808424</id>
    <revision>
      <id>849197215</id>
      <parentid>849089853</parentid>
      <timestamp>2018-07-07T07:04:41Z</timestamp>
      <contributor>
        <username>Jc86035</username>
        <id>17245768</id>
      </contributor>
      <minor/>
      <comment>the three other types of lists as well</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="15742">--
-- This module implements {{Infobox}}
--
 
local p = {}

local navbar = require('Module:Navbar')._navbar

local args = {}
local origArgs
local root

local function notempty( s ) return s and s:match( '%S' ) end

local function fixChildBoxes(sval, tt)
	if notempty(sval) then
		local marker = '&lt;span class=special_infobox_marker&gt;'
		local s = sval
		s = mw.ustring.gsub(s, '(&lt;%s*[Tt][Rr])', marker .. '%1')
		s = mw.ustring.gsub(s, '(&lt;/[Tt][Rr]%s*&gt;)', '%1' .. marker)
		if s:match(marker) then
			s = mw.ustring.gsub(s, marker .. '%s*' .. marker, '')
			s = mw.ustring.gsub(s, '([\r\n]|-[^\r\n]*[\r\n])%s*' .. marker, '%1')
			s = mw.ustring.gsub(s, marker .. '%s*([\r\n]|-)', '%1')
			s = mw.ustring.gsub(s, '(&lt;/[Cc][Aa][Pp][Tt][Ii][Oo][Nn]%s*&gt;%s*)' .. marker, '%1')
			s = mw.ustring.gsub(s, '(&lt;%s*[Tt][Aa][Bb][Ll][Ee][^&lt;&gt;]*&gt;%s*)' .. marker, '%1')
			s = mw.ustring.gsub(s, '^(%{|[^\r\n]*[\r\n]%s*)' .. marker, '%1')
			s = mw.ustring.gsub(s, '([\r\n]%{|[^\r\n]*[\r\n]%s*)' .. marker, '%1')
			s = mw.ustring.gsub(s,  marker .. '(%s*&lt;/[Tt][Aa][Bb][Ll][Ee]%s*&gt;)', '%1')
			s = mw.ustring.gsub(s,  marker .. '(%s*\n|%})', '%1')
		end
		if s:match(marker) then
			local subcells = mw.text.split(s, marker)
			s = ''
			for k = 1, #subcells do
				if k == 1 then
					s = s .. subcells[k] .. '&lt;/' .. tt .. '&gt;&lt;/tr&gt;'
				elseif k == #subcells then
					local rowstyle = ' style="display:none"'
					if notempty(subcells[k]) then rowstyle = ''	end
					s = s .. '&lt;tr' .. rowstyle ..'&gt;&lt;' .. tt .. ' colspan=2&gt;\n' .. subcells[k]
				elseif notempty(subcells[k]) then
					if (k % 2) == 0 then
						s = s .. subcells[k]
					else
						s = s .. '&lt;tr&gt;&lt;' .. tt .. ' colspan=2&gt;\n' .. subcells[k] .. '&lt;/' .. tt .. '&gt;&lt;/tr&gt;'
					end
				end
			end
		end
		-- the next two lines add a newline at the end of lists for the PHP parser
		-- https://en.wikipedia.org/w/index.php?title=Template_talk:Infobox_musical_artist&amp;oldid=849054481
		s = mw.ustring.gsub(s, '([\r\n][%*#;:][^\r\n]*)$', '%1\n')
		s = mw.ustring.gsub(s, '^([%*#;:][^\r\n]*)$', '%1\n')
		return s
	else
		return sval
	end
end

local function union(t1, t2)
    -- Returns the union of the values of two tables, as a sequence.
    local vals = {}
    for k, v in pairs(t1) do
        vals[v] = true
    end
    for k, v in pairs(t2) do
        vals[v] = true
    end
    local ret = {}
    for k, v in pairs(vals) do
        table.insert(ret, k)
    end
    return ret
end

local function getArgNums(prefix)
    -- Returns a table containing the numbers of the arguments that exist
    -- for the specified prefix. For example, if the prefix was 'data', and
    -- 'data1', 'data2', and 'data5' exist, it would return {1, 2, 5}.
    local nums = {}
    for k, v in pairs(args) do
        local num = tostring(k):match('^' .. prefix .. '([1-9]%d*)$')
        if num then table.insert(nums, tonumber(num)) end
    end
    table.sort(nums)
    return nums
end

local function addRow(rowArgs)
    -- Adds a row to the infobox, with either a header cell
    -- or a label/data cell combination.
    if rowArgs.header then
        root
            :tag('tr')
                :addClass(rowArgs.rowclass)
                :cssText(rowArgs.rowstyle)
                :attr('id', rowArgs.rowid)
                :tag('th')
                    :attr('colspan', 2)
                    :attr('id', rowArgs.headerid)
                    :addClass(rowArgs.class)
                    :addClass(args.headerclass)
                    :css('text-align', 'center')
                    :cssText(args.headerstyle)
                    :cssText(rowArgs.rowcellstyle)
                    :wikitext(fixChildBoxes(rowArgs.header, 'th'))
    elseif rowArgs.data then
        local row = root:tag('tr')
        row:addClass(rowArgs.rowclass)
        row:cssText(rowArgs.rowstyle)
        row:attr('id', rowArgs.rowid)
        if rowArgs.label then
            row
                :tag('th')
                    :attr('scope', 'row')
                    :attr('id', rowArgs.labelid)
                    :cssText(args.labelstyle)
                    :cssText(rowArgs.rowcellstyle)
                    :wikitext(rowArgs.label)
                    :done()
        end
        
        local dataCell = row:tag('td')
        if not rowArgs.label then 
            dataCell
                :attr('colspan', 2)
                :css('text-align', 'center') 
        end
        dataCell
            :attr('id', rowArgs.dataid)
            :addClass(rowArgs.class)
            :cssText(rowArgs.datastyle)
            :cssText(rowArgs.rowcellstyle)
            :newline()
            :wikitext(fixChildBoxes(rowArgs.data, 'td'))
    end
end

local function renderTitle()
    if not args.title then return end

    root
        :tag('caption')
            :addClass(args.titleclass)
            :cssText(args.titlestyle)
            :wikitext(args.title)
end

local function renderAboveRow()
    if not args.above then return end
    
    root
        :tag('tr')
            :tag('th')
                :attr('colspan', 2)
                :addClass(args.aboveclass)
                :css('text-align', 'center')
                :css('font-size', '125%')
                :css('font-weight', 'bold')
                :cssText(args.abovestyle)
                :wikitext(fixChildBoxes(args.above,'th'))
end

local function renderBelowRow()
    if not args.below then return end
    
    root
        :tag('tr')
            :tag('td')
                :attr('colspan', '2')
                :addClass(args.belowclass)
                :css('text-align', 'center')
                :cssText(args.belowstyle)
                :newline()
                :wikitext(fixChildBoxes(args.below,'td'))
end

local function renderSubheaders()
    if args.subheader then
        args.subheader1 = args.subheader
    end
    if args.subheaderrowclass then
        args.subheaderrowclass1 = args.subheaderrowclass
    end
    local subheadernums = getArgNums('subheader')
    for k, num in ipairs(subheadernums) do
        addRow({
            data = args['subheader' .. tostring(num)],
            datastyle = args.subheaderstyle or args['subheaderstyle' .. tostring(num)],
            class = args.subheaderclass,
            rowclass = args['subheaderrowclass' .. tostring(num)]
        })
    end
end

local function renderImages()
    if args.image then
        args.image1 = args.image
    end
    if args.caption then
        args.caption1 = args.caption
    end
    local imagenums = getArgNums('image')
    for k, num in ipairs(imagenums) do
        local caption = args['caption' .. tostring(num)]
        local data = mw.html.create():wikitext(args['image' .. tostring(num)])
        if caption then
            data
                :tag('div')
                    :cssText(args.captionstyle)
                    :wikitext(caption)
        end
        addRow({
            data = tostring(data),
            datastyle = args.imagestyle,
            class = args.imageclass,
            rowclass = args['imagerowclass' .. tostring(num)]
        })
    end
end

local function renderRows()
    -- Gets the union of the header and data argument numbers,
    -- and renders them all in order using addRow.
    local rownums = union(getArgNums('header'), getArgNums('data'))
    table.sort(rownums)
    for k, num in ipairs(rownums) do
        addRow({
            header = args['header' .. tostring(num)],
            label = args['label' .. tostring(num)],
            data = args['data' .. tostring(num)],
            datastyle = args.datastyle,
            class = args['class' .. tostring(num)],
            rowclass = args['rowclass' .. tostring(num)],
            rowstyle = args['rowstyle' .. tostring(num)],
            rowcellstyle = args['rowcellstyle' .. tostring(num)],
            dataid = args['dataid' .. tostring(num)],
            labelid = args['labelid' .. tostring(num)],
            headerid = args['headerid' .. tostring(num)],
            rowid = args['rowid' .. tostring(num)]
        })
    end
end

local function renderNavBar()
    if not args.name then return end
    
    root
        :tag('tr')
            :tag('td')
                :attr('colspan', '2')
                :css('text-align', 'right')
                :wikitext(navbar{
                    args.name,
                    mini = 1,
                })
end

local function renderItalicTitle()
    local italicTitle = args['italic title'] and mw.ustring.lower(args['italic title'])
    if italicTitle == '' or italicTitle == 'force' or italicTitle == 'yes' then
        root:wikitext(mw.getCurrentFrame():expandTemplate({title = 'italic title'}))
    end
end

local function renderTrackingCategories()
    if args.decat ~= 'yes' then
        if #(getArgNums('data')) == 0 and mw.title.getCurrentTitle().namespace == 0 then
            root:wikitext('[[Category:Articles which use infobox templates with no data rows]]')
        end
        if args.child == 'yes' and args.title then
            root:wikitext('[[Category:Pages which use embedded infobox templates with the title parameter]]')
        end
    end
end

local function _infobox()
    -- Specify the overall layout of the infobox, with special settings
    -- if the infobox is used as a 'child' inside another infobox.
    if args.child ~= 'yes' then
        root = mw.html.create('table')
        
        root
            :addClass((args.subbox ~= 'yes') and 'infobox' or nil)
            :addClass(args.bodyclass)
            
            if args.subbox == 'yes' then
                root
                    :css('padding', '0')
                    :css('border', 'none')
                    :css('margin', '-3px')
                    :css('width', 'auto')
                    :css('min-width', '100%')
                    :css('font-size', '100%')
                    :css('clear', 'none')
                    :css('float', 'none')
                    :css('background-color', 'transparent')
            else
                root
                    :css('width', '22em')
            end
        root
            :cssText(args.bodystyle)
    
        renderTitle()
        renderAboveRow()
    else
        root = mw.html.create()
        
        root
            :wikitext(args.title)
    end

    renderSubheaders()
    renderImages() 
    renderRows() 
    renderBelowRow()  
    renderNavBar()
    renderItalicTitle()
    renderTrackingCategories()
    
    return tostring(root)
end

local function preprocessSingleArg(argName)
    -- If the argument exists and isn't blank, add it to the argument table.
    -- Blank arguments are treated as nil to match the behaviour of ParserFunctions.
    if origArgs[argName] and origArgs[argName] ~= '' then
        args[argName] = origArgs[argName]
    end
end

local function preprocessArgs(prefixTable, step)
    -- Assign the parameters with the given prefixes to the args table, in order, in batches
    -- of the step size specified. This is to prevent references etc. from appearing in the
    -- wrong order. The prefixTable should be an array containing tables, each of which has
    -- two possible fields, a "prefix" string and a "depend" table. The function always parses
    -- parameters containing the "prefix" string, but only parses parameters in the "depend"
    -- table if the prefix parameter is present and non-blank.
    if type(prefixTable) ~= 'table' then
        error("Non-table value detected for the prefix table", 2)
    end
    if type(step) ~= 'number' then
        error("Invalid step value detected", 2)
    end
    
    -- Get arguments without a number suffix, and check for bad input.
    for i,v in ipairs(prefixTable) do
        if type(v) ~= 'table' or type(v.prefix) ~= "string" or (v.depend and type(v.depend) ~= 'table') then
            error('Invalid input detected to preprocessArgs prefix table', 2)
        end
        preprocessSingleArg(v.prefix)
        -- Only parse the depend parameter if the prefix parameter is present and not blank.
        if args[v.prefix] and v.depend then
            for j, dependValue in ipairs(v.depend) do
                if type(dependValue) ~= 'string' then
                    error('Invalid "depend" parameter value detected in preprocessArgs')
                end
                preprocessSingleArg(dependValue)
            end
        end
    end

    -- Get arguments with number suffixes.
    local a = 1 -- Counter variable.
    local moreArgumentsExist = true
    while moreArgumentsExist == true do
        moreArgumentsExist = false
        for i = a, a + step - 1 do
            for j,v in ipairs(prefixTable) do
                local prefixArgName = v.prefix .. tostring(i)
                if origArgs[prefixArgName] then
                    moreArgumentsExist = true -- Do another loop if any arguments are found, even blank ones.
                    preprocessSingleArg(prefixArgName)
                end
                -- Process the depend table if the prefix argument is present and not blank, or
                -- we are processing "prefix1" and "prefix" is present and not blank, and
                -- if the depend table is present.
                if v.depend and (args[prefixArgName] or (i == 1 and args[v.prefix])) then
                    for j,dependValue in ipairs(v.depend) do
                        local dependArgName = dependValue .. tostring(i)
                        preprocessSingleArg(dependArgName)
                    end
                end
            end
        end
        a = a + step
    end
end
 
function p.infobox(frame)
    -- If called via #invoke, use the args passed into the invoking template.
    -- Otherwise, for testing purposes, assume args are being passed directly in.
    if frame == mw.getCurrentFrame() then
        origArgs = frame:getParent().args
    else
        origArgs = frame
    end
    
    -- Parse the data parameters in the same order that the old {{infobox}} did, so that
    -- references etc. will display in the expected places. Parameters that depend on
    -- another parameter are only processed if that parameter is present, to avoid
    -- phantom references appearing in article reference lists.
    preprocessSingleArg('child')
    preprocessSingleArg('bodyclass')
    preprocessSingleArg('subbox')
    preprocessSingleArg('bodystyle')
    preprocessSingleArg('title')
    preprocessSingleArg('titleclass')
    preprocessSingleArg('titlestyle')
    preprocessSingleArg('above')
    preprocessSingleArg('aboveclass')
    preprocessSingleArg('abovestyle')
    preprocessArgs({
        {prefix = 'subheader', depend = {'subheaderstyle', 'subheaderrowclass'}}
    }, 10)
    preprocessSingleArg('subheaderstyle')
    preprocessSingleArg('subheaderclass')
    preprocessArgs({
        {prefix = 'image', depend = {'caption', 'imagerowclass'}}
    }, 10)
    preprocessSingleArg('captionstyle')
    preprocessSingleArg('imagestyle')
    preprocessSingleArg('imageclass')
    preprocessArgs({
        {prefix = 'header'},
        {prefix = 'data', depend = {'label'}},
        {prefix = 'rowclass'},
        {prefix = 'rowstyle'},
        {prefix = 'rowcellstyle'},
        {prefix = 'class'},
        {prefix = 'dataid'},
        {prefix = 'labelid'},
        {prefix = 'headerid'},
        {prefix = 'rowid'}
    }, 50)
    preprocessSingleArg('headerclass')
    preprocessSingleArg('headerstyle')
    preprocessSingleArg('labelstyle')
    preprocessSingleArg('datastyle')
    preprocessSingleArg('below')
    preprocessSingleArg('belowclass')
    preprocessSingleArg('belowstyle')
    preprocessSingleArg('name')
    args['italic title'] = origArgs['italic title'] -- different behaviour if blank or absent
    preprocessSingleArg('decat')
 
    return _infobox()
end
 
return p</text>
      <sha1>3lqvq40va735qhmz9ozwwkwt6n87qbr</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Infobox/dates</title>
    <ns>828</ns>
    <id>50117534</id>
    <revision>
      <id>754496189</id>
      <parentid>754496111</parentid>
      <timestamp>2016-12-12T23:54:24Z</timestamp>
      <contributor>
        <username>Oshwah</username>
        <id>3174456</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Module:Infobox/dates]]": [[WP:High-risk templates|High-risk Lua module]] ([Edit=Require autoconfirmed or confirmed access] (indefinite) [Move=Require autoconfirmed or confirmed access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="1840">local getArgs = require('Module:Arguments').getArgs
local p = {}

function p.dates(frame)
	local returnval;
	local args = getArgs(frame);
	
	if table.getn(args) &lt; 2 then
		if args['1'] == nil and args['2'] == nil then
			return '';
		elseif args['1'] == nil then 
			return args['2'];
		elseif args['2'] == nil then 
			return args['1'];
		end
	end
	
	args['1'] = args['1']:gsub("&amp;nbsp;"," ");
	args['2'] = args['2']:gsub("&amp;nbsp;"," ");
	
	local dmy = false;
	local pr1, m1, d1, y1, su1 = string.match(args['1'], '(.-)(%u%a+)%s(%d+),%s(%d+)(.*)');
	local pr2, m2, d2, y2, su2 = string.match(args['2'], '(.-)(%u%a+)%s(%d+),%s(%d+)(.*)');
	if y1 == nil then
		dmy = true;
		pr1, d1, m1, y1, su1 = string.match(args['1'], '(.-)(%d%d?)%s(%a+)%s(%d+)(.*)');
		pr2, d2, m2, y2, su2 = string.match(args['2'], '(.-)(%d%d?)%s(%a+)%s(%d+)(.*)');
	end
	
	local dash = '&amp;nbsp;– ';
	if y1 ~= nil and y2 ~= nil then
		su1 = su1 or '';
		su2 = su2 or '';
		
		local MONTHS = {January=1, February=2, March=3, April=4, May=5, June=6, July=7, August=8, September=9, October=10, November=11, December=12};
		local diff = os.time({year=y2,month=MONTHS[m2],day=d2,hour=0,min=0,sec=0})-os.time({year=y1,month=MONTHS[m1],day=d1,hour=0,min=0,sec=0});
		
		if diff &lt; 0 then
			returnval = 'Invalid date range';
		else
			if y1 == y2 then
				if dmy == false then
					returnval = pr1..m1..' '..d1..su1..dash..pr2..m2..' '..d2..', '..y2..su2;
				else
					returnval = pr1..d1..' '..m1..su1..dash..pr2..d2..' '..m2..' '..y2..su2;
				end
			else
				if dmy == false then
					returnval = pr1..m1..' '..d1..', '..y1..su1..dash..pr2..m2..' '..d2..', '..y2..su2;
				else
					returnval = pr1..d1..' '..m1..' '..y1..su1..dash..pr2..d2..' '..m2..' '..y2..su2;
				end
			end
		end
	else
		returnval = args['1']..dash..args['2'];
	end
	
	return returnval;
end

return p</text>
      <sha1>ohi7v189vrzwa6bwimng5vg84v94wpj</sha1>
    </revision>
  </page>
  <page>
    <title>Module:InfoboxImage</title>
    <ns>828</ns>
    <id>38581924</id>
    <revision>
      <id>839038061</id>
      <parentid>769944044</parentid>
      <timestamp>2018-04-30T21:16:56Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <comment>add Noimage.gif to placeholder list</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="9657">-- Inputs:
--    image - Can either be a bare filename (with or without the File:/Image: prefix) or a fully formatted image link
--    page - page to display for multipage images (DjVu)
--    size - size to display the image
--    maxsize - maximum size for image
--    sizedefault - default size to display the image if size param is blank
--    alt - alt text for image
--    title - title text for image
--    border - set to yes if border
--    center - set to yes, if the image has to be centered
--    upright - upright image param
--    suppressplaceholder - if yes then checks to see if image is a placeholder and suppresses it
--    link - page to visit when clicking on image
-- Outputs:
--    Formatted image.
-- More details available at the "Module:InfoboxImage/doc" page

local i = {};

local placeholder_image = {
    "Blue - Replace this image female.svg",
    "Blue - Replace this image male.svg",
    "Female no free image yet.png",
    "Flag of None (square).svg",
    "Flag of None.svg",
    "Flag of.svg",
    "Green - Replace this image female.svg",
    "Green - Replace this image male.svg",
    "Image is needed female.svg",
    "Image is needed male.svg",
    "Location map of None.svg",
    "Male no free image yet.png",
    "Missing flag.png",
    "No flag.svg",
    "No free portrait.svg",
    "No portrait (female).svg",
    "No portrait (male).svg",
    "Red - Replace this image female.svg",
    "Red - Replace this image male.svg",
    "Replace this image female (blue).svg",
    "Replace this image female.svg",
    "Replace this image male (blue).svg",
    "Replace this image male.svg",
    "Silver - Replace this image female.svg",
    "Silver - Replace this image male.svg",
    "Replace this image.svg",
	"Cricket no pic.png",
	"CarersLogo.gif",
	"Diagram Needed.svg",
	"Example.jpg",
	"Image placeholder.png",
	"No male portrait.svg",
	"Nocover-upload.png",
	"NoDVDcover copy.png",
	"Noribbon.svg",
	"No portrait-BFD-test.svg",
	"Placeholder barnstar ribbon.png",
	"Project Trains no image.png",
	"Image-request.png",
	"Sin bandera.svg",
	"Sin escudo.svg",
	"Replace this image - temple.png",
	"Replace this image butterfly.png",
	"Replace this image.svg",
	"Replace this image1.svg",
	"Resolution angle.png",
	"Image-No portrait-text-BFD-test.svg",
	"Insert image here.svg",
	"No image available.png",
	"NO IMAGE YET square.png",
	"NO IMAGE YET.png",
	"No Photo Available.svg",
	"No Screenshot.svg",
	"No-image-available.jpg",
	"Null.png",
	"PictureNeeded.gif",
	"Place holder.jpg",
	"Unbenannt.JPG",
	"UploadACopyrightFreeImage.svg",
	"UploadAnImage.gif",
	"UploadAnImage.svg",
	"UploadAnImageShort.svg",
	"CarersLogo.gif",
	"Diagram Needed.svg",
	"No male portrait.svg",
	"NoDVDcover copy.png",
	"Placeholder barnstar ribbon.png",
	"Project Trains no image.png",
	"Image-request.png",
	"Noimage.gif",
}

function i.IsPlaceholder(image)
    -- change underscores to spaces
    image = mw.ustring.gsub(image, "_", " ");
    assert(image ~= nil, 'mw.ustring.gsub(image, "_", " ") must not return nil')
    -- if image starts with [[ then remove that and anything after |
    if mw.ustring.sub(image,1,2) == "[[" then
        image = mw.ustring.sub(image,3);
        image = mw.ustring.gsub(image, "([^|]*)|.*", "%1");
        assert(image ~= nil, 'mw.ustring.gsub(image, "([^|]*)|.*", "%1") must not return nil')
    end
    -- Trim spaces
    image = mw.ustring.gsub(image, '^[ ]*(.-)[ ]*$', '%1');
    assert(image ~= nil, "mw.ustring.gsub(image, '^[ ]*(.-)[ ]*$', '%1') must not return nil")
    -- remove prefix if exists
    local allNames = mw.site.namespaces[6].aliases
    allNames[#allNames + 1] = mw.site.namespaces[6].name
    allNames[#allNames + 1] = mw.site.namespaces[6].canonicalName
    for i, name in ipairs(allNames) do
        if mw.ustring.lower(mw.ustring.sub(image, 1, mw.ustring.len(name) + 1)) == mw.ustring.lower(name .. ":") then
            image = mw.ustring.sub(image, mw.ustring.len(name) + 2);
            break
        end
    end
    -- Trim spaces
    image = mw.ustring.gsub(image, '^[ ]*(.-)[ ]*$', '%1');
    -- capitalise first letter
    image = mw.ustring.upper(mw.ustring.sub(image,1,1)) .. mw.ustring.sub(image,2);

    for i,j in pairs(placeholder_image) do
        if image == j then
            return true
        end
    end
    return false
end

function i.InfoboxImage(frame)
    local image = frame.args["image"];
    
    if image == "" or image == nil then
        return "";
    end
    if image == "&amp;nbsp;" then
        return image;
    end
    if frame.args["suppressplaceholder"] ~= "no" then
        if i.IsPlaceholder(image) == true then
            return "";
        end
    end

    if mw.ustring.lower(mw.ustring.sub(image,1,5)) == "http:" then
        return "";
    end
    if mw.ustring.lower(mw.ustring.sub(image,1,6)) == "[http:" then
        return "";
    end
    if mw.ustring.lower(mw.ustring.sub(image,1,7)) == "[[http:" then
        return "";
    end
    if mw.ustring.lower(mw.ustring.sub(image,1,6)) == "https:" then
        return "";
    end
    if mw.ustring.lower(mw.ustring.sub(image,1,7)) == "[https:" then
        return "";
    end
    if mw.ustring.lower(mw.ustring.sub(image,1,8)) == "[[https:" then
        return "";
    end

    if mw.ustring.sub(image,1,2) == "[[" then
        -- search for thumbnail images and add to tracking cat if found
        if mw.title.getCurrentTitle().namespace == 0 and (mw.ustring.find(image, "|%s*thumb%s*[|%]]") or mw.ustring.find(image, "|%s*thumbnail%s*[|%]]")) then
            return image .. "[[Category:Pages using infoboxes with thumbnail images]]";
        elseif mw.title.getCurrentTitle().namespace == 0 then
            return image .. "[[Category:Pages using deprecated image syntax]]";
        else
            return image;
        end
    elseif mw.ustring.sub(image,1,2) == "{{" and mw.ustring.sub(image,1,3) ~= "{{{" then
        return image;
    elseif mw.ustring.sub(image,1,1) == "&lt;" then
        return image;
    elseif mw.ustring.sub(image,1,5) == mw.ustring.char(127).."UNIQ" then
        -- Found strip marker at begining, so pass don't process at all
        return image;
    elseif mw.ustring.sub(image,4,9) == "`UNIQ-" then
        -- Found strip marker at begining, so pass don't process at all
        return image;
    else
        local result = "";
        local page = frame.args["page"];
        local size = frame.args["size"];
        local maxsize = frame.args["maxsize"];
        local sizedefault = frame.args["sizedefault"];
        local alt = frame.args["alt"];
        local link = frame.args["link"];
        local title = frame.args["title"];
        local border = frame.args["border"];
        local upright = frame.args["upright"] or "";
        local thumbtime = frame.args["thumbtime"] or "";
        local center= frame.args["center"];
        
        -- remove prefix if exists
        local allNames = mw.site.namespaces[6].aliases
        allNames[#allNames + 1] = mw.site.namespaces[6].name
        allNames[#allNames + 1] = mw.site.namespaces[6].canonicalName
        for i, name in ipairs(allNames) do
            if mw.ustring.lower(mw.ustring.sub(image, 1, mw.ustring.len(name) + 1)) == mw.ustring.lower(name .. ":") then
                image = mw.ustring.sub(image, mw.ustring.len(name) + 2);
                break
            end
        end
        
        if maxsize ~= "" and maxsize ~= nil then
            -- if no sizedefault then set to maxsize
            if sizedefault == "" or sizedefault == nil then
                sizedefault = maxsize
            end
            -- check to see if size bigger than maxsize
            if size ~= "" and size ~= nil then
                local sizenumber = tonumber(mw.ustring.match(size,"%d*")) or 0;
                local maxsizenumber = tonumber(mw.ustring.match(maxsize,"%d*")) or 0;
                if sizenumber&gt;maxsizenumber and maxsizenumber&gt;0 then
                    size = maxsize;
                end
            end
        end
        -- add px to size if just a number
        if (tonumber(size) or 0) &gt; 0 then
            size = size .. "px";
        end
        -- add px to sizedefault if just a number
        if (tonumber(sizedefault) or 0) &gt; 0 then
            sizedefault = sizedefault .. "px";
        end
        
        result = "[[File:" .. image;
        if page ~= "" and page ~= nil then
            result = result .. "|page=" .. page;
        end
        if size ~= "" and size ~= nil then
            result = result .. "|" .. size;
        elseif sizedefault ~= "" and sizedefault ~= nil then
            result = result .. "|" .. sizedefault;
        else
            result = result .. "|frameless";
        end
        if center == "yes" then
            result = result .. "|center"
        end
        if alt ~= "" and alt ~= nil then
            result = result .. "|alt=" .. alt;
        end
        if link ~= "" and link ~= nil then
            result = result .. "|link=" .. link;
        end
        if border == "yes" then
            result = result .. "|border";
        end
        if upright == "yes" then
            result = result .. "|upright";
        elseif upright ~= "" then
            result = result .. "|upright=" .. upright;
        end
        if thumbtime ~= "" then
            result = result .. "|thumbtime=" .. thumbtime;
        end
        if title ~= "" and title ~= nil then
            result = result .. "|" .. title;
        elseif alt ~= "" and alt ~= nil then
            result = result .. "|" .. alt;
        end
        result = result .. "]]";
        
        return result;
    end
end

return i;</text>
      <sha1>qtnddjnyefntigkcp7xwqp47j23hao6</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Italic title</title>
    <ns>828</ns>
    <id>39697931</id>
    <revision>
      <id>729549771</id>
      <parentid>716107329</parentid>
      <timestamp>2016-07-12T23:57:51Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>replace with an object-based framework, and add a dabonly function for [[Template:Italic dab]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="8924">-- This module implements {{italic title}}.

require('Module:No globals')
local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType
local checkTypeForNamedArg = libraryUtil.checkTypeForNamedArg
local yesno = require('Module:Yesno')

--------------------------------------------------------------------------------
-- ItalicTitle class
--------------------------------------------------------------------------------

local ItalicTitle = {}

do
	----------------------------------------------------------------------------
	-- Class attributes and functions
	-- Things that belong to the class are here. Things that belong to each
	-- object are in the constructor.
	----------------------------------------------------------------------------

	-- Keys of title parts that can be italicized.
	local italicizableKeys = {
		namespace = true,
		title = true,
		dab = true,
	}

	----------------------------------------------------------------------------
	-- ItalicTitle constructor
	-- This contains all the dynamic attributes and methods.
	----------------------------------------------------------------------------

	function ItalicTitle.new()
		local obj = {}

		-- Function for checking self variable in methods.
		local checkSelf = libraryUtil.makeCheckSelfFunction(
			'ItalicTitle',
			'obj',
			obj,
			'ItalicTitle object'
		)

		-- Checks a key is present in a lookup table.
		-- Param: name - the function name.
		-- Param: argId - integer position of the key in the argument list.
		-- Param: key - the key.
		-- Param: lookupTable - the table to look the key up in.
		local function checkKey(name, argId, key, lookupTable)
			if not lookupTable[key] then
				error(string.format(
					"bad argument #%d to '%s' ('%s' is not a valid key)",
					argId,
					name,
					key
				), 3)
			end
		end

		-- Set up object structure.
		local parsed = false
		local categories = {}
		local italicizedKeys = {}
		local italicizedSubstrings = {}

		-- Parses a title object into its namespace text, title, and
		-- disambiguation text.
		-- Param: options - a table of options with the following keys:
		--     title - the title object to parse
		--     ignoreDab - ignore any disambiguation parentheses
		-- Returns the current object.
		function obj:parseTitle(options)
			checkSelf(self, 'parseTitle')
			checkType('parseTitle', 1, options, 'table')
			checkTypeForNamedArg('parseTitle', 'title', options.title, 'table')
			local title = options.title
		
			-- Title and dab text
			local prefix, parentheses
			if not options.ignoreDab then
				prefix, parentheses = mw.ustring.match(
					title.text,
					'^(.+) %(([^%(%)]+)%)$'
				)
			end
			if prefix and parentheses then
				self.title = prefix
				self.dab = parentheses
			else
				self.title = title.text
			end
		
			-- Namespace
			local namespace = mw.site.namespaces[title.namespace].name
			if namespace and #namespace &gt;= 1 then
				self.namespace = namespace
			end

			-- Register the object as having parsed a title.
			parsed = true
		
			return self
		end

		-- Italicizes part of the title.
		-- Param: key - the key of the title part to be italicized. Possible
		-- keys are contained in the italicizableKeys table.
		-- Returns the current object.
		function obj:italicize(key)
			checkSelf(self, 'italicize')
			checkType('italicize', 1, key, 'string')
			checkKey('italicize', 1, key, italicizableKeys)
			italicizedKeys[key] = true
			return self
		end

		-- Un-italicizes part of the title.
		-- Param: key - the key of the title part to be un-italicized. Possible
		-- keys are contained in the italicizableKeys table.
		-- Returns the current object.
		function obj:unitalicize(key)
			checkSelf(self, 'unitalicize')
			checkType('unitalicize', 1, key, 'string')
			checkKey('unitalicize', 1, key, italicizableKeys)
			italicizedKeys[key] = nil
			return self
		end

		-- Italicizes a substring in the title. This only affects the main part
		-- of the title, not the namespace or the disambiguation text.
		-- Param: s - the substring to be italicized.
		-- Returns the current object.
		function obj:italicizeSubstring(s)
			checkSelf(self, 'italicizeSubstring')
			checkType('italicizeSubstring', 1, s, 'string')
			italicizedSubstrings[s] = true
			return self
		end

		-- Un-italicizes a substring in the title. This only affects the main
		-- part of the title, not the namespace or the disambiguation text.
		-- Param: s - the substring to be un-italicized.
		-- Returns the current object.
		function obj:unitalicizeSubstring(s)
			checkSelf(self, 'unitalicizeSubstring')
			checkType('unitalicizeSubstring', 1, s, 'string')
			italicizedSubstrings[s] = nil
			return self
		end

		-- Renders the object into a page name. If no title has yet been parsed,
		-- the current title is used.
		-- Returns string
		function obj:renderTitle()
			checkSelf(self, 'renderTitle')

			-- Italicizes a string
			-- Param: s - the string to italicize
			-- Returns string.
			local function italicize(s)
				assert(type(s) == 'string', 's was not a string')
				assert(s ~= '', 's was the empty string')
				return string.format('&lt;i&gt;%s&lt;/i&gt;', s)
			end
		
			-- Escape characters in a string that are magic in Lua patterns.
			-- Param: pattern - the pattern to escape
			-- Returns string.
			local function escapeMagicCharacters(s)
				assert(type(s) == 'string', 's was not a string')
				return s:gsub('%p', '%%%0')
			end

			-- If a title hasn't been parsed yet, parse the current title.
			if not parsed then
				self:parseTitle{title = mw.title.getCurrentTitle()}
			end

			-- Italicize the different parts of the title and store them in a
			-- titleParts table to be joined together later.
			local titleParts = {}

			-- Italicize the italicizable keys.
			for key in pairs(italicizableKeys) do
				if self[key] then
					if italicizedKeys[key] then
						titleParts[key] = italicize(self[key])
					else
						titleParts[key] = self[key]
					end
				end
			end

			-- Italicize substrings. If there are any substrings to be
			-- italicized then start from the raw title, as this overrides any
			-- italicization of the main part of the title.
			if next(italicizedSubstrings) then
				titleParts.title = self.title
				for s in pairs(italicizedSubstrings) do
					local pattern = escapeMagicCharacters(s)
					local italicizedTitle, nReplacements = titleParts.title:gsub(
						pattern,
						italicize
					)
					titleParts.title = italicizedTitle

					-- If we didn't make any replacements then it means that we
					-- have been passed a bad substring or that the page has
					-- been moved to a bad title, so add a tracking category.
					if nReplacements &lt; 1 then
						categories['Pages using italic title with no matching string'] = true
					end
				end
			end

			-- Assemble the title together from the parts.
			local ret = ''
			if titleParts.namespace then
				ret = ret .. titleParts.namespace .. ':'
			end
			ret = ret .. titleParts.title
			if titleParts.dab then
				ret = ret .. ' (' .. titleParts.dab .. ')'
			end

			return ret
		end

		-- Returns an expanded DISPLAYTITLE parser function called with the
		-- result of obj:renderTitle, plus any other optional arguments.
		-- Returns string
		function obj:renderDisplayTitle(...)
			checkSelf(self, 'renderDisplayTitle')
			return mw.getCurrentFrame():callParserFunction(
				'DISPLAYTITLE',
				self:renderTitle(),
				...
			)
		end

		-- Returns an expanded DISPLAYTITLE parser function called with the
		-- result of obj:renderTitle, plus any other optional arguments, plus
		-- any tracking categories.
		-- Returns string
		function obj:render(...)
			checkSelf(self, 'render')
			local ret = self:renderDisplayTitle(...)
			for cat in pairs(categories) do
				ret = ret .. string.format(
					'[[Category:%s]]',
					cat
				)
			end
			return ret
		end

		return obj
	end
end

--------------------------------------------------------------------------------
-- Exports
--------------------------------------------------------------------------------

local p = {}

local function getArgs(frame, wrapper)
	assert(type(wrapper) == 'string', 'wrapper was not a string')
	return require('Module:Arguments').getArgs(frame, {
		wrappers = wrapper
	})
end

-- Main function for {{italic title}}
function p._main(args)
	checkType('_main', 1, args, 'table')
	local italicTitle = ItalicTitle.new()
	italicTitle:parseTitle{
		title = mw.title.getCurrentTitle(),
		ignoreDab = yesno(args.all, false)
	}
	if args.string then
		italicTitle:italicizeSubstring(args.string)
	else
		italicTitle:italicize('title')
	end
	return italicTitle:render(args[1])
end

function p.main(frame)
	return p._main(getArgs(frame, 'Template:Italic title'))
end

function p._dabonly(args)
	return ItalicTitle.new()
		:italicize('dab')
		:render(args[1])
end

function p.dabonly(frame)
	return p._dabonly(getArgs(frame, 'Template:Italic dab'))
end


return p</text>
      <sha1>ge91hf4zf2qo03e7767bm75dtbgters</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Labelled list hatnote</title>
    <ns>828</ns>
    <id>50971703</id>
    <revision>
      <id>763259375</id>
      <parentid>745988142</parentid>
      <timestamp>2017-02-02T05:26:53Z</timestamp>
      <contributor>
        <username>Nihiltres</username>
        <id>236191</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Module:Labelled list hatnote]]": [[WP:High-risk templates|Highly visible template]] ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="3083">--------------------------------------------------------------------------------
--                               Labelled list                                --
--                                                                            --
-- This module does the core work of creating a hatnote composed of a list    --
-- prefixed by a colon-terminated label, i.e. "LABEL: [andList of pages]",    --
-- for {{see also}} and similar templates.                                    --
--------------------------------------------------------------------------------

local mHatnote = require('Module:Hatnote')
local mHatlist = require('Module:Hatnote list')
local mArguments --initialize lazily
local p = {}

-- Defaults global to this module
local defaults = {
	label = 'See also', --Final fallback for label argument
	labelForm = '%s: %s',
	prefixes = {'label', 'label ', 'l'},
	template = 'Module:Labelled list hatnote'
}

-- Helper function that pre-combines display parameters into page arguments.
-- Also compresses sparse arrays, as a desirable side-effect.
function p.preprocessDisplays (args, prefixes)
	-- Prefixes specify which parameters, in order, to check for display options
	-- They each have numbers auto-appended, e.g. 'label1', 'label 1', &amp; 'l1'
	prefixes = prefixes or defaults.prefixes
	local pages = {}
	for k, v in pairs(args) do
		if type(k) == 'number' then
			local display
			for i = 1, #prefixes do
				display = args[prefixes[i] .. k]
				if display then break end
			end
			local page = display and
				string.format('%s|%s', string.gsub(v, '|.*$', ''), display) or v
			pages[#pages + 1] = page
		end
	end
	return pages
end

-- Produces a labelled pages-list hatnote.
-- The main frame (template definition) takes 1 or 2 arguments, for a singular
-- and (optionally) plural label respectively:
-- * {{#invoke:Labelled list hatnote|labelledList|Singular label|Plural label}}
-- The resulting template takes pagename &amp; label parameters normally.
function p.labelledList (frame)
	mArguments = require('Module:Arguments')
	local labels = {frame.args[1] or defaults.label}
	labels[2] = frame.args[2] or labels[1]
	local template = frame:getParent():getTitle()
	local args = mArguments.getArgs(frame, {parentOnly = true})
	local pages = p.preprocessDisplays(args)
	local options = {
		extraclasses = frame.args.extraclasses,
		category = args.category,
		selfref = frame.args.selfref or args.selfref,
		template = template
	}
	return p._labelledList(pages, labels, options)
end

function p._labelledList (pages, labels, options)
	labels = labels or {}
	if #pages == 0 then
		return mHatnote.makeWikitextError(
			'no page names specified',
			(options.template or defaults.template) .. '#Errors',
			options.category
		)
	end
	label = (#pages == 1 and labels[1] or labels[2]) or defaults.label
	local text = string.format(
		options.labelForm or defaults.labelForm,
		label,
		mHatlist.andList(pages, true)
	)
	local hnOptions = {
		extraclasses = options.extraclasses,
		selfref = options.selfref
	}
	return mHatnote._hatnote(text, hnOptions)
end

return p</text>
      <sha1>932zychfwl5xu5castj2k9j5qs6lzif</sha1>
    </revision>
  </page>
  <page>
    <title>Module:List</title>
    <ns>828</ns>
    <id>41068627</id>
    <revision>
      <id>794511725</id>
      <parentid>788254921</parentid>
      <timestamp>2017-08-08T13:55:25Z</timestamp>
      <contributor>
        <username>Jdlrobson</username>
        <id>15999850</id>
      </contributor>
      <comment>Minerva skin needs whether an hlist is separated to be explicit (see https://en.wikipedia.org/wiki/Wikipedia:Village_pump_(technical)#Hlist_bullets_not_shown_in_mobile)</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="5154">-- This module outputs different kinds of lists. At the moment, bulleted,
-- unbulleted, horizontal, ordered, and horizontal ordered lists are supported.

local libUtil = require('libraryUtil')
local checkType = libUtil.checkType
local mTableTools = require('Module:TableTools')

local p = {}

local listTypes = {
	['bulleted'] = true,
	['unbulleted'] = true,
	['horizontal'] = true,
	['ordered'] = true,
	['horizontal_ordered'] = true
}

function p.makeListData(listType, args)
	-- Constructs a data table to be passed to p.renderList.
	local data = {}

	-- Classes
	data.classes = {}
	if listType == 'horizontal' or listType == 'horizontal_ordered' then
		table.insert(data.classes, 'hlist hlist-separated')
	elseif listType == 'unbulleted' then
		table.insert(data.classes, 'plainlist')
	end
	table.insert(data.classes, args.class)

	-- Main div style
	data.style = args.style

	-- Indent for horizontal lists
	if listType == 'horizontal' or listType == 'horizontal_ordered' then
		local indent = tonumber(args.indent)
		indent = indent and indent * 1.6 or 0
		if indent &gt; 0 then
			data.marginLeft = indent .. 'em'
		end
	end
	
	-- List style types for ordered lists
	-- This could be "1, 2, 3", "a, b, c", or a number of others. The list style
	-- type is either set by the "type" attribute or the "list-style-type" CSS
	-- property.
	if listType == 'ordered' or listType == 'horizontal_ordered' then 
		data.listStyleType = args.list_style_type or args['list-style-type']
		data.type = args['type']

		-- Detect invalid type attributes and attempt to convert them to
		-- list-style-type CSS properties.
		if data.type 
			and not data.listStyleType
			and not tostring(data.type):find('^%s*[1AaIi]%s*$')
		then
			data.listStyleType = data.type
			data.type = nil
		end
	end
	
	-- List tag type
	if listType == 'ordered' or listType == 'horizontal_ordered' then
		data.listTag = 'ol'
	else
		data.listTag = 'ul'
	end

	-- Start number for ordered lists
	data.start = args.start
	if listType == 'horizontal_ordered' then
		-- Apply fix to get start numbers working with horizontal ordered lists.
		local startNum = tonumber(data.start)
		if startNum then
			data.counterReset = 'listitem ' .. tostring(startNum - 1)
		end
	end

	-- List style
	 -- ul_style and ol_style are included for backwards compatibility. No
	 -- distinction is made for ordered or unordered lists.
	data.listStyle = args.list_style

	-- List items
	-- li_style is included for backwards compatibility. item_style was included
	-- to be easier to understand for non-coders.
	data.itemStyle = args.item_style or args.li_style
	data.items = {}
	for i, num in ipairs(mTableTools.numKeys(args)) do
		local item = {}
		item.content = args[num]
		item.style = args['item' .. tostring(num) .. '_style']
			or args['item_style' .. tostring(num)]
		item.value = args['item' .. tostring(num) .. '_value']
			or args['item_value' .. tostring(num)]
		table.insert(data.items, item)
	end
	
	return data
end

function p.renderList(data)
	-- Renders the list HTML.
	
	-- Return the blank string if there are no list items.
	if type(data.items) ~= 'table' or #data.items &lt; 1 then
		return ''
	end
	
	-- Render the main div tag.
	local root = mw.html.create('div')
	for i, class in ipairs(data.classes or {}) do
		root:addClass(class)
	end
	root:css{['margin-left'] = data.marginLeft}
	if data.style then
		root:cssText(data.style)
	end

	-- Render the list tag.
	local list = root:tag(data.listTag or 'ul')
	list
		:attr{start = data.start, type = data.type}
		:css{
			['counter-reset'] = data.counterReset,
			['list-style-type'] = data.listStyleType
		}
	if data.listStyle then
		list:cssText(data.listStyle)
	end

	-- Render the list items
	for i, t in ipairs(data.items or {}) do
		local item = list:tag('li')
		if data.itemStyle then
			item:cssText(data.itemStyle)
		end
		if t.style then
			item:cssText(t.style)
		end
		item
			:attr{value = t.value}
			:wikitext(t.content)
	end

	return tostring(root)
end

function p.renderTrackingCategories(args)
	local isDeprecated = false -- Tracks deprecated parameters.
	for k, v in pairs(args) do
		k = tostring(k)
		if k:find('^item_style%d+$') or k:find('^item_value%d+$') then
			isDeprecated = true
			break
		end
	end
	local ret = ''
	if isDeprecated then
		ret = ret .. '[[Category:List templates with deprecated parameters]]'
	end
	return ret
end

function p.makeList(listType, args)
	if not listType or not listTypes[listType] then
		error(string.format(
			"bad argument #1 to 'makeList' ('%s' is not a valid list type)",
			tostring(listType)
		), 2)
	end
	checkType('makeList', 2, args, 'table')
	local data = p.makeListData(listType, args)
	local list = p.renderList(data)
	local trackingCategories = p.renderTrackingCategories(args)
	return list .. trackingCategories
end

for listType in pairs(listTypes) do
	p[listType] = function (frame)
		local mArguments = require('Module:Arguments')
		local origArgs = mArguments.getArgs(frame)
		-- Copy all the arguments to a new table, for faster indexing.
		local args = {}
		for k, v in pairs(origArgs) do
			args[k] = v
		end
		return p.makeList(listType, args)
	end
end

return p</text>
      <sha1>lkqmcmpfob2c6xhq46f675tm6p136ns</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Listen</title>
    <ns>828</ns>
    <id>42944587</id>
    <revision>
      <id>846292355</id>
      <parentid>840802376</parentid>
      <timestamp>2018-06-17T19:23:56Z</timestamp>
      <contributor>
        <username>FlightTime</username>
        <id>8356162</id>
      </contributor>
      <comment>Update link target</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="5089">-- This module implements {{listen}}.

local mFileLink = require('Module:File link')
local mTableTools = require('Module:TableTools')
local mSideBox = require('Module:Side box')

local p = {}

function p.main(frame)
	local origArgs = frame:getParent().args
	local args = {}
	for k, v in pairs(origArgs) do
		v = v:match('^%s*(.-)%s*$')
		if v ~= '' then
			args[k] = v
		end
	end
	-- Exit early if filename (required) is not provided.
	if not args.filename then
		return nil
	end
	return p._main(args)
end

function p._main(args)
	-- Organise the arguments by number.
	local numArgs = {}
	do
		local origNumArgs = mTableTools.numData(args)
		origNumArgs[1] = origNumArgs.other -- Overwrite args.filename1 etc. with args.filename etc.
		origNumArgs = mTableTools.compressSparseArray(origNumArgs)
		for i, t in ipairs(origNumArgs) do
			if t.filename then
				numArgs[#numArgs + 1] = t
			end
		end
	end

	-- Find whether we are outputting a plain or an embedded box.
	local isPlain = args.plain == 'yes'
	local isEmbedded = args.embed and true or false

	-- Build the arguments for {{side box}}
	local sbargs = {}
	sbargs.metadata = 'no'
	sbargs.position = args.pos

	-- Style arguments
	do
		local style = {}
		if isPlain then
			style[#style + 1] = 'border:none'
			style[#style + 1] = 'background:transparent'
			style[#style + 1] = 'float:none'
		end
		if isEmbedded then
			style[#style + 1] = 'border-collapse:collapse'
			style[#style + 1] = 'border-width:1px 0 0 0'
			style[#style + 1] = 'background:transparent'
			style[#style + 1] = 'float:none'
			style[#style + 1] = 'margin:0 -5px'
		end
		if args.pos == 'left' then
			style[#style + 1] = 'float:left'
		elseif args.pos == 'center' then
			style[#style + 1] = 'float:none'
			style[#style + 1] = 'margin-left:auto'
			style[#style + 1] = 'margin-right:auto'
		end
		
		style[#style + 1] = args.style
		sbargs.style = table.concat(style, '; ')
	end
	sbargs.textstyle = 'line-height:1.1em'

	-- Image
	if not isPlain and not isEmbedded then
		if args.image then
			sbargs.image = args.image
		else
			local images = {
				speech = 'Audio-input-microphone.svg',
				music = 'Gnome-mime-audio-openclipart.svg'
			}
			local image = args.type
				and images[args.type]
				or 'Gnome-mime-sound-openclipart.svg'
			sbargs.image = mFileLink._main{
				file = image,
				size = '65x50px',
				location = 'center',
				link = '',
				alt = ''
			}
		end
	end

	-- Text
	do
		local header
		if args.header then
			header = mw.html.create('div')
			header
				:css{
					background = 'transparent',
					['text-align'] = 'left',
					padding = args.embed and '2px 0' or '2px'
				}
				:wikitext(args.header)
			header = tostring(header)
			header = header .. '\n'
		else
			header = ''
		end
		local text = {}
		for i, t in ipairs(numArgs) do
			text[#text + 1] = p.renderRow(t.filename, t.title, t.play, t.alt, t.description)
			if numArgs[i + 1] then
				text[#text + 1] = '&lt;hr /&gt;'
			end
		end
		sbargs.text = header .. table.concat(text)
	end

	-- Below
	if not isPlain and not isEmbedded and args.help ~= 'no' then
		sbargs.below = string.format(
			"&lt;hr /&gt;&lt;span&gt;''Problems playing %s? See [[Help:Media|media help]].''&lt;/span&gt;",
			#numArgs &gt; 1 and 'these files' or 'this file'
		)
	end

	-- Render the side box.
	local sideBox = mSideBox._main(sbargs)

	-- Render the tracking categories.
	local trackingCategories = p.renderTrackingCategories(args, numArgs)

	return sideBox .. trackingCategories
end

function p.renderRow(filename, title, play, alt, description)
	-- Renders the HTML for one file description row.
	if not filename then
		return nil
	end
	local root = mw.html.create('')
	root
		:tag('div')
			:addClass('haudio')
			:newline()
			:tag('div')
				:css('padding', '4px 0')
				:wikitext(string.format('[[:File:%s|%s]]', filename, title or ''))
				:done()
			:newline()
			:tag('div')
				:wikitext(
					play ~= 'no'
						and mFileLink._main{
							file = filename,
							size = '220px',
							alt = alt
						}
						or nil
				)
				:done()
			:newline()
			:tag('div')
				:css('padding', '2px 0 0 0')
				:addClass('description')
				:wikitext(description)
				:done()
			:done()
	return tostring(root)
end

function p.renderTrackingCategories(args, numArgs, titleObj)
	-- Renders all tracking categories produced by the template.
	-- args and numArgs are passed through from p._main,
	-- and the titleObj is only used for testing purposes.
	local cats = {}

	local currentTitle = titleObj or mw.title.getCurrentTitle()
	if currentTitle.namespace == 0 then
		-- We are in mainspace.
		cats[#cats + 1] = 'Articles with hAudio microformats'

		for i, t in ipairs(numArgs) do
			local success, title = pcall(mw.title.new, 'Media:' .. t.filename)
			if success and title and not title.exists then
				cats[#cats + 1] = 'Articles with empty listen template'
				break
			end
		end
	end

	if args.plain == 'yes' then
		cats[#cats + 1] = 'Listen template using plain parameter'
	end

	for i, cat in ipairs(cats) do
		cats[i] = string.format('[[Category:%s]]', cat)
	end
	return table.concat(cats)
end

return p</text>
      <sha1>2al7kwnzxwaumq7829m2nb72pc9zbyu</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Main</title>
    <ns>828</ns>
    <id>42570919</id>
    <revision>
      <id>727437646</id>
      <parentid>727363620</parentid>
      <timestamp>2016-06-29T00:34:26Z</timestamp>
      <contributor>
        <username>Nihiltres</username>
        <id>236191</id>
      </contributor>
      <comment>Removed extraclasses option; those classes appear to be deprecated</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="2239">--[[
-- This module produces a link to a main article or articles. It implements the
-- template {{main}}.
-- 
-- If the module is used in category or category talk space, it produces "The
-- main article for this category is xxx". Otherwise, it produces
-- "Main article: xxx".
--]]

local mHatnote = require('Module:Hatnote')
local mHatlist = require('Module:Hatnote list')
local mArguments -- lazily initialise
local p = {}

function p.main(frame)
	mArguments = require('Module:Arguments')
	local args = mArguments.getArgs(frame, {parentOnly = true})
	local pages = {}
	for k, v in pairs(args) do
		if type(k) == 'number' then
			local display = args['label ' .. k] or args['l' .. k]
			local page = display and
				string.format('%s|%s', string.gsub(v, '|.*$', ''), display) or v
			pages[#pages + 1] = page
		end
	end
	if #pages == 0 and mw.title.getCurrentTitle().namespace == 0 then
		return mHatnote.makeWikitextError(
			'no page names specified',
			'Template:Main#Errors',
			args.category
		)
	end
	local options = {
		selfref = args.selfref
	}
	return p._main(pages, options)
end

function p._main(args, options)
	-- Get the list of pages. If no first page was specified we use the current
	-- page name.
	local currentTitle = mw.title.getCurrentTitle()
	if #args == 0 then args = {currentTitle.text} end
	local firstPage = string.gsub(args[1], '|.*$', '')
	-- Find the pagetype.
	local pageType = mHatnote.findNamespaceId(firstPage) == 0 and 'article' or 'page'
	-- Make the formatted link text
	list = mHatlist.andList(args, true)
	-- Build the text.
	local isPlural = #args &gt; 1
	local mainForm
	local curNs = currentTitle.namespace
	if (curNs == 14) or (curNs == 15) then --category/talk namespaces
		mainForm = isPlural and
			'The main %ss for this [[Wikipedia:Categorization|category]] are %s'
			or
			'The main %s for this [[Wikipedia:Categorization|category]] is %s'
	else
		mainForm = isPlural and 'Main %ss: %s' or 'Main %s: %s'
	end
	local text = string.format(mainForm, pageType, list)
	-- Process the options and pass the text to the _rellink function in
	-- [[Module:Hatnote]].
	options = options or {}
	local hnOptions = {
		selfref = options.selfref
	}
	return mHatnote._hatnote(text, hnOptions)
end

return p</text>
      <sha1>9iplsr5jg1vj2lm6dkuiqtfon8648ne</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Message box</title>
    <ns>828</ns>
    <id>40574910</id>
    <revision>
      <id>835732555</id>
      <parentid>803399820</parentid>
      <timestamp>2018-04-10T12:58:17Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>ony load Category handler when needed, requested on talk page</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="17101">-- This is a meta-module for producing message box templates, including
-- {{mbox}}, {{ambox}}, {{imbox}}, {{tmbox}}, {{ombox}}, {{cmbox}} and {{fmbox}}.

-- Load necessary modules.
require('Module:No globals')
local getArgs
local yesno = require('Module:Yesno')

-- Get a language object for formatDate and ucfirst.
local lang = mw.language.getContentLanguage()

-- Define constants
local CONFIG_MODULE = 'Module:Message box/configuration'

--------------------------------------------------------------------------------
-- Helper functions
--------------------------------------------------------------------------------

local function getTitleObject(...)
	-- Get the title object, passing the function through pcall
	-- in case we are over the expensive function count limit.
	local success, title = pcall(mw.title.new, ...)
	if success then
		return title
	end
end

local function union(t1, t2)
	-- Returns the union of two arrays.
	local vals = {}
	for i, v in ipairs(t1) do
		vals[v] = true
	end
	for i, v in ipairs(t2) do
		vals[v] = true
	end
	local ret = {}
	for k in pairs(vals) do
		table.insert(ret, k)
	end
	table.sort(ret)
	return ret
end

local function getArgNums(args, prefix)
	local nums = {}
	for k, v in pairs(args) do
		local num = mw.ustring.match(tostring(k), '^' .. prefix .. '([1-9]%d*)$')
		if num then
			table.insert(nums, tonumber(num))
		end
	end
	table.sort(nums)
	return nums
end

--------------------------------------------------------------------------------
-- Box class definition
--------------------------------------------------------------------------------

local MessageBox = {}
MessageBox.__index = MessageBox

function MessageBox.new(boxType, args, cfg)
	args = args or {}
	local obj = {}

	-- Set the title object and the namespace.
	obj.title = getTitleObject(args.page) or mw.title.getCurrentTitle()

	-- Set the config for our box type.
	obj.cfg = cfg[boxType]
	if not obj.cfg then
		local ns = obj.title.namespace
		-- boxType is "mbox" or invalid input
		if ns == 0 then
			obj.cfg = cfg.ambox -- main namespace
		elseif ns == 6 then
			obj.cfg = cfg.imbox -- file namespace
		elseif ns == 14 then
			obj.cfg = cfg.cmbox -- category namespace
		else
			local nsTable = mw.site.namespaces[ns]
			if nsTable and nsTable.isTalk then
				obj.cfg = cfg.tmbox -- any talk namespace
			else
				obj.cfg = cfg.ombox -- other namespaces or invalid input
			end
		end
	end

	-- Set the arguments, and remove all blank arguments except for the ones
	-- listed in cfg.allowBlankParams.
	do
		local newArgs = {}
		for k, v in pairs(args) do
			if v ~= '' then
				newArgs[k] = v
			end
		end
		for i, param in ipairs(obj.cfg.allowBlankParams or {}) do
			newArgs[param] = args[param]
		end
		obj.args = newArgs
	end

	-- Define internal data structure.
	obj.categories = {}
	obj.classes = {}
	-- For lazy loading of [[Module:Category handler]].
	obj.hasCategories = false

	return setmetatable(obj, MessageBox)
end

function MessageBox:addCat(ns, cat, sort)
	if not cat then
		return nil
	end
	if sort then
		cat = string.format('[[Category:%s|%s]]', cat, sort)
	else
		cat = string.format('[[Category:%s]]', cat)
	end
	self.hasCategories = true
	self.categories[ns] = self.categories[ns] or {}
	table.insert(self.categories[ns], cat)
end

function MessageBox:addClass(class)
	if not class then
		return nil
	end
	table.insert(self.classes, class)
end

function MessageBox:setParameters()
	local args = self.args
	local cfg = self.cfg

	-- Get type data.
	self.type = args.type
	local typeData = cfg.types[self.type]
	self.invalidTypeError = cfg.showInvalidTypeError
		and self.type
		and not typeData
	typeData = typeData or cfg.types[cfg.default]
	self.typeClass = typeData.class
	self.typeImage = typeData.image

	-- Find if the box has been wrongly substituted.
	self.isSubstituted = cfg.substCheck and args.subst == 'SUBST'

	-- Find whether we are using a small message box.
	self.isSmall = cfg.allowSmall and (
		cfg.smallParam and args.small == cfg.smallParam
		or not cfg.smallParam and yesno(args.small)
	)

	-- Add attributes, classes and styles.
	self.id = args.id
	if yesno(args.plainlinks) ~= false then
		self:addClass('plainlinks')
	end
	for _, class in ipairs(cfg.classes or {}) do
		self:addClass(class)
	end
	if self.isSmall then
		self:addClass(cfg.smallClass or 'mbox-small')
	end
	self:addClass(self.typeClass)
	self:addClass(args.class)
	self.style = args.style
	self.attrs = args.attrs

	-- Set text style.
	self.textstyle = args.textstyle

	-- Find if we are on the template page or not. This functionality is only
	-- used if useCollapsibleTextFields is set, or if both cfg.templateCategory
	-- and cfg.templateCategoryRequireName are set.
	self.useCollapsibleTextFields = cfg.useCollapsibleTextFields
	if self.useCollapsibleTextFields
		or cfg.templateCategory
		and cfg.templateCategoryRequireName
	then
		self.name = args.name
		if self.name then
			local templateName = mw.ustring.match(
				self.name,
				'^[tT][eE][mM][pP][lL][aA][tT][eE][%s_]*:[%s_]*(.*)$'
			) or self.name
			templateName = 'Template:' .. templateName
			self.templateTitle = getTitleObject(templateName)
		end
		self.isTemplatePage = self.templateTitle
			and mw.title.equals(self.title, self.templateTitle)
	end

	-- Process data for collapsible text fields. At the moment these are only
	-- used in {{ambox}}.
	if self.useCollapsibleTextFields then
		-- Get the self.issue value.
		if self.isSmall and args.smalltext then
			self.issue = args.smalltext
		else
			local sect
			if args.sect == '' then
				sect = 'This ' .. (cfg.sectionDefault or 'page')
			elseif type(args.sect) == 'string' then
				sect = 'This ' .. args.sect
			end
			local issue = args.issue
			issue = type(issue) == 'string' and issue ~= '' and issue or nil
			local text = args.text
			text = type(text) == 'string' and text or nil
			local issues = {}
			table.insert(issues, sect)
			table.insert(issues, issue)
			table.insert(issues, text)
			self.issue = table.concat(issues, ' ')
		end

		-- Get the self.talk value.
		local talk = args.talk
		-- Show talk links on the template page or template subpages if the talk
		-- parameter is blank.
		if talk == ''
			and self.templateTitle
			and (
				mw.title.equals(self.templateTitle, self.title)
				or self.title:isSubpageOf(self.templateTitle)
			)
		then
			talk = '#'
		elseif talk == '' then
			talk = nil
		end
		if talk then
			-- If the talk value is a talk page, make a link to that page. Else
			-- assume that it's a section heading, and make a link to the talk
			-- page of the current page with that section heading.
			local talkTitle = getTitleObject(talk)
			local talkArgIsTalkPage = true
			if not talkTitle or not talkTitle.isTalkPage then
				talkArgIsTalkPage = false
				talkTitle = getTitleObject(
					self.title.text,
					mw.site.namespaces[self.title.namespace].talk.id
				)
			end
			if talkTitle and talkTitle.exists then
				local talkText = 'Relevant discussion may be found on'
				if talkArgIsTalkPage then
					talkText = string.format(
						'%s [[%s|%s]].',
						talkText,
						talk,
						talkTitle.prefixedText
					)
				else
					talkText = string.format(
						'%s the [[%s#%s|talk page]].',
						talkText,
						talkTitle.prefixedText,
						talk
					)
				end
				self.talk = talkText
			end
		end

		-- Get other values.
		self.fix = args.fix ~= '' and args.fix or nil
		local date
		if args.date and args.date ~= '' then
			date = args.date
		elseif args.date == '' and self.isTemplatePage then
			date = lang:formatDate('F Y')
		end
		if date then
			self.date = string.format(" &lt;small&gt;''(%s)''&lt;/small&gt;", date)
		end
		self.info = args.info
		if yesno(args.removalnotice) then
			self.removalNotice = cfg.removalNotice
		end
	end

	-- Set the non-collapsible text field. At the moment this is used by all box
	-- types other than ambox, and also by ambox when small=yes.
	if self.isSmall then
		self.text = args.smalltext or args.text
	else
		self.text = args.text
	end

	-- Set the below row.
	self.below = cfg.below and args.below

	-- General image settings.
	self.imageCellDiv = not self.isSmall and cfg.imageCellDiv
	self.imageEmptyCell = cfg.imageEmptyCell
	if cfg.imageEmptyCellStyle then
		self.imageEmptyCellStyle = 'border:none;padding:0px;width:1px'
	end

	-- Left image settings.
	local imageLeft = self.isSmall and args.smallimage or args.image
	if cfg.imageCheckBlank and imageLeft ~= 'blank' and imageLeft ~= 'none'
		or not cfg.imageCheckBlank and imageLeft ~= 'none'
	then
		self.imageLeft = imageLeft
		if not imageLeft then
			local imageSize = self.isSmall
				and (cfg.imageSmallSize or '30x30px')
				or '40x40px'
			self.imageLeft = string.format('[[File:%s|%s|link=|alt=]]', self.typeImage
				or 'Imbox notice.png', imageSize)
		end
	end

	-- Right image settings.
	local imageRight = self.isSmall and args.smallimageright or args.imageright
	if not (cfg.imageRightNone and imageRight == 'none') then
		self.imageRight = imageRight
	end
end

function MessageBox:setMainspaceCategories()
	local args = self.args
	local cfg = self.cfg

	if not cfg.allowMainspaceCategories then
		return nil
	end

	local nums = {}
	for _, prefix in ipairs{'cat', 'category', 'all'} do
		args[prefix .. '1'] = args[prefix]
		nums = union(nums, getArgNums(args, prefix))
	end

	-- The following is roughly equivalent to the old {{Ambox/category}}.
	local date = args.date
	date = type(date) == 'string' and date
	local preposition = 'from'
	for _, num in ipairs(nums) do
		local mainCat = args['cat' .. tostring(num)]
			or args['category' .. tostring(num)]
		local allCat = args['all' .. tostring(num)]
		mainCat = type(mainCat) == 'string' and mainCat
		allCat = type(allCat) == 'string' and allCat
		if mainCat and date and date ~= '' then
			local catTitle = string.format('%s %s %s', mainCat, preposition, date)
			self:addCat(0, catTitle)
			catTitle = getTitleObject('Category:' .. catTitle)
			if not catTitle or not catTitle.exists then
				self:addCat(0, 'Articles with invalid date parameter in template')
			end
		elseif mainCat and (not date or date == '') then
			self:addCat(0, mainCat)
		end
		if allCat then
			self:addCat(0, allCat)
		end
	end
end

function MessageBox:setTemplateCategories()
	local args = self.args
	local cfg = self.cfg

	-- Add template categories.
	if cfg.templateCategory then
		if cfg.templateCategoryRequireName then
			if self.isTemplatePage then
				self:addCat(10, cfg.templateCategory)
			end
		elseif not self.title.isSubpage then
			self:addCat(10, cfg.templateCategory)
		end
	end

	-- Add template error categories.
	if cfg.templateErrorCategory then
		local templateErrorCategory = cfg.templateErrorCategory
		local templateCat, templateSort
		if not self.name and not self.title.isSubpage then
			templateCat = templateErrorCategory
		elseif self.isTemplatePage then
			local paramsToCheck = cfg.templateErrorParamsToCheck or {}
			local count = 0
			for i, param in ipairs(paramsToCheck) do
				if not args[param] then
					count = count + 1
				end
			end
			if count &gt; 0 then
				templateCat = templateErrorCategory
				templateSort = tostring(count)
			end
			if self.categoryNums and #self.categoryNums &gt; 0 then
				templateCat = templateErrorCategory
				templateSort = 'C'
			end
		end
		self:addCat(10, templateCat, templateSort)
	end
end

function MessageBox:setAllNamespaceCategories()
	-- Set categories for all namespaces.
	if self.invalidTypeError then
		local allSort = (self.title.namespace == 0 and 'Main:' or '') .. self.title.prefixedText
		self:addCat('all', 'Wikipedia message box parameter needs fixing', allSort)
	end
	if self.isSubstituted then
		self:addCat('all', 'Pages with incorrectly substituted templates')
	end
end

function MessageBox:setCategories()
	if self.title.namespace == 0 then
		self:setMainspaceCategories()
	elseif self.title.namespace == 10 then
		self:setTemplateCategories()
	end
	self:setAllNamespaceCategories()
end

function MessageBox:renderCategories()
	if not self.hasCategories then
		-- No categories added, no need to pass them to Category handler so,
		-- if it was invoked, it would return the empty string.
		-- So we shortcut and return the empty string.
		return ""
	end
	-- Convert category tables to strings and pass them through
	-- [[Module:Category handler]].
	return require('Module:Category handler')._main{
		main = table.concat(self.categories[0] or {}),
		template = table.concat(self.categories[10] or {}),
		all = table.concat(self.categories.all or {}),
		nocat = self.args.nocat,
		page = self.args.page
	}
end

function MessageBox:export()
	local root = mw.html.create()

	-- Add the subst check error.
	if self.isSubstituted and self.name then
		root:tag('b')
			:addClass('error')
			:wikitext(string.format(
				'Template &lt;code&gt;%s[[Template:%s|%s]]%s&lt;/code&gt; has been incorrectly substituted.',
				mw.text.nowiki('{{'), self.name, self.name, mw.text.nowiki('}}')
			))
	end

	-- Create the box table.
	local boxTable = root:tag('table')
	boxTable:attr('id', self.id or nil)
	for i, class in ipairs(self.classes or {}) do
		boxTable:addClass(class or nil)
	end
	boxTable
		:cssText(self.style or nil)
		:attr('role', 'presentation')

	if self.attrs then
		boxTable:attr(self.attrs)
	end

	-- Add the left-hand image.
	local row = boxTable:tag('tr')
	if self.imageLeft then
		local imageLeftCell = row:tag('td'):addClass('mbox-image')
		if self.imageCellDiv then
			-- If we are using a div, redefine imageLeftCell so that the image
			-- is inside it. Divs use style="width: 52px;", which limits the
			-- image width to 52px. If any images in a div are wider than that,
			-- they may overlap with the text or cause other display problems.
			imageLeftCell = imageLeftCell:tag('div'):css('width', '52px')
		end
		imageLeftCell:wikitext(self.imageLeft or nil)
	elseif self.imageEmptyCell then
		-- Some message boxes define an empty cell if no image is specified, and
		-- some don't. The old template code in templates where empty cells are
		-- specified gives the following hint: "No image. Cell with some width
		-- or padding necessary for text cell to have 100% width."
		row:tag('td')
			:addClass('mbox-empty-cell')
			:cssText(self.imageEmptyCellStyle or nil)
	end

	-- Add the text.
	local textCell = row:tag('td'):addClass('mbox-text')
	if self.useCollapsibleTextFields then
		-- The message box uses advanced text parameters that allow things to be
		-- collapsible. At the moment, only ambox uses this.
		textCell:cssText(self.textstyle or nil)
		local textCellDiv = textCell:tag('div')
		textCellDiv
			:addClass('mbox-text-span')
			:wikitext(self.issue or nil)
		if (self.talk or self.fix) and not self.isSmall then
			textCellDiv:tag('span')
				:addClass('hide-when-compact')
				:wikitext(self.talk and (' ' .. self.talk) or nil)
				:wikitext(self.fix and (' ' .. self.fix) or nil)
		end
		textCellDiv:wikitext(self.date and (' ' .. self.date) or nil)
		if self.info and not self.isSmall then
			textCellDiv
				:tag('span')
				:addClass('hide-when-compact')
				:wikitext(self.info and (' ' .. self.info) or nil)
		end
		if self.removalNotice then
			textCellDiv:tag('small')
				:addClass('hide-when-compact')
				:tag('i')
					:wikitext(string.format(" (%s)", self.removalNotice))
		end
	else
		-- Default text formatting - anything goes.
		textCell
			:cssText(self.textstyle or nil)
			:wikitext(self.text or nil)
	end

	-- Add the right-hand image.
	if self.imageRight then
		local imageRightCell = row:tag('td'):addClass('mbox-imageright')
		if self.imageCellDiv then
			-- If we are using a div, redefine imageRightCell so that the image
			-- is inside it.
			imageRightCell = imageRightCell:tag('div'):css('width', '52px')
		end
		imageRightCell
			:wikitext(self.imageRight or nil)
	end

	-- Add the below row.
	if self.below then
		boxTable:tag('tr')
			:tag('td')
				:attr('colspan', self.imageRight and '3' or '2')
				:addClass('mbox-text')
				:cssText(self.textstyle or nil)
				:wikitext(self.below or nil)
	end

	-- Add error message for invalid type parameters.
	if self.invalidTypeError then
		root:tag('div')
			:css('text-align', 'center')
			:wikitext(string.format(
				'This message box is using an invalid "type=%s" parameter and needs fixing.',
				self.type or ''
			))
	end

	-- Add categories.
	root:wikitext(self:renderCategories() or nil)

	return tostring(root)
end

--------------------------------------------------------------------------------
-- Exports
--------------------------------------------------------------------------------

local p, mt = {}, {}

function p._exportClasses()
	-- For testing.
	return {
		MessageBox = MessageBox
	}
end

function p.main(boxType, args, cfgTables)
	local box = MessageBox.new(boxType, args, cfgTables or mw.loadData(CONFIG_MODULE))
	box:setParameters()
	box:setCategories()
	return box:export()
end

function mt.__index(t, k)
	return function (frame)
		if not getArgs then
			getArgs = require('Module:Arguments').getArgs
		end
		return t.main(k, getArgs(frame, {trim = false, removeBlanks = false}))
	end
end

return setmetatable(p, mt)</text>
      <sha1>6r6gh40ujwjmoo5h9kc5j9ytuxwrvvy</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Message box/configuration</title>
    <ns>828</ns>
    <id>40627038</id>
    <revision>
      <id>742383738</id>
      <parentid>717357572</parentid>
      <timestamp>2016-10-03T11:04:13Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>allow all templates to disable the plainlinks class</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="6091">--------------------------------------------------------------------------------
--                          Message box configuration                         --
--                                                                            --
-- This module contains configuration data for [[Module:Message box]].        --
--------------------------------------------------------------------------------

return {
	ambox = {
		types = {
			speedy = {
				class = 'ambox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'ambox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'ambox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'ambox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'ambox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'ambox-protection',
				image = 'Padlock-silver-medium.svg'
			},
			notice = {
				class = 'ambox-notice',
				image = 'Information icon4.svg'
			}
		},
		default                     = 'notice',
		allowBlankParams            = {'talk', 'sect', 'date', 'issue', 'fix', 'subst', 'hidden'},
		allowSmall                  = true,
		smallParam                  = 'left',
		smallClass                  = 'mbox-small-left',
		substCheck                  = true,
		classes                     = {'metadata', 'ambox'},
		imageEmptyCell              = true,
		imageCheckBlank             = true,
		imageSmallSize              = '20x20px',
		imageCellDiv                = true,
		useCollapsibleTextFields    = true,
		imageRightNone              = true,
		sectionDefault              = 'article',
		allowMainspaceCategories    = true,
		templateCategory            = 'Article message templates',
	        templateCategoryRequireName = true,
		templateErrorCategory       = 'Article message templates with missing parameters',
		templateErrorParamsToCheck  = {'issue', 'fix', 'subst'},
		removalNotice               = '[[Help:Maintenance template removal|Learn how and when to remove this template message]]'
	},
	
	cmbox = {
		types = {
			speedy = {
				class = 'cmbox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'cmbox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'cmbox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'cmbox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'cmbox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'cmbox-protection',
				image = 'Padlock-silver-medium.svg'
			},
			notice = {
				class = 'cmbox-notice',
				image = 'Information icon4.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'cmbox'},
		imageEmptyCell       = true
	},
	
	fmbox = {
		types = {
			warning = {
				class = 'fmbox-warning',
				image = 'Ambox warning pn.svg'
			},
			editnotice = {
				class = 'fmbox-editnotice',
				image = 'Information icon4.svg'
			},
			system = {
				class = 'fmbox-system',
				image = 'Information icon4.svg'
			}
		},
		default              = 'system',
		showInvalidTypeError = true,
		classes              = {'fmbox'},
		imageEmptyCell       = false,
		imageRightNone       = false
	},
	
	imbox = {
		types = {
			speedy = {
				class = 'imbox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'imbox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'imbox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'imbox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'imbox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'imbox-protection',
				image = 'Padlock-silver-medium.svg'
			},
			license = {
				class = 'imbox-license licensetpl',
				image = 'Imbox license.png' -- @todo We need an SVG version of this
			},
			featured = {
				class = 'imbox-featured',
				image = 'Cscr-featured.svg'
			},
			notice = {
				class = 'imbox-notice',
				image = 'Information icon4.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'imbox'},
		imageEmptyCell       = true,
		below                = true,
		templateCategory     = 'File message boxes'
	},
	
	ombox = {
		types = {
			speedy = {
				class = 'ombox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'ombox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'ombox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'ombox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'ombox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'ombox-protection',
				image = 'Padlock-silver-medium.svg'
			},
			notice = {
				class = 'ombox-notice',
				image = 'Information icon4.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'ombox'},
		allowSmall           = true,
		imageEmptyCell       = true,
		imageRightNone       = true
	},
	
	tmbox = {
		types = {
			speedy = {
				class = 'tmbox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'tmbox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'tmbox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'tmbox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'tmbox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'tmbox-protection',
				image = 'Padlock-silver-medium.svg'
			},
			notice = {
				class = 'tmbox-notice',
				image = 'Information icon4.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'tmbox'},
		allowSmall           = true,
		imageRightNone       = true,
		imageEmptyCell       = true,
		imageEmptyCellStyle  = true,
		templateCategory     = 'Talk message boxes'
	}
}</text>
      <sha1>16xsc67jviirmw0nf2yuxvotqd7rygq</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Namespace detect</title>
    <ns>828</ns>
    <id>39762919</id>
    <revision>
      <id>602886406</id>
      <parentid>601020017</parentid>
      <timestamp>2014-04-05T17:01:23Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>use demopage instead of page as the main "page" parameter</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="5992">--[[
--------------------------------------------------------------------------------
--                                                                            --
--                            NAMESPACE DETECT                                --
--                                                                            --
-- This module implements the {{namespace detect}} template in Lua, with a    --
-- few improvements: all namespaces and all namespace aliases are supported,  --
-- and namespace names are detected automatically for the local wiki. The     --
-- module can also use the corresponding subject namespace value if it is     --
-- used on a talk page. Parameter names can be configured for different wikis --
-- by altering the values in the "cfg" table in                               --
-- Module:Namespace detect/config.                                            --
--                                                                            --
--------------------------------------------------------------------------------
--]]

local data = mw.loadData('Module:Namespace detect/data')
local argKeys = data.argKeys
local cfg = data.cfg
local mappings = data.mappings

local yesno = require('Module:Yesno')
local mArguments -- Lazily initialise Module:Arguments
local mTableTools -- Lazily initilalise Module:TableTools
local ustringLower = mw.ustring.lower

local p = {}

local function fetchValue(t1, t2)
	-- Fetches a value from the table t1 for the first key in array t2 where
	-- a non-nil value of t1 exists.
	for i, key in ipairs(t2) do
		local value = t1[key]
		if value ~= nil then
			return value
		end
	end
	return nil
end

local function equalsArrayValue(t, value)
	-- Returns true if value equals a value in the array t. Otherwise
	-- returns false.
	for i, arrayValue in ipairs(t) do
		if value == arrayValue then
			return true
		end
	end
	return false
end

function p.getPageObject(page)
	-- Get the page object, passing the function through pcall in case of
	-- errors, e.g. being over the expensive function count limit.
	if page then
		local success, pageObject = pcall(mw.title.new, page)
		if success then
			return pageObject
		else
			return nil
		end
	else
		return mw.title.getCurrentTitle()
	end
end

-- Provided for backward compatibility with other modules
function p.getParamMappings()
	return mappings
end

local function getNamespace(args)
	-- This function gets the namespace name from the page object.
	local page = fetchValue(args, argKeys.demopage)
	if page == '' then
		page = nil
	end
	local demospace = fetchValue(args, argKeys.demospace)
	if demospace == '' then
		demospace = nil
	end
	local subjectns = fetchValue(args, argKeys.subjectns)
	local ret
	if demospace then
		-- Handle "demospace = main" properly.
		if equalsArrayValue(argKeys.main, ustringLower(demospace)) then
			ret = mw.site.namespaces[0].name
		else
			ret = demospace
		end
	else
		local pageObject = p.getPageObject(page)
		if pageObject then
			if pageObject.isTalkPage then
				-- Get the subject namespace if the option is set,
				-- otherwise use "talk".
				if yesno(subjectns) then
					ret = mw.site.namespaces[pageObject.namespace].subject.name
				else
					ret = 'talk'
				end
			else
				ret = pageObject.nsText
			end
		else
			return nil -- return nil if the page object doesn't exist.
		end
	end
	ret = ret:gsub('_', ' ')
	return ustringLower(ret)
end

function p._main(args)
	-- Check the parameters stored in the mappings table for any matches.
	local namespace = getNamespace(args) or 'other' -- "other" avoids nil table keys
	local params = mappings[namespace] or {}
	local ret = fetchValue(args, params)
	--[[
	-- If there were no matches, return parameters for other namespaces.
	-- This happens if there was no text specified for the namespace that
	-- was detected or if the demospace parameter is not a valid
	-- namespace. Note that the parameter for the detected namespace must be
	-- completely absent for this to happen, not merely blank.
	--]]
	if ret == nil then
		ret = fetchValue(args, argKeys.other)
	end
	return ret
end

function p.main(frame)
	mArguments = require('Module:Arguments')
	local args = mArguments.getArgs(frame, {removeBlanks = false})
	local ret = p._main(args)
	return ret or ''
end

function p.table(frame)
	--[[
	-- Create a wikitable of all subject namespace parameters, for
	-- documentation purposes. The talk parameter is optional, in case it
	-- needs to be excluded in the documentation.
	--]]
	
	-- Load modules and initialise variables.
	mTableTools = require('Module:TableTools')
	local namespaces = mw.site.namespaces
	local cfg = data.cfg
	local useTalk = type(frame) == 'table' 
		and type(frame.args) == 'table' 
		and yesno(frame.args.talk) -- Whether to use the talk parameter.
	
	-- Get the header names.
	local function checkValue(value, default)
		if type(value) == 'string' then
			return value
		else
			return default
		end
	end
	local nsHeader = checkValue(cfg.wikitableNamespaceHeader, 'Namespace')
	local aliasesHeader = checkValue(cfg.wikitableAliasesHeader, 'Aliases')

	-- Put the namespaces in order.
	local mappingsOrdered = {}
	for nsname, params in pairs(mappings) do
		if useTalk or nsname ~= 'talk' then
			local nsid = namespaces[nsname].id
			-- Add 1, as the array must start with 1; nsid 0 would be lost otherwise.
			nsid = nsid + 1 
			mappingsOrdered[nsid] = params
		end
	end
	mappingsOrdered = mTableTools.compressSparseArray(mappingsOrdered)

	-- Build the table.
	local ret = '{| class="wikitable"'
		.. '\n|-'
		.. '\n! ' .. nsHeader
		.. '\n! ' .. aliasesHeader
	for i, params in ipairs(mappingsOrdered) do
		for j, param in ipairs(params) do
			if j == 1 then
				ret = ret .. '\n|-'
					.. '\n| &lt;code&gt;' .. param .. '&lt;/code&gt;'
					.. '\n| '
			elseif j == 2 then
				ret = ret .. '&lt;code&gt;' .. param .. '&lt;/code&gt;'
			else
				ret = ret .. ', &lt;code&gt;' .. param .. '&lt;/code&gt;'
			end
		end
	end
	ret = ret .. '\n|-'
		.. '\n|}'
	return ret
end

return p</text>
      <sha1>j7kygz1y56jpz4doq0m2c6x1td5d8ar</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Namespace detect/config</title>
    <ns>828</ns>
    <id>42256703</id>
    <revision>
      <id>602886681</id>
      <parentid>602823531</parentid>
      <timestamp>2014-04-05T17:03:49Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>use cfg.demopage rather than cfg.page now that the default parameter has been changed on the /data page</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="3545">--------------------------------------------------------------------------------
--                    Namespace detect configuration data                     --
--                                                                            --
-- This module stores configuration data for Module:Namespace detect. Here    --
-- you can localise the module to your wiki's language.                       --
--                                                                            --
-- To activate a configuration item, you need to uncomment it. This means     --
-- that you need to remove the text "-- " at the start of the line.           --
--------------------------------------------------------------------------------

local cfg = {} -- Don't edit this line.

--------------------------------------------------------------------------------
--                              Parameter names                               --
-- These configuration items specify custom parameter names. Values added     --
-- here will work in addition to the default English parameter names.         --
-- To add one extra name, you can use this format:                            --
--                                                                            --
-- cfg.foo = 'parameter name'                                                 --
--                                                                            --
-- To add multiple names, you can use this format:                            --
--                                                                            --
-- cfg.foo = {'parameter name 1', 'parameter name 2', 'parameter name 3'}     --
--------------------------------------------------------------------------------

---- This parameter displays content for the main namespace:
-- cfg.main = 'main'

---- This parameter displays in talk namespaces:
-- cfg.talk = 'talk'

---- This parameter displays content for "other" namespaces (namespaces for which
---- parameters have not been specified):
-- cfg.other = 'other'

---- This parameter makes talk pages behave as though they are the corresponding
---- subject namespace. Note that this parameter is used with [[Module:Yesno]].
---- Edit that module to change the default values of "yes", "no", etc.
-- cfg.subjectns = 'subjectns'

---- This parameter sets a demonstration namespace:
-- cfg.demospace = 'demospace'

---- This parameter sets a specific page to compare:
cfg.demopage = 'page'

--------------------------------------------------------------------------------
--                           Table configuration                              --
-- These configuration items allow customisation of the "table" function,     --
-- used to generate a table of possible parameters in the module              --
-- documentation.                                                             --
--------------------------------------------------------------------------------

---- The header for the namespace column in the wikitable containing the list of
---- possible subject-space parameters.
-- cfg.wikitableNamespaceHeader = 'Namespace'

---- The header for the wikitable containing the list of possible subject-space
---- parameters.
-- cfg.wikitableAliasesHeader = 'Aliases'

--------------------------------------------------------------------------------
--                        End of configuration data                           --
--------------------------------------------------------------------------------

return cfg -- Don't edit this line.</text>
      <sha1>1o6ozz56i8q0xgyl6xa41n2v7kelhli</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Namespace detect/data</title>
    <ns>828</ns>
    <id>42257476</id>
    <revision>
      <id>602886511</id>
      <parentid>602823622</parentid>
      <timestamp>2014-04-05T17:02:16Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>bug fix - use the demospace parameter as both key and value in the argKeys table</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="2569">--------------------------------------------------------------------------------
--                          Namespace detect data                             --
-- This module holds data for [[Module:Namespace detect]] to be loaded per    --
-- page, rather than per #invoke, for performance reasons.                    --
--------------------------------------------------------------------------------

local cfg = require('Module:Namespace detect/config')

local function addKey(t, key, defaultKey)
	if key ~= defaultKey then
		t[#t + 1] = key
	end
end

-- Get a table of parameters to query for each default parameter name.
-- This allows wikis to customise parameter names in the cfg table while
-- ensuring that default parameter names will always work. The cfg table
-- values can be added as a string, or as an array of strings.

local defaultKeys = {
	'main',
	'talk',
	'other',
	'subjectns',
	'demospace',
	'demopage'
}

local argKeys = {}
for i, defaultKey in ipairs(defaultKeys) do
	argKeys[defaultKey] = {defaultKey}
end

for defaultKey, t in pairs(argKeys) do
	local cfgValue = cfg[defaultKey]
	local cfgValueType = type(cfgValue)
	if cfgValueType == 'string' then
		addKey(t, cfgValue, defaultKey)
	elseif cfgValueType == 'table' then
		for i, key in ipairs(cfgValue) do
			addKey(t, key, defaultKey)
		end
	end
	cfg[defaultKey] = nil -- Free the cfg value as we don't need it any more.
end

local function getParamMappings()
	--[[
	-- Returns a table of how parameter names map to namespace names. The keys
	-- are the actual namespace names, in lower case, and the values are the
	-- possible parameter names for that namespace, also in lower case. The
	-- table entries are structured like this:
	-- {
	--   [''] = {'main'},
	--   ['wikipedia'] = {'wikipedia', 'project', 'wp'},
	--   ...
	-- }
	--]]
	local mappings = {}
	local mainNsName = mw.site.subjectNamespaces[0].name
	mainNsName = mw.ustring.lower(mainNsName)
	mappings[mainNsName] = mw.clone(argKeys.main)
	mappings['talk'] = mw.clone(argKeys.talk)
	for nsid, ns in pairs(mw.site.subjectNamespaces) do
		if nsid ~= 0 then -- Exclude main namespace.
			local nsname = mw.ustring.lower(ns.name)
			local canonicalName = mw.ustring.lower(ns.canonicalName)
			mappings[nsname] = {nsname}
			if canonicalName ~= nsname then
				table.insert(mappings[nsname], canonicalName)
			end
			for _, alias in ipairs(ns.aliases) do
				table.insert(mappings[nsname], mw.ustring.lower(alias))
			end
		end
	end
	return mappings
end

return {
	argKeys = argKeys,
	cfg = cfg,
	mappings = getParamMappings()
}</text>
      <sha1>ojp6d3pc8mql5nufaqdg576c9so3479</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Navbar</title>
    <ns>828</ns>
    <id>38827227</id>
    <revision>
      <id>835774036</id>
      <parentid>835562114</parentid>
      <timestamp>2018-04-10T17:55:58Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <comment>another local</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="3091">local p = {}

local getArgs
local ul

function p.addItem (mini, full, link, descrip, args, url)
	local l
	if url then
		l = {'[', '', ']'}
	else
		l = {'[[', '|', ']]'}
	end
	ul:tag('li')
		:addClass('nv-'..full)
		:wikitext(l[1] .. link .. l[2])
		:tag(args.mini and 'abbr' or 'span')
			:attr('title', descrip..' this template')
			:cssText(args.fontstyle)
			:wikitext(args.mini and mini or full)
			:done()
		:wikitext(l[3])
end

function p.brackets (position, c, args, div)
	if args.brackets then
		div
			:tag('span')
				:css('margin-'..position, '-0.125em')
				:cssText(args.fontstyle)
				:wikitext(c)
	end
end

function p._navbar(args)
	local show = {true, true, true, false, false, false}
	local titleArg = 1
	
	if args.collapsible then
		titleArg = 2
		if not args.plain then args.mini = 1 end
		if args.fontcolor then
			args.fontstyle = 'color:' .. args.fontcolor .. ';'
		end
		args.style = 'float:left; text-align:left'
	end
	
	if args.template then
		titleArg = 'template'
		show = {true, false, false, false, false, false}
		local index = {t = 2, d = 2, e = 3, h = 4, m = 5, w = 6, talk = 2, edit = 3, hist = 4, move = 5, watch = 6}
		for k,v in ipairs(require ('Module:TableTools').compressSparseArray(args)) do
			local num = index[v]
			if num then show[num] = true end
		end
	end
	
	if args.noedit then show[3] = false end
	
	local titleText = args[titleArg] or (':' .. mw.getCurrentFrame():getParent():getTitle())
	local title = mw.title.new(mw.text.trim(titleText), 'Template')
	if not title then
		error('Invalid title ' .. titleText)
	end
	local talkpage = title.talkPageTitle and title.talkPageTitle.fullText or ''
	
	local div = mw.html.create():tag('div')
	div
		:addClass('plainlinks')
		:addClass('hlist')
		:addClass('navbar')
		:cssText(args.style)

	if args.mini then div:addClass('mini') end

	if not (args.mini or args.plain) then
		div
			:tag('span')
				:css('word-spacing', 0)
				:cssText(args.fontstyle)
				:wikitext(args.text or 'This box:')
				:wikitext(' ')
	end
	
	p.brackets('right', '&amp;#91; ', args, div)
	
	ul = div:tag('ul')
	if show[1] then p.addItem('v', 'view', title.fullText, 'View', args) end
	if show[2] then p.addItem('t', 'talk', talkpage, 'Discuss', args) end
	if show[3] then p.addItem('e', 'edit', title:fullUrl('action=edit'), 'Edit', args, true) end
	if show[4] then p.addItem('h', 'hist', title:fullUrl('action=history'), 'History of', args, true) end
	if show[5] then
		local move = mw.title.new ('Special:Movepage')
		p.addItem('m', 'move', move:fullUrl('target='..title.fullText), 'Move', args, true) end
	if show[6] then p.addItem('w', 'watch', title:fullUrl('action=watch'), 'Watch', args, true) end
	
	p.brackets('left', ' &amp;#93;', args, div)
	
	if args.collapsible then
		div
			:done()
		:tag('div')
			:css('font-size', '114%')
			:css('margin', args.mini and '0 4em' or '0 7em')
			:cssText(args.fontstyle)
			:wikitext(args[1])
	end

	return tostring(div:done())
end

function p.navbar(frame)
	if not getArgs then
		getArgs = require('Module:Arguments').getArgs
	end
	return p._navbar(getArgs(frame))
end

return p</text>
      <sha1>0kto9e56pycr6rz0vadnqvghkpm06x9</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Navbox</title>
    <ns>828</ns>
    <id>38634746</id>
    <revision>
      <id>852225319</id>
      <parentid>852225230</parentid>
      <timestamp>2018-07-27T13:10:53Z</timestamp>
      <contributor>
        <username>Frietjes</username>
        <id>13791031</id>
      </contributor>
      <comment>typo</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="12761">--
-- This module implements {{Navbox}}
--

local p = {}

local navbar = require('Module:Navbar')._navbar
local getArgs -- lazily initialized

local args
local border
local listnums = {}
local ODD_EVEN_MARKER = '\127_ODDEVEN_\127'
local RESTART_MARKER = '\127_ODDEVEN0_\127'
local REGEX_MARKER = '\127_ODDEVEN(%d?)_\127'

local function striped(wikitext)
	-- Return wikitext with markers replaced for odd/even striping.
	-- Child (subgroup) navboxes are flagged with a category that is removed
	-- by parent navboxes. The result is that the category shows all pages
	-- where a child navbox is not contained in a parent navbox.
	local orphanCat = '[[Category:Navbox orphans]]'
	if border == 'subgroup' and args.orphan ~= 'yes' then
		-- No change; striping occurs in outermost navbox.
		return wikitext .. orphanCat
	end
	local first, second = 'odd', 'even'
	if args.evenodd then
		if args.evenodd == 'swap' then
			first, second = second, first
		else
			first = args.evenodd
			second = first
		end
	end
	local changer
	if first == second then
		changer = first
	else
		local index = 0
		changer = function (code)
			if code == '0' then
				-- Current occurrence is for a group before a nested table.
				-- Set it to first as a valid although pointless class.
				-- The next occurrence will be the first row after a title
				-- in a subgroup and will also be first.
				index = 0
				return first
			end
			index = index + 1
			return index % 2 == 1 and first or second
		end
	end
	local regex = orphanCat:gsub('([%[%]])', '%%%1')
	return (wikitext:gsub(regex, ''):gsub(REGEX_MARKER, changer))  -- () omits gsub count
end

local function processItem(item, nowrapitems)
	if item:sub(1, 2) == '{|' then
		-- Applying nowrap to lines in a table does not make sense.
		-- Add newlines to compensate for trim of x in |parm=x in a template.
		return '\n' .. item ..'\n'
	end
	if nowrapitems == 'yes' then
		local lines = {}
		for line in (item .. '\n'):gmatch('([^\n]*)\n') do
			local prefix, content = line:match('^([*:;#]+)%s*(.*)')
			if prefix and not content:match('^&lt;span class="nowrap"&gt;') then
				line = prefix .. '&lt;span class="nowrap"&gt;' .. content .. '&lt;/span&gt;'
			end
			table.insert(lines, line)
		end
		item = table.concat(lines, '\n')
	end
	if item:match('^[*:;#]') then
		return '\n' .. item ..'\n'
	end
	return item
end

local function renderNavBar(titleCell)

	if args.navbar ~= 'off' and args.navbar ~= 'plain' and not (not args.name and mw.getCurrentFrame():getParent():getTitle():gsub('/sandbox$', '') == 'Template:Navbox') then
		titleCell:wikitext(navbar{
			args.name,
			mini = 1,
			fontstyle = (args.basestyle or '') .. ';' .. (args.titlestyle or '') .. ';background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none; padding:0;'
		})
	end

end

--
--   Title row
--
local function renderTitleRow(tbl)
	if not args.title then return end

	local titleRow = tbl:tag('tr')

	if args.titlegroup then
		titleRow
			:tag('th')
				:attr('scope', 'row')
				:addClass('navbox-group')
				:addClass(args.titlegroupclass)
				:cssText(args.basestyle)
				:cssText(args.groupstyle)
				:cssText(args.titlegroupstyle)
				:wikitext(args.titlegroup)
	end

	local titleCell = titleRow:tag('th'):attr('scope', 'col')

	if args.titlegroup then
		titleCell
			:css('border-left', '2px solid #fdfdfd')
			:css('width', '100%')
	end

	local titleColspan = 2
	if args.imageleft then titleColspan = titleColspan + 1 end
	if args.image then titleColspan = titleColspan + 1 end
	if args.titlegroup then titleColspan = titleColspan - 1 end

	titleCell
		:cssText(args.basestyle)
		:cssText(args.titlestyle)
		:addClass('navbox-title')
		:attr('colspan', titleColspan)

	renderNavBar(titleCell)

	titleCell
		:tag('div')
			-- id for aria-labelledby attribute
			:attr('id', mw.uri.anchorEncode(args.title))
			:addClass(args.titleclass)
			:css('font-size', '114%')
			:css('margin', '0 4em')
			:wikitext(processItem(args.title))
end

--
--   Above/Below rows
--

local function getAboveBelowColspan()
	local ret = 2
	if args.imageleft then ret = ret + 1 end
	if args.image then ret = ret + 1 end
	return ret
end

local function renderAboveRow(tbl)
	if not args.above then return end

	tbl:tag('tr')
		:tag('td')
			:addClass('navbox-abovebelow')
			:addClass(args.aboveclass)
			:cssText(args.basestyle)
			:cssText(args.abovestyle)
			:attr('colspan', getAboveBelowColspan())
			:tag('div')
				-- id for aria-labelledby attribute, if no title
				:attr('id', args.title and nil or mw.uri.anchorEncode(args.above))
				:wikitext(processItem(args.above, args.nowrapitems))
end

local function renderBelowRow(tbl)
	if not args.below then return end

	tbl:tag('tr')
		:tag('td')
			:addClass('navbox-abovebelow')
			:addClass(args.belowclass)
			:cssText(args.basestyle)
			:cssText(args.belowstyle)
			:attr('colspan', getAboveBelowColspan())
			:tag('div')
				:wikitext(processItem(args.below, args.nowrapitems))
end

--
--   List rows
--
local function renderListRow(tbl, index, listnum)
	local row = tbl:tag('tr')

	if index == 1 and args.imageleft then
		row
			:tag('td')
				:addClass('navbox-image')
				:addClass(args.imageclass)
				:css('width', '1px')               -- Minimize width
				:css('padding', '0px 2px 0px 0px')
				:cssText(args.imageleftstyle)
				:attr('rowspan', #listnums)
				:tag('div')
					:wikitext(processItem(args.imageleft))
	end

	if args['group' .. listnum] then
		local groupCell = row:tag('th')

		-- id for aria-labelledby attribute, if lone group with no title or above
		if listnum == 1 and not (args.title or args.above or args.group2) then
			groupCell
				:attr('id', mw.uri.anchorEncode(args.group1))
		end

		groupCell
			:attr('scope', 'row')
			:addClass('navbox-group')
			:addClass(args.groupclass)
			:cssText(args.basestyle)
            :css('width', args.groupwidth or '1%') -- If groupwidth not specified, minimize width

		groupCell
			:cssText(args.groupstyle)
			:cssText(args['group' .. listnum .. 'style'])
			:wikitext(args['group' .. listnum])
	end

	local listCell = row:tag('td')

	if args['group' .. listnum] then
		listCell
			:css('text-align', 'left')
			:css('border-left-width', '2px')
			:css('border-left-style', 'solid')
	else
		listCell:attr('colspan', 2)
	end

	if not args.groupwidth then
		listCell:css('width', '100%')
	end

	local rowstyle  -- usually nil so cssText(rowstyle) usually adds nothing
	if index % 2 == 1 then
		rowstyle = args.oddstyle
	else
		rowstyle = args.evenstyle
	end

	local listText = args['list' .. listnum]
	local oddEven = ODD_EVEN_MARKER
	if listText:sub(1, 12) == '&lt;/div&gt;&lt;table' then
		-- Assume list text is for a subgroup navbox so no automatic striping for this row.
		oddEven = listText:find('&lt;th[^&gt;]*"navbox%-title"') and RESTART_MARKER or 'odd'
	end
	listCell
		:css('padding', '0px')
		:cssText(args.liststyle)
		:cssText(rowstyle)
		:cssText(args['list' .. listnum .. 'style'])
		:addClass('navbox-list')
		:addClass('navbox-' .. oddEven)
		:addClass(args.listclass)
		:tag('div')
			:css('padding', (index == 1 and args.list1padding) or args.listpadding or '0em 0.25em')
			:wikitext(processItem(listText, args.nowrapitems))

	if index == 1 and args.image then
		row
			:tag('td')
				:addClass('navbox-image')
				:addClass(args.imageclass)
				:css('width', '1px')               -- Minimize width
				:css('padding', '0px 0px 0px 2px')
				:cssText(args.imagestyle)
				:attr('rowspan', #listnums)
				:tag('div')
					:wikitext(processItem(args.image))
	end
end


--
--   Tracking categories
--

local function needsHorizontalLists()
	if border == 'subgroup' or args.tracking == 'no' then
		return false
	end
	local listClasses = {
		['plainlist'] = true, ['hlist'] = true, ['hlist hnum'] = true,
		['hlist hwrap'] = true, ['hlist vcard'] = true, ['vcard hlist'] = true,
		['hlist vevent'] = true,
	}
	return not (listClasses[args.listclass] or listClasses[args.bodyclass])
end

local function hasBackgroundColors()
	for _, key in ipairs({'titlestyle', 'groupstyle', 'basestyle', 'abovestyle', 'belowstyle'}) do
		if tostring(args[key]):find('background', 1, true) then
			return true
		end
	end
end

local function hasBorders()
	for _, key in ipairs({'groupstyle', 'basestyle', 'abovestyle', 'belowstyle'}) do
		if tostring(args[key]):find('border', 1, true) then
			return true
		end
	end
end

local function isIllegible()
	local styleratio = require('Module:Color contrast')._styleratio

	for key, style in pairs(args) do
		if tostring(key):match("style$") then
			if styleratio{mw.text.unstripNoWiki(style)} &lt; 4.5 then
				return true
			end
		end
	end
	return false
end

local function getTrackingCategories()
	local cats = {}
	if needsHorizontalLists() then table.insert(cats, 'Navigational boxes without horizontal lists') end
	if hasBackgroundColors() then table.insert(cats, 'Navboxes using background colours') end
	if isIllegible() then table.insert(cats, 'Potentially illegible navboxes') end
	if hasBorders() then table.insert(cats, 'Navboxes using borders') end
	return cats
end

local function renderTrackingCategories(builder)
	local title = mw.title.getCurrentTitle()
	if title.namespace ~= 10 then return end -- not in template space
	local subpage = title.subpageText
	if subpage == 'doc' or subpage == 'sandbox' or subpage == 'testcases' then return end

	for _, cat in ipairs(getTrackingCategories()) do
		builder:wikitext('[[Category:' .. cat .. ']]')
	end
end

--
--   Main navbox tables
--
local function renderMainTable()
	local tbl = mw.html.create('table')
		:addClass('nowraplinks')
		:addClass(args.bodyclass)

	if args.title and (args.state ~= 'plain' and args.state ~= 'off') then
		tbl
			:addClass('collapsible')
			:addClass(args.state or 'autocollapse')
	end

	tbl:css('border-spacing', 0)
	if border == 'subgroup' or border == 'none' then
		tbl
			:addClass('navbox-subgroup')
			:cssText(args.bodystyle)
			:cssText(args.style)
	else  -- regular navbox - bodystyle and style will be applied to the wrapper table
		tbl
			:addClass('navbox-inner')
			:css('background', 'transparent')
			:css('color', 'inherit')
	end
	tbl:cssText(args.innerstyle)

	renderTitleRow(tbl)
	renderAboveRow(tbl)
	for i, listnum in ipairs(listnums) do
		renderListRow(tbl, i, listnum)
	end
	renderBelowRow(tbl)

	return tbl
end

function p._navbox(navboxArgs)
	args = navboxArgs

	for k, _ in pairs(args) do
		if type(k) == 'string' then
			local listnum = k:match('^list(%d+)$')
			if listnum then table.insert(listnums, tonumber(listnum)) end
		end
	end
	table.sort(listnums)

	border = mw.text.trim(args.border or args[1] or '')
	if border == 'child' then
		border = 'subgroup'
	end

	-- render the main body of the navbox
	local tbl = renderMainTable()

	-- render the appropriate wrapper around the navbox, depending on the border param
	local res = mw.html.create()
	if border == 'none' then
		local nav = res:tag('div')
			:attr('role', 'navigation')
			:node(tbl)
		-- aria-labelledby title, otherwise above, otherwise lone group
		if args.title or args.above or (args.group1 and not args.group2) then
			nav:attr('aria-labelledby', mw.uri.anchorEncode(args.title or args.above or args.group1))
		else
			nav:attr('aria-label', 'Navbox')
		end
	elseif border == 'subgroup' then
		-- We assume that this navbox is being rendered in a list cell of a parent navbox, and is
		-- therefore inside a div with padding:0em 0.25em. We start with a &lt;/div&gt; to avoid the
		-- padding being applied, and at the end add a &lt;div&gt; to balance out the parent's &lt;/div&gt;
		res
			:wikitext('&lt;/div&gt;')
			:node(tbl)
			:wikitext('&lt;div&gt;')
	else
		local nav = res:tag('div')
			:attr('role', 'navigation')
			:addClass('navbox')
			:cssText(args.bodystyle)
			:cssText(args.style)
			:css('padding', '3px')
			:node(tbl)
		-- aria-labelledby title, otherwise above, otherwise lone group
		if args.title or args.above or (args.group1 and not args.group2) then
			nav:attr('aria-labelledby', mw.uri.anchorEncode(args.title or args.above or args.group1))
		else
			nav:attr('aria-label', 'Navbox')
		end
	end

	renderTrackingCategories(res)

	return striped(tostring(res))
end

function p.navbox(frame)
	if not getArgs then
		getArgs = require('Module:Arguments').getArgs
	end
	args = getArgs(frame, {wrappers = {'Template:Navbox', 'Template:Navbox subgroup'}})
	if frame.args.border then
		-- This allows Template:Navbox_subgroup to use {{#invoke:Navbox|navbox|border=...}}.
		args.border = frame.args.border
	end

	-- Read the arguments in the order they'll be output in, to make references number in the right order.
	local _
	_ = args.title
	_ = args.above
	for i = 1, 20 do
		_ = args["group" .. tostring(i)]
		_ = args["list" .. tostring(i)]
	end
	_ = args.below

	return p._navbox(args)
end

return p</text>
      <sha1>nu5v2o7qy8lkltph07dqtlp1u6unvdl</sha1>
    </revision>
  </page>
  <page>
    <title>Module:No globals</title>
    <ns>828</ns>
    <id>42567026</id>
    <revision>
      <id>606781024</id>
      <parentid>605595284</parentid>
      <timestamp>2014-05-02T15:35:56Z</timestamp>
      <contributor>
        <username>Jackmcbarn</username>
        <id>19285809</id>
      </contributor>
      <comment>rm name exception</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="307">local mt = getmetatable(_G) or {}
function mt.__index (t, k)
	if k ~= 'arg' then
		error('Tried to read nil global ' .. tostring(k), 2)
	end
	return nil
end
function mt.__newindex(t, k, v)
	if k ~= 'arg' then
		error('Tried to write global ' .. tostring(k), 2)
	end
	rawset(t, k, v)
end
setmetatable(_G, mt)</text>
      <sha1>gggsv54pq7f94l3up48hr91qtxnskdm</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Ns has subpages</title>
    <ns>828</ns>
    <id>44657407</id>
    <revision>
      <id>637438142</id>
      <parentid>637436476</parentid>
      <timestamp>2014-12-10T06:37:29Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:Ns has subpages: [[WP:High-risk templates|High-risk Lua module]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="1678">-- This module implements [[Template:Ns has subpages]].
-- While the template is fairly simple, this information is made available to
-- Lua directly, so using a module means that we don't have to update the
-- template as new namespaces are added.

local p = {}

function p._main(ns, frame)
	-- Get the current namespace if we were not passed one.
	if not ns then
		ns = mw.title.getCurrentTitle().namespace
	end

	-- Look up the namespace table from mw.site.namespaces. This should work
	-- for a majority of cases.
	local nsTable = mw.site.namespaces[ns]

	-- Try using string matching to get the namespace from page names.
	-- Do a quick and dirty bad title check to try and make sure we do the same
	-- thing as {{NAMESPACE}} in most cases.
	if not nsTable and type(ns) == 'string' and not ns:find('[&lt;&gt;|%[%]{}]') then
		local nsStripped = ns:gsub('^[_%s]*:', '')
		nsStripped = nsStripped:gsub(':.*$', '')
		nsTable = mw.site.namespaces[nsStripped]
	end

	-- If we still have no match then try the {{NAMESPACE}} parser function,
	-- which should catch the remainder of cases. Don't use a mw.title object,
	-- as this would increment the expensive function count for each new page
	-- tested.
	if not nsTable then
		frame = frame or mw.getCurrentFrame()
		local nsProcessed = frame:callParserFunction('NAMESPACE', ns)
		nsTable = nsProcessed and mw.site.namespaces[nsProcessed]
	end
	
	return nsTable and nsTable.hasSubpages
end

function p.main(frame)
	local ns = frame:getParent().args[1]
	if ns then
		ns = ns:match('^%s*(.-)%s*$') -- trim whitespace
		ns = tonumber(ns) or ns
	end
	local hasSubpages = p._main(ns, frame)
	return hasSubpages and 'yes' or ''
end

return p</text>
      <sha1>qb0b1z2vff7kifnw21v205d791esbiz</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Pagetype</title>
    <ns>828</ns>
    <id>40875383</id>
    <revision>
      <id>602685322</id>
      <parentid>587904054</parentid>
      <timestamp>2014-04-04T05:55:12Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>Bug fixes - make page object detection respect defaultns with redirects, and fix mappings table handling after switch to mw.loadData. Also, move config data to [[Module:Pagetype/config]], plus beautification tweaks.</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="6396">--------------------------------------------------------------------------------
--                                                                            --
--                                PAGETYPE                                    --
--                                                                            --
--      This is a meta-module intended to replace {{pagetype}} and similar    --
--      templates. It automatically detects namespaces, and allows for a      --
--      great deal of customisation. It can easily be ported to other         --
--      wikis by changing the values in the [[Module:Pagetype/config]].       --
--                                                                            --
--------------------------------------------------------------------------------

-- Load config.
local cfg = mw.loadData('Module:Pagetype/config')

-- Load required modules.
local getArgs = require('Module:Arguments').getArgs
local yesno = require('Module:Yesno')
local nsDetectModule = require('Module:Namespace detect')
local nsDetect = nsDetectModule._main
local getParamMappings = nsDetectModule.getParamMappings
local getPageObject = nsDetectModule.getPageObject

local p = {}

local function shallowCopy(t)
	-- Makes a shallow copy of a table.
	local ret = {}
	for k, v in pairs(t) do
		ret[k] = v
	end
	return ret
end

local function checkPagetypeInput(namespace, val)
	-- Checks to see whether we need the default value for the given namespace,
	-- and if so gets it from the pagetypes table.
	-- The yesno function returns true/false for "yes", "no", etc., and returns
	-- val for other input.
	local ret = yesno(val, val)
	if ret and type(ret) ~= 'string' then
		ret = cfg.pagetypes[namespace]
	end
	return ret
end

local function getPagetypeFromClass(class, param, aliasTable, default)
	-- Gets the pagetype from a class specified from the first positional
	-- parameter.
	param = yesno(param, param)
	if param ~= false then -- No check if specifically disallowed.
		for _, alias in ipairs(aliasTable) do
			if class == alias then
				if type(param) == 'string' then
					return param
				else
					return default
				end
			end
		end
	end
end

local function getNsDetectValue(args)
	-- Builds the arguments to pass to [[Module:Namespace detect]] and returns
	-- the result.

	-- Get the default values.
	local ndArgs = {}
	local defaultns = args[cfg.defaultns]
	if defaultns == cfg.defaultnsAll then
		ndArgs = shallowCopy(cfg.pagetypes)
	else
		local defaultnsArray
		if defaultns == cfg.defaultnsExtended then
			defaultnsArray = cfg.extendedNamespaces
		elseif defaultns == cfg.defaultnsNone then
			defaultnsArray = {}
		else
			defaultnsArray = cfg.defaultNamespaces
		end
		for _, namespace in ipairs(defaultnsArray) do
			ndArgs[namespace] = cfg.pagetypes[namespace]
		end
	end

	--[[
	-- Add custom values passed in from the arguments. These overwrite the
	-- defaults. The possible argument names are fetched from
	-- Module:Namespace detect automatically in case new namespaces are
	-- added. Although we accept namespace aliases as parameters, we only pass
	-- the local namespace name as a parameter to Module:Namespace detect.
	-- This means that the "image" parameter can overwrite defaults for the
	-- File: namespace, which wouldn't work if we passed the parameters through
	-- separately.
	--]]
	local mappings = getParamMappings()
	for ns, paramAliases in pairs(mappings) do
		-- Copy the aliases table, as # doesn't work with tables returned from
		-- mw.loadData.
		paramAliases = shallowCopy(paramAliases)
		local paramName = paramAliases[1]
		-- Iterate backwards along the array so that any values for the local
		-- namespace names overwrite those for namespace aliases.
		for i = #paramAliases, 1, -1 do
			local paramAlias = paramAliases[i]
			local ndArg = checkPagetypeInput(paramAlias, args[paramAlias])
			if ndArg == false then
				-- If any arguments are false, convert them to nil to protect
				-- against breakage by future changes to
				-- [[Module:Namespace detect]].
				ndArgs[paramName] = nil
			elseif ndArg then
				ndArgs[paramName] = ndArg
			end
		end
	end
	-- Check for disambiguation-class and N/A-class pages in mainspace.
	if ndArgs.main then
		local class = args[1]
		if type(class) == 'string' then
			-- Put in lower case so e.g. "Dab" and "dab" will both match.
			class = mw.ustring.lower(class)
		end
		local dab = getPagetypeFromClass(
			class,
			args[cfg.dab],
			cfg.dabAliases,
			cfg.dabDefault
		)
		if dab then
			ndArgs.main = dab
		else
			local na = getPagetypeFromClass(
				class,
				args[cfg.na],
				cfg.naAliases,
				cfg.naDefault
			)
			if na then
				ndArgs.main = na
			end
		end
	end
	-- If there is no talk value specified, use the corresponding subject 
	-- namespace for talk pages.
	if not ndArgs.talk then
		ndArgs.subjectns = true
	end
	-- Add the fallback value. This can also be customised, but it cannot be
	-- disabled.
	local other = args[cfg.other]
	-- We will ignore true/false/nil results from yesno here, but using it
	-- anyway for consistency.
	other = yesno(other, other)
	if type(other) == 'string' then
		ndArgs.other = other
	else
		ndArgs.other = cfg.otherDefault
	end
	-- Allow custom page values.
	ndArgs.page = args.page
	return nsDetect(ndArgs)
end

local function detectRedirects(args)
	local redirect = args[cfg.redirect]
	-- The yesno function returns true/false for "yes", "no", etc., and returns
	-- redirect for other input.
	redirect = yesno(redirect, redirect)
	if redirect == false then
		-- Detect redirects unless they have been explicitly disallowed with
		-- "redirect=no" or similar.
		return
	end
	local pageObject = getPageObject(args.page)
	-- If we are using subject namespaces elsewhere, do so here as well.
	if pageObject
		and not yesno(args.talk, true)
		and args[cfg.defaultns] ~= cfg.defaultnsAll
	then
		pageObject = getPageObject(
			pageObject.subjectNsText .. ':' .. pageObject.text
		)
	end
	-- Allow custom values for redirects.
	if pageObject and pageObject.isRedirect then
		if type(redirect) == 'string' then
			return redirect
		else
			return cfg.redirectDefault
		end
	end
end

function p._main(args)
	local redirect = detectRedirects(args)
	if redirect then
		return redirect
	else
		return getNsDetectValue(args)
	end
end

function p.main(frame)
	local args = getArgs(frame)
	return p._main(args)
end

return p</text>
      <sha1>95yj90zj7nf2doh38om166uuyivtaoq</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Pagetype/config</title>
    <ns>828</ns>
    <id>42396800</id>
    <revision>
      <id>683099161</id>
      <parentid>628078748</parentid>
      <timestamp>2015-09-28T03:41:25Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>add the gadget and gadget definition namespaces per protected edit request by [[User:GeoffreyT2000]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="3776">--------------------------------------------------------------------------------
--                  Module:Pagetype configuration data                        --
-- This page holds localisation and configuration data for Module:Pagetype.   --
--------------------------------------------------------------------------------

local cfg = {} -- Don't edit this line.

--------------------------------------------------------------------------------
--                        Start configuration data                            --
--------------------------------------------------------------------------------

-- This table holds the values to use for "main=true", "user=true", etc. Keys to
-- this table should be namespace parameters that can be used with
-- [[Module:Namespace detect]]. 
cfg.pagetypes = {
	['main']              = 'article',
	['user']              = 'user page',
	['project']           = 'project page',
	['wikipedia']         = 'project page',
	['wp']                = 'project page',
	['file']              = 'file',
	['image']             = 'file',
	['mediawiki']         = 'interface page',
	['template']          = 'template',
	['help']              = 'help page',
	['category']          = 'category',
	['portal']            = 'portal',
	['book']              = 'book',
	['draft']             = 'draft',
	['education program'] = 'education program page',
	['timedtext']         = 'Timed Text page',
	['module']            = 'module',
	['topic']             = 'topic',
	['gadget']            = 'gadget',
	['gadget definition'] = 'gadget definition',
	['talk']              = 'talk page',
	['special']           = 'special page',
	['media']             = 'file',
}

-- This table holds the names of the namespaces to be looked up from
-- cfg.pagetypes by default.
cfg.defaultNamespaces = {
	'main',
	'file',
	'template',
	'category',
	'module',
	'book'
}

-- This table holds the names of the namespaces to be looked up from
-- cfg.pagetypes if cfg.defaultnsExtended is set.
cfg.extendedNamespaces = {
	'main',
	'user',
	'project',
	'file',
	'mediawiki',
	'template',
	'category',
	'help',
	'portal',
	'module',
	'book',
	'draft'
}

-- The parameter name to set which default namespace values to be looked up from
-- cfg.pagetypes.
cfg.defaultns = 'defaultns'

-- The value of cfg.defaultns to set all namespaces, including talk.
cfg.defaultnsAll = 'all'

-- The value of cfg.defaultns to set the namespaces listed in
-- cfg.extendedNamespaces
cfg.defaultnsExtended = 'extended'

-- The value of cfg.defaultns to set no default namespaces.
cfg.defaultnsNone = 'none'

-- The parameter name to use for disambiguation pages page.
cfg.dab = 'dab'

-- This table holds the different possible aliases for disambiguation-class
-- pages. These should be lower-case.
cfg.dabAliases = {
	'disambiguation',
	'disambig',
	'disamb',
	'dab'
}

-- The default value for disambiguation pages.
cfg.dabDefault = 'page'

-- The parameter name to use for N/A-class page.
cfg.na = 'na'

-- This table holds the different possible aliases for N/A-class pages. These
-- should be lower-case.
cfg.naAliases = {'na', 'n/a'}

-- The default value for N/A-class pages.
cfg.naDefault = 'page'

-- The parameter name to use for redirects.
cfg.redirect = 'redirect'

-- The default value to use for redirects.
cfg.redirectDefault = 'redirect'

-- The parameter name for undefined namespaces.
cfg.other = 'other'

-- The value used if the module detects an undefined namespace.
cfg.otherDefault = 'page'

--------------------------------------------------------------------------------
--                        End configuration data                              --
--------------------------------------------------------------------------------

return cfg -- Don't edit this line</text>
      <sha1>nsjvdnxzxja6ehw5fddooj4hmniipbh</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Portal</title>
    <ns>828</ns>
    <id>38965350</id>
    <revision>
      <id>752302732</id>
      <parentid>729840072</parentid>
      <timestamp>2016-11-30T14:58:40Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>quick hack to prevent p._image from returning filenames with things like "|border" in them</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="10273">--[==[ This module is a Lua implementation of the old {{Portal}} template. As of August 2013 it is used on nearly 5,000,000 articles.
-- Please take care when updating it! It outputs two functions: p.portal, which generates a list of portals, and p.image, which
-- produces the image name for an individual portal.

-- The portal image data is kept in submodules of [[Module:Portal/images]], listed below:
-- [[Module:Portal/images/a]]		- for portal names beginning with "A".
-- [[Module:Portal/images/b]]		- for portal names beginning with "B".
-- [[Module:Portal/images/c]]		- for portal names beginning with "C".
-- [[Module:Portal/images/d]]		- for portal names beginning with "D".
-- [[Module:Portal/images/e]]		- for portal names beginning with "E".
-- [[Module:Portal/images/f]]		- for portal names beginning with "F".
-- [[Module:Portal/images/g]]		- for portal names beginning with "G".
-- [[Module:Portal/images/h]]		- for portal names beginning with "H".
-- [[Module:Portal/images/i]]		- for portal names beginning with "I".
-- [[Module:Portal/images/j]]		- for portal names beginning with "J".
-- [[Module:Portal/images/k]]		- for portal names beginning with "K".
-- [[Module:Portal/images/l]]		- for portal names beginning with "L".
-- [[Module:Portal/images/m]]		- for portal names beginning with "M".
-- [[Module:Portal/images/n]]		- for portal names beginning with "N".
-- [[Module:Portal/images/o]]		- for portal names beginning with "O".
-- [[Module:Portal/images/p]]		- for portal names beginning with "P".
-- [[Module:Portal/images/q]]		- for portal names beginning with "Q".
-- [[Module:Portal/images/r]]		- for portal names beginning with "R".
-- [[Module:Portal/images/s]]		- for portal names beginning with "S".
-- [[Module:Portal/images/t]]		- for portal names beginning with "T".
-- [[Module:Portal/images/u]]		- for portal names beginning with "U".
-- [[Module:Portal/images/v]]		- for portal names beginning with "V".
-- [[Module:Portal/images/w]]		- for portal names beginning with "W".
-- [[Module:Portal/images/x]]		- for portal names beginning with "X".
-- [[Module:Portal/images/y]]		- for portal names beginning with "Y".
-- [[Module:Portal/images/z]]		- for portal names beginning with "Z".
-- [[Module:Portal/images/other]]	- for portal names beginning with any other letters. This includes numbers,
-- 									  letters with diacritics, and letters in non-Latin alphabets.
-- [[Module:Portal/images/aliases]]	- for adding aliases for existing portal names. Use this page for variations
-- 									  in spelling and diacritics, etc., no matter what letter the portal begins with.
--
-- The images data pages are separated by the first letter to reduce server load when images are added, changed, or removed.
-- Previously all the images were on one data page at [[Module:Portal/images]], but this had the disadvantage that all
-- 5,000,000 pages using this module needed to be refreshed every time an image was added or removed.
]==]

local p = {}

local function matchImagePage(s)
	-- Finds the appropriate image subpage given a lower-case
	-- portal name plus the first letter of that portal name.
	if type(s) ~= 'string' or #s &lt; 1 then return end
	local firstLetter = mw.ustring.sub(s, 1, 1)
	local imagePage
	if mw.ustring.find(firstLetter, '^[a-z]') then
		imagePage = 'Module:Portal/images/' .. firstLetter
	else
		imagePage = 'Module:Portal/images/other'
	end
	return mw.loadData(imagePage)[s]
end

local function getAlias(s)
	-- Gets an alias from the image alias data page.
	local aliasData = mw.loadData('Module:Portal/images/aliases')
	for portal, aliases in pairs(aliasData) do
		for _, alias in ipairs(aliases) do
			if alias == s then
				return portal
			end
		end
	end
end

local function getImageName(s)
	-- Gets the image name for a given string.
	local default = 'Portal-puzzle.svg|link=|alt='
	if type(s) ~= 'string' or #s &lt; 1 then
		return default
	end
	s = mw.ustring.lower(s)
	return matchImagePage(s) or matchImagePage(getAlias(s)) or default
end

function p._portal(portals, args)
	-- This function builds the portal box used by the {{portal}} template.
	local root = mw.html.create('div')
		:attr('role', 'navigation')
		:attr('aria-label', 'Portals')
		:addClass('noprint portal plainlist')
		:addClass(args.left and 'tleft' or 'tright')
		:css('margin', args.margin or (args.left == 'yes' and '0.5em 1em 0.5em 0') or '0.5em 0 0.5em 1em')
		:css('border', 'solid #aaa 1px')
		:newline()

	-- If no portals have been specified, display an error and add the page to a tracking category.
	if not portals[1] then
		root:wikitext('&lt;strong class="error"&gt;No portals specified: please specify at least one portal&lt;/strong&gt;[[Category:Portal templates without a parameter]]')
		return tostring(root)
	end

	-- Start the list. This corresponds to the start of the wikitext table in the old [[Template:Portal]].
	local listroot = root:tag('ul')
		:css('display', 'table')
		:css('box-sizing', 'border-box')
		:css('padding', '0.1em')
		:css('max-width', '175px')
		:css('width', type(args.boxsize) == 'string' and (args.boxsize .. 'px') or nil)
		:css('background', '#f9f9f9')
		:css('font-size', '85%')
		:css('line-height', '110%')
		:css('font-style', 'italic')
		:css('font-weight', 'bold')

	-- Display the portals specified in the positional arguments.
	for _, portal in ipairs(portals) do
		local image = getImageName(portal)

		-- Generate the html for the image and the portal name.
		listroot
			:newline()
			:tag('li')
				:css('display', 'table-row')
				:tag('span')
					:css('display', 'table-cell')
					:css('padding', '0.2em')
					:css('vertical-align', 'middle')
					:css('text-align', 'center')
					:wikitext(string.format('[[File:%s|32x28px|class=noviewer]]', image))
					:done()
				:tag('span')
					:css('display', 'table-cell')
					:css('padding', '0.2em 0.2em 0.2em 0.3em')
					:css('vertical-align', 'middle')
					:wikitext(string.format('[[Portal:%s|%s%sportal]]', portal, portal, args['break'] and '&lt;br /&gt;' or ' '))
	end
	return tostring(root)
end

function p._image(portals)
	-- Wrapper function to allow getImageName() to be accessed through #invoke.
	local name = getImageName(portals[1])
	return name:match('^(.-)|') or name -- FIXME: use a more elegant way to separate borders etc. from the image name
end

local function getAllImageTables()
	-- Returns an array containing all image subpages (minus aliases) as loaded by mw.loadData.
	local images = {}
	for i, subpage in ipairs{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'other'} do
		images[i] = mw.loadData('Module:Portal/images/' .. subpage)
	end
	return images
end

function p._displayAll(portals, args)
	-- This function displays all portals that have portal images. This function is for maintenance purposes and should not be used in
	-- articles, for two reasons: 1) there are over 1500 portals with portal images, and 2) the module doesn't record how the portal
	-- names are capitalized, so the portal links may be broken.
	local lang = mw.language.getContentLanguage()
	local count = 1
	for _, imageTable in ipairs(getAllImageTables()) do
		for portal in pairs(imageTable) do
			portals[count] = lang:ucfirst(portal)
			count = count + 1
		end
	end
	return p._portal(portals, args)
end

function p._imageDupes()
	-- This function searches the image subpages to find duplicate images. If duplicate images exist, it is not necessarily a bad thing,
	-- as different portals might just happen to choose the same image. However, this function is helpful in identifying images that
	-- should be moved to a portal alias for ease of maintenance.
	local exists, dupes = {}, {}
	for _, imageTable in ipairs(getAllImageTables()) do
		for portal, image in pairs(imageTable) do
			if not exists[image] then
				exists[image] = portal
			else
				table.insert(dupes, string.format('The image "[[:File:%s|%s]]" is used for both portals "%s" and "%s".', image, image, exists[image], portal))
			end
		end
	end
	if #dupes &lt; 1 then
		return 'No duplicate images found.'
	else
		return 'The following duplicate images were found:\n* ' .. table.concat(dupes, '\n* ')
	end
end

local function processPortalArgs(args)
	-- This function processes a table of arguments and returns two tables: an array of portal names for processing by ipairs, and a table of
	-- the named arguments that specify style options, etc. We need to use ipairs because we want to list all the portals in the order
	-- they were passed to the template, but we also want to be able to deal with positional arguments passed explicitly, for example
	-- {{portal|2=Politics}}. The behaviour of ipairs is undefined if nil values are present, so we need to make sure they are all removed.
	args = type(args) == 'table' and args or {}
	local portals = {}
	local namedArgs = {}
	for k, v in pairs(args) do
		if type(k) == 'number' and type(v) == 'string' then -- Make sure we have no non-string portal names.
			table.insert(portals, k)
		elseif type(k) ~= 'number' then
			namedArgs[k] = v
		end
	end
	table.sort(portals)
	for i, v in ipairs(portals) do
		portals[i] = args[v]
	end
	return portals, namedArgs
end

local function makeWrapper(funcName)
	-- Processes external arguments and sends them to the other functions.
	return function (frame)
		-- If called via #invoke, use the args passed into the invoking
		-- template, or the args passed to #invoke if any exist. Otherwise
		-- assume args are being passed directly in from the debug console
		-- or from another Lua module.
		local origArgs
		if type(frame.getParent) == 'function' then
			origArgs = frame:getParent().args
			for k, v in pairs(frame.args) do
				origArgs = frame.args
				break
			end
		else
			origArgs = frame
		end
		-- Trim whitespace and remove blank arguments.
		local args = {}
		for k, v in pairs(origArgs) do
			if type(v) == 'string' then
				v = mw.text.trim(v)
			end
			if v ~= '' then
				args[k] = v
			end
		end
		return p[funcName](processPortalArgs(args)) -- passes two tables to func: an array of portal names, and a table of named arguments.
	end
end

for _, funcName in ipairs{'portal', 'image', 'imageDupes', 'displayAll'} do
	p[funcName] = makeWrapper('_' .. funcName)
end

return p</text>
      <sha1>7np96ej58kiycf2l3mbp0omxk8k6db5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Portal/images/b</title>
    <ns>828</ns>
    <id>40416112</id>
    <revision>
      <id>804306798</id>
      <parentid>802999290</parentid>
      <timestamp>2017-10-08T03:15:04Z</timestamp>
      <contributor>
        <username>Buaidh</username>
        <id>122305</id>
      </contributor>
      <comment>["baltic sea"] = "Baltic Sea location map.svg|link=|alt=map",</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="8978">--[==[ This is the "B" list of portal image names. It contains a list of portal images for use with [[Module:Portal]]
-- for portal names that start with the letter "B". For aliases to existing portal names, and for portal names that
-- start with other letters, please use the appropriate page from the following list:
 
-- [[Module:Portal/images/a]]       - for portal names beginning with "A".
-- [[Module:Portal/images/c]]       - for portal names beginning with "C".
-- [[Module:Portal/images/d]]       - for portal names beginning with "D".
-- [[Module:Portal/images/e]]       - for portal names beginning with "E".
-- [[Module:Portal/images/f]]       - for portal names beginning with "F".
-- [[Module:Portal/images/g]]       - for portal names beginning with "G".
-- [[Module:Portal/images/h]]       - for portal names beginning with "H".
-- [[Module:Portal/images/i]]       - for portal names beginning with "I".
-- [[Module:Portal/images/j]]       - for portal names beginning with "J".
-- [[Module:Portal/images/k]]       - for portal names beginning with "K".
-- [[Module:Portal/images/l]]       - for portal names beginning with "L".
-- [[Module:Portal/images/m]]       - for portal names beginning with "M".
-- [[Module:Portal/images/n]]       - for portal names beginning with "N".
-- [[Module:Portal/images/o]]       - for portal names beginning with "O".
-- [[Module:Portal/images/p]]       - for portal names beginning with "P".
-- [[Module:Portal/images/q]]       - for portal names beginning with "Q".
-- [[Module:Portal/images/r]]       - for portal names beginning with "R".
-- [[Module:Portal/images/s]]       - for portal names beginning with "S".
-- [[Module:Portal/images/t]]       - for portal names beginning with "T".	
-- [[Module:Portal/images/u]]       - for portal names beginning with "U".
-- [[Module:Portal/images/v]]       - for portal names beginning with "V".
-- [[Module:Portal/images/w]]       - for portal names beginning with "W".
-- [[Module:Portal/images/x]]       - for portal names beginning with "X".
-- [[Module:Portal/images/y]]       - for portal names beginning with "Y".
-- [[Module:Portal/images/z]]       - for portal names beginning with "Z".
-- [[Module:Portal/images/other]]   - for portal names beginning with any other letters. This includes numbers,
--                                    letters with diacritics, and letters in non-Latin alphabets.
-- [[Module:Portal/images/aliases]] - for adding aliases for existing portal names. Use this page for variations
--                                    in spelling and diacritics, etc., no matter what letter the portal begins with.
 
-- When adding entries, please use alphabetical order. The format of the images table entries is as follows:
--          ["portal name"] = "image.svg",
-- The portal name should be the name of your portal, in lower case. For example, the portal name for 
-- "Portal:United Kingdom" would be "united kingdom". The image name should be capitalised normally, and the "File:"
-- namespace prefix should be
-- omitted.
]==]

return {
	["babism"] = "Haykal2.gif|link=|alt=",
	["bacon"] = "NCI bacon.jpg|link=|alt=",
	["baden-württemberg"] = "Flag of Baden-Württemberg.svg|border|link=|alt=flag",	["badminton"] = "Badminton racquet.svg|link=|alt=",
	["bahá'í faith"] = "Bahai star.svg|link=|alt=",
	["bahrain"] = "Flag of Bahrain.svg|border|link=|alt=flag",
	["ballet"] = "Ballerina-icon.jpg|alt=icon",
	["balochistan, pakistan"] = "Flag of Balochistan.svg|border|link=|alt=",
	["baltic sea"] = "Baltic Sea location map.svg|link=|alt=map",
	["baltic states"] = "Subdivisions of baltic states.svg|link=|alt=map",
	["baltimore"] = "Seal of Baltimore, Maryland.png|link=|alt=seal",
	["bangalore"] = "Bangalore Palace.jpg|alt=icon",
	["bangladesh premier league"] = "BPL.svg|link=|alt=",
	["bangladesh"] = "Flag of Bangladesh.svg|border|link=|alt=flag",
	["baptist"] = "Baptism logo.jpg|link=|alt=",
	["barack obama"] = "Obama.svg|link=|alt=",
	["barbados"] = "Nuvola Barbados flag.svg|alt=icon",
	["baseball"] = "Baseball.svg|link=|alt=icon",
	["basketball"] = "Basketball Clipart.svg|link=|alt=icon",
	["basque"] = "Lauburu.svg|link=|alt=",
	["bates college"] = "1864 Bates Seal.jpg|link=|alt=seal",
	["battleships"] = "BS Bismarck.png|alt=icon",
	["battlestar galactica"] = "BattlestarMandala.svg|alt=icon",
	["bavaria"] = "Flag of Bavaria (lozengy).svg|border|link=|alt=flag",
	["bbc"] = "BBC.svg|link=|alt=",
	["beer"] = "Projet bière logo v2.png|alt=icon",
	["beijing"] = "Beijing-name.svg|alt=icon",
	["belarus"] = "Flag of Belarus.svg|border|link=|alt=flag",
	["belgium"] = "Flag of Belgium.svg|border|link=|alt=flag",
	["belize"] = "Flag of Belize.svg|border|link=|alt=flag",
	["bengal"] = "BengaliScriptKo.svg|link=|alt=",
	["bengali"] = "Bangla Script.svg|alt=icon",
	["bengali cinema"] = "Emojione 1F3A5.svg|alt=icon",
	["bengali literature"] = "Bhasha Smritistambha Arnab Dutta 2011.jpg|alt=icon",
	["benin"] = "Flag of Benin.svg|border|link=|alt=flag",
	["berbers"] = "Berber flag.svg|border|link=|alt=flag",
	["berkshire"] = "Flag of Berkshire.svg|link=|alt=flag",
	["berlin"] = "Coat of arms of Berlin.svg|link=|alt=",
	["bermuda"] = "Flag of Bermuda.svg|border|link=|alt=flag",
	["beyoncé knowles"] = "Beyonce cropped2.jpg|link=|alt=",
	["bhutan"] = "Flag of Bhutan.svg|border|link=|alt=flag",
	["bible"] = "Bible.malmesbury.arp.jpg|link=|alt=",
	["bibliographies/science task force"] = "Principia Page 1726.jpg|link=|alt=photo",
	["bihar"] = "Seal of Bihar.jpg|link=|alt=",
	["biography"] = "P vip.svg|link=|alt=",
	["biological warfare"] = "Anthrax culture.jpg|link=|alt=",
	["biology"] = "Issoria lathonia.jpg|alt=icon",
	["biotechnology"] = "TRNA-Phe yeast 1ehz.png|alt=icon",
	["birds"] = "Eagle 01.svg|link=|alt=",
	["björk"] = "Björk signature.png|link=|alt=",
	["blu-ray"] = "Blu-ray disc2.png|alt=icon",
	["bob dylan"] = "Bob dylan.jpg|alt=icon",
	["bohemia"] = "Flag of Bohemia.svg|border|link=|alt=flag",
	["bohol"] = "Chocolate Hills.jpg|alt=icon",
	["bolivia"] = "Flag of Bolivia.svg|border|link=|alt=flag",
	["bollywood"] = "Indiafilm.svg|alt=icon",
	["bonaire"] = "Flag of Bonaire.svg|border|link=|alt=flag",
	["book of mormon"] = "Book of Mormon English Missionary Edition Soft Cover.jpg|link=|alt=",
	["books"] = "Nuvola apps bookcase.svg|alt=icon",
	["bosnia and herzegovina"] = "Flag of Bosnia and Herzegovina.svg|border|link=|alt=flag",
	["boston"] = "Flag of Boston.svg|border|link=|alt=flag",
	["botany"] = "Rosa villosa.jpg|alt=icon",
	["botswana"] = "Flag of Botswana.svg|border|link=|alt=flag",
	["boxing"] = "Icon-boxing-gloves.jpg|alt=icon",
	["brandenburg"] = "Flag of Brandenburg.svg|border|link=|alt=flag",
	["brandy norwood"] = "BrandyNorwoodJuly04.jpg|alt=icon",
	["brazil"] = "Flag of Brazil.svg|border|link=|alt=flag",
	["bremen"] = "Flag of Bremen.svg|border|link=|alt=flag",
	["briarcliff manor, new york"] = "BriarcliffOutlook4-crop.jpg|link=|alt=",
	["bridges"] = "Pont-type-4-haubans.svg|alt=icon",
	["bridges"] = "Pont-type-4-haubans.svg|alt=icon",
	["brigham young university"] = "Brigham Young University medallion.svg|link=|alt=seal",
	["brighton"] = "Brighton Royal Pavilion.jpg|alt=icon",
	["brisbane"] = "Brisbane COA.gif|link=|alt=",
	["bristol"] = "Bristol arms cropped.jpg|alt=icon",
	["british army"] = "Flag of the British Army.svg|border|link=|alt=flag",
	["british columbia"] = "Flag of British Columbia.svg|border|link=|alt=flag",
	["british empire"] = "British Empire 1897.jpg|link=|alt=",
	["british indian ocean territory"] = "Flag of the British Indian Ocean Territory.svg|border|link=|alt=flag",
	["british library"] = "British library london.jpg|link=|alt=",
	["british politics"] = "Royal Coat of Arms of the United Kingdom.svg|alt=icon",
	["british virgin islands"] = "Flag of the British Virgin Islands.svg|border|link=|alt=flag",
	["britney spears"] = "Baby One More Time 2009.jpg|alt=icon",
	["brittany"] = "Flag of Brittany.svg|border|link=|alt=flag",
	["brunei"] = "Flag of Brunei.svg|border|link=|alt=flag",
	["brussels"] = "Flag Belgium brussels.svg|border|link=|alt=flag",
	["bryan adams"] = "Bryan Adams Hamburg MG 0631 flickr.jpg|alt=icon",
	["bucharest"] = "ROU Bucharest CoA.png|link=|alt=",
	["buckinghamshire"] = "EnglandBuckinghamshire.png|alt=icon",
	["budapest"] = "Coat of arms of Budapest.svg|link=|alt=",
	["buddhism"] = "Dharma Wheel.svg|alt=icon",
	["buenos aires"] = "Flag of Buenos Aires City.png|border|link=|alt=flag",
	["buffy the vampire slayer"] = "Buffya.jpg|link=|alt=",
	["bulgaria"] = "Flag of Bulgaria.svg|border|link=|alt=flag",
	["bulgarian empire"] = "Coat of arms of the Second Bulgarian Empire.svg|alt=icon",
	["burkina faso"] = "Flag of Burkina Faso.svg|border|link=|alt=flag",
	["burundi"] = "Flag of Burundi.svg|border|link=|alt=flag",
	["buses"] = "BSicon BUS.svg|link=|alt=",
	["business and economics"] = "Emblem-money.svg|alt=icon",
	["byzantine empire"] = "Flag of Palaeologus Dynasty.svg|border|link=|alt=flag"
}</text>
      <sha1>4u0jk847k2ithozu2y3hsdafo1zw312</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Portal/images/d</title>
    <ns>828</ns>
    <id>40416131</id>
    <revision>
      <id>833929651</id>
      <parentid>808097216</parentid>
      <timestamp>2018-04-03T02:11:01Z</timestamp>
      <contributor>
        <username>JJMC89</username>
        <id>24812038</id>
      </contributor>
      <comment>add desouk per [[Special:Permalink/833928296#Image edit request on 2 April 2018|request]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="5796">--[==[ This is the "D" list of portal image names. It contains a list of portal images for use with [[Module:Portal]]
-- for portal names that start with the letter "D". For aliases to existing portal names, and for portal names that
-- start with other letters, please use the appropriate page from the following list:
 
-- [[Module:Portal/images/a]]       - for portal names beginning with "A".
-- [[Module:Portal/images/b]]       - for portal names beginning with "B".
-- [[Module:Portal/images/c]]       - for portal names beginning with "C".
-- [[Module:Portal/images/e]]       - for portal names beginning with "E".
-- [[Module:Portal/images/f]]       - for portal names beginning with "F".
-- [[Module:Portal/images/g]]       - for portal names beginning with "G".
-- [[Module:Portal/images/h]]       - for portal names beginning with "H".
-- [[Module:Portal/images/i]]       - for portal names beginning with "I".
-- [[Module:Portal/images/j]]       - for portal names beginning with "J".
-- [[Module:Portal/images/k]]       - for portal names beginning with "K".
-- [[Module:Portal/images/l]]       - for portal names beginning with "L".
-- [[Module:Portal/images/m]]       - for portal names beginning with "M".
-- [[Module:Portal/images/n]]       - for portal names beginning with "N".
-- [[Module:Portal/images/o]]       - for portal names beginning with "O".
-- [[Module:Portal/images/p]]       - for portal names beginning with "P".
-- [[Module:Portal/images/q]]       - for portal names beginning with "Q".
-- [[Module:Portal/images/r]]       - for portal names beginning with "R".
-- [[Module:Portal/images/s]]       - for portal names beginning with "S".
-- [[Module:Portal/images/t]]       - for portal names beginning with "T".
-- [[Module:Portal/images/u]]       - for portal names beginning with "U".
-- [[Module:Portal/images/v]]       - for portal names beginning with "V".
-- [[Module:Portal/images/w]]       - for portal names beginning with "W".
-- [[Module:Portal/images/x]]       - for portal names beginning with "X".
-- [[Module:Portal/images/y]]       - for portal names beginning with "Y".
-- [[Module:Portal/images/z]]       - for portal names beginning with "Z".
-- [[Module:Portal/images/other]]   - for portal names beginning with any other letters. This includes numbers,
--                                    letters with diacritics, and letters in non-Latin alphabets.
-- [[Module:Portal/images/aliases]] - for adding aliases for existing portal names. Use this page for variations
--                                    in spelling and diacritics, etc., no matter what letter the portal begins with.
 
-- When adding entries, please use alphabetical order. The format of the images table entries is as follows:
--          ["portal name"] = "image.svg",
-- The portal name should be the name of your portal, in lower case. For example, the portal name for 
-- "Portal:United Kingdom" would be "united kingdom". The image name should be capitalised normally, and the "File:"
-- namespace prefix should be omitted.
]==]

return {
	["dacia"] = "Dacia around 60-44 BC during Burebista, including campaigns - French.png|alt=icon",
	["dadra and nagar haveli"] = "India Dadra and Nagar Haveli locator map.svg|border|link=|alt=map",
	["dallas – fort worth metroplex"] = "Downtown Dallas from the Trinity River.jpg|alt=icon",
	["daman and diu"] = "India Daman and Diu locator map.svg|alt=icon",
	["dance"] = "Disco-Dancer-4-Remix-by-Merlin2525.svg|link=|alt=",
	["dartmouth college"] = "Dartmouth College wordmark.svg|link=|alt=logo",
	["death"] = "Kalebp skull.svg|link=|alt=",
	["degrassi"] = "Degrassi logo 2013.png|link=|alt=",
	["delaware"] = "Flag of Delaware.svg|border|link=|alt=flag",
	["delhi"] = "India Gate 600x400.jpg|alt=icon",
	["delhi"] = "India Gate 600x400.jpg|alt=icon",
	["denver"] = "Flag of Denver, Colorado.svg|link=|alt=flag",
	["deserts"] = "Whitesands dune.jpg|border|link=|alt=icon",
	["democratic republic of the congo"] = "Flag of the Democratic Republic of the Congo.svg|border|link=|alt=flag",
	["denmark"] = "Flag of Denmark.svg|border|link=|alt=flag",
	["dentistry"] = "Dentistry stub.svg|alt=icon",
	["derbyshire"] = "Derbyshire flag.svg|border|link=|alt=flag",
	["design"] = "Design portal logo.jpg|alt=icon",
	["desouk"] = "Flag of Kafr El-Sheikh Governorate-official.png|border|alt=flag",
	["devon"] = "Flag of Devon.svg|border|link=|alt=flag",
	["dinosaurs"] = "Tyrannoskull.jpg|link=|alt=",
	["disability"] = "Handicapped Accessible sign.svg|link=|alt=",
	["disasters"] = "SanFranHouses06.JPG|border|link=|alt=",
	["discrete mathematics"] = "Nuvola apps atlantik.png|alt=icon",
	["discrimination"] = "Disclogo1.svg|link=|alt=",
	["discworld"] = "Discworld icon.svg|alt=icon",
	["disney"] = "Magic Kingdom castle.jpg|alt=icon",
	["district of columbia"] = "Flag of Washington, D.C..svg|border|link=|alt=flag",
	["djibouti"] = "Flag of Djibouti.svg|border|link=|alt=flag",
	["doctor who"] = "TARDIS-trans.png|alt=icon",
	["dogs"] = "Aussie-blacktri.jpg|alt=icon",
	["dominica"] = "Flag of Dominica.svg|border|link=|alt=flag",
	["dominican republic"] = "Flag of the Dominican Republic.svg|border|link=|alt=flag",
	["donald trump"] = "Official Portrait of President Donald Trump (cropped).jpg|alt=icon",
	["dorset"] = "Flag of Dorset.svg|border|link=|alt=flag",
	["dragon ball"] = "DBZ UBX2.svg|alt=icon",
	["dravidian languages"] = "Dravidische Sprachen.png|border|link=Dravidian languages|alt=map",
	["drink"] = "Goblet Glass (Banquet).svg|link=|alt=",
	["dubai"] = "Flag of Dubai.svg|border|link=|alt=flag",
	["dungeons &amp; dragons"] = "Icosahedron.svg|alt=icon",
	["durham, north carolina"] = "Flag of Durham, North Carolina.svg|border|link=|alt=flag",
	["dutch"] = "Idioma_neerlandés.PNG|border|link=Dutch language|alt=map"
}</text>
      <sha1>m1i0kyncdvw6kwbjrugpfb34545c6yy</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Portal/images/s</title>
    <ns>828</ns>
    <id>40416224</id>
    <revision>
      <id>845532974</id>
      <parentid>843616308</parentid>
      <timestamp>2018-06-12T11:25:03Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>+sasanian empire</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="13430">--[==[ This is the "S" list of portal image names. It contains a list of portal images for use with [[Module:Portal]]
-- for portal names that start with the letter "S". For aliases to existing portal names, and for portal names that
-- start with other letters, please use the appropriate page from the following list:
 
-- [[Module:Portal/images/a]]       - for portal names beginning with "A".
-- [[Module:Portal/images/b]]       - for portal names beginning with "B".
-- [[Module:Portal/images/c]]       - for portal names beginning with "C".
-- [[Module:Portal/images/d]]       - for portal names beginning with "D".
-- [[Module:Portal/images/e]]       - for portal names beginning with "E".
-- [[Module:Portal/images/f]]       - for portal names beginning with "F".
-- [[Module:Portal/images/g]]       - for portal names beginning with "G".
-- [[Module:Portal/images/h]]       - for portal names beginning with "H".
-- [[Module:Portal/images/i]]       - for portal names beginning with "I".
-- [[Module:Portal/images/j]]       - for portal names beginning with "J".
-- [[Module:Portal/images/k]]       - for portal names beginning with "K".
-- [[Module:Portal/images/l]]       - for portal names beginning with "L".
-- [[Module:Portal/images/m]]       - for portal names beginning with "M".
-- [[Module:Portal/images/n]]       - for portal names beginning with "N".
-- [[Module:Portal/images/o]]       - for portal names beginning with "O".
-- [[Module:Portal/images/p]]       - for portal names beginning with "P".
-- [[Module:Portal/images/q]]       - for portal names beginning with "Q".
-- [[Module:Portal/images/r]]       - for portal names beginning with "R".
-- [[Module:Portal/images/t]]       - for portal names beginning with "T".
-- [[Module:Portal/images/u]]       - for portal names beginning with "U".
-- [[Module:Portal/images/v]]       - for portal names beginning with "V".
-- [[Module:Portal/images/w]]       - for portal names beginning with "W".
-- [[Module:Portal/images/x]]       - for portal names beginning with "X".
-- [[Module:Portal/images/y]]       - for portal names beginning with "Y".
-- [[Module:Portal/images/z]]       - for portal names beginning with "Z".
-- [[Module:Portal/images/other]]   - for portal names beginning with any other letters. This includes numbers,
--                                    letters with diacritics, and letters in non-Latin alphabets.
-- [[Module:Portal/images/aliases]] - for adding aliases for existing portal names. Use this page for variations
--                                    in spelling and diacritics, etc., no matter what letter the portal begins with.
 
-- When adding entries, please use alphabetical order. The format of the images table entries is as follows:
--          ["portal name"] = "image.svg",
-- The portal name should be the name of your portal, in lower case. For example, the portal name for 
-- "Portal:United Kingdom" would be "united kingdom". The image name should be capitalised normally, and the "File:"
-- namespace prefix should be omitted.
]==]
 
return {
	["saarc"] = "SAARC 1717549468.png|alt=icon",
	["sabah"] = "Flag of Sabah.svg|border|link=|alt=flag",
	["sacred christian music"] = "Musical note nicu bucule 01.svg|link=|alt=icon",
	["saguenay–lac-saint-jean"] = "Flag of Saguenay-Lac-Saint-Jean.svg|border|link=|alt=flag",
	["sailing"] = "Sailing pictogram.svg|link=|alt=",
	["saint barthélemy"] = "Flag of Saint Barthelemy (local).svg|border|link=|alt=flag",
	["saint helena, ascension and tristan da cunha"] = "Flag of Saint Helena.svg|border|link=|alt=flag",
	["saint kitts and nevis"] = "Flag of Saint Kitts and Nevis.svg|border|link=|alt=flag",
	["saint lucia"] = "Flag of Saint Lucia.svg|border|link=|alt=flag",
	["saint martin"] = "Flag of Saint Martin.png|border|link=|alt=flag",
	["saint pierre and miquelon"] = "Flag of Saint-Pierre and Miquelon.svg|border|link=|alt=flag",
	["saint vincent and the grenadines"] = "Flag of Saint Vincent and the Grenadines.svg|border|link=|alt=flag",
	["saints"] = "Gloriole blur.svg|link=|alt=",
	["samoa"] = "Flag of Samoa.svg|border|link=|alt=flag",
	["san antonio"] = "Coat of arms of San Antonio.svg|link=|alt=arms",
	["san diego"] = "San Diego,California,USA. - panoramio (139).jpg|link=|alt=photo",
	["san diego county"] = "Seal of San Diego County, California.png|link=|alt=seal",
	["san diego–tijuana"] = "San Diego-Tijuana JPLLandsat.jpg|border|link=|alt=flag",
	["san francisco bay area"] = "SF From Marin Highlands3.jpg|border|link=|alt=",
	["san marino"] = "Flag of San Marino.svg|border|link=|alt=flag",
	["santa barbara county"] = "Seal of Santa Barbara County, California.png|link=|alt=seal",
	["santana"] = "Carlos Santana 2005.jpg|link=|alt=",
	["são tomé and príncipe"] = "Flag of Sao Tome and Principe.svg|border|link=|alt=flag",
	["sarawak"] = "Flag of Sarawak.svg|border|link=|alt=flag",
	["sasanian empire"] = "Derafsh Kaviani flag of the late Sassanid Empire.svg|border|link=|alt=flag",
	["saskatchewan"] = "Flag of Saskatchewan.svg|border|link=|alt=flag",
	["saskatchewan communities and neighbourhoods"] = "Flag-map of Saskatchewan.svg| link=|alt=map",
	["saudi arabia"] = "Flag of Saudi Arabia.svg|border|link=|alt=flag",
	["saxony"] = "Flag of Saxony.svg|border|link=|alt=flag",
	["saxony-anhalt"] = "Wappen Sachsen-Anhalt.svg|link=|alt=",
	["schleswig-holstein"] = "Landeswappen Schleswig-Holstein.png|link=|alt=",
	["schools"] = "School.svg|link=|alt=",
	["science"] = "Nuvola apps kalzium.svg|alt=icon",
	["science and academia"] = "Rachel Carson w (cropped).jpg|link=|alt=photo",
	["science fiction"] = "Sf-userbox.png|alt=icon",
	["scientology"] = "Scientology e meter blue.jpg|alt=icon",
	["scotland"] = "Flag of Scotland.svg|border|link=|alt=flag",
	["scouting"] = "WikiProject Scouting fleur-de-lis dark.svg|alt=icon",
	["seamounts"] = "Seamount.svg|link=|alt=",
	["seattle"] = "SpaceNeedleTopClose.jpg|alt=icon",
	["sega"] = "SEGA logo.svg|link=|alt=",
	["senegal"] = "Flag of Senegal.svg|border|link=|alt=flag",
	["seoul"] = "Seal of Seoul.svg|link=|alt=seal",
	["september 11 attacks"] = "Y24-Wtc-september-5.jpg|alt=icon",
	["serbia"] = "Flag of Serbia.svg|border|link=|alt=flag",
	["serer people"] = "Serer Royal War Drum (Jung-Jung). 19th Century. Jung-Jung From The Kingdom of Sine (in modern day Senegal).jpg|alt=icon",
	["serer religion"] = "Five Pointed Star Lined.svg|link=|alt=",
	["set theory"] = "Venn0001.svg|link=|alt=",
	["seton hall university"] = "Shu logo.png|link=|alt=logo",
	["seventh-day adventist church"] = "James and Ellen White.jpg|link=|alt=",
	["severe weather"] = "Marquette, Kansas EF4 tornado on April 14, 2012.png|link=|alt=icon",
	["sexuality"] = "Sexual orientation - 4 symbols.svg|alt=icon",
	["seychelles"] = "Flag of Seychelles.svg|border|link=|alt=flag",
	["shakespeare"] = "Shakespeare (oval-cropped).png|link=|alt=",
	["shakira"] = "S by shakira logo.png|alt=icon",
	["shanghai"] = "Shanghainame.png|link=|alt=",
	["shania twain"] = "Shania Twain Portrait.jpg|alt=icon",
	["sharjah"] = "Flag of Sharjah.svg|border|link=|alt=flag",
	["sharks"] = "Greyreefsharksmall2.jpg|alt=icon",
	["shenzhen"] = "Shenzhen in Chinese.png|alt=Shenzhen",
	["shia islam"] = "Ghadir logo.png|alt=icon",
	["shinto"] = "Shinto torii icon vermillion.svg|link=|alt=",
	["shreveport"] = "Shreveport-City-Flag.png|border|link=|alt=flag",
	["shreya ghoshal"] = "Shreya at concert.jpg|alt=icon",
	["sierra leone"] = "Flag of Sierra Leone.svg|border|link=|alt=flag",
	["sikhism"] = "Khanda emblem.svg|link=|alt=",
	["sikkim"] = "Seal of Sikkim color.png|link=|alt=seal",
	["silent film"] = "Video-x-generic.svg|link=|alt=",
	["silesia"] = "Silesia Inferior COA.svg|alt=icon",
	["sindh"] = "Flag of Sindh.svg|border|link=|alt=flag",
	["singapore"] = "Flag of Singapore.svg|border|link=|alt=flag",
	["sint eustatius"] = "Flag of Sint Eustatius.svg|border|link=|alt=flag",
	["sint maarten"] = "Flag of Sint Maarten.svg|border|link=|alt=flag",
	["slipknot"] = "SlipknotProject.png|alt=icon",
	["slovak republic"] = "Flag of Slovakia.svg|border|link=|alt=flag",
	["slovakia"] = "Flag of Slovakia.svg|border|link=|alt=flag",
	["slovenia"] = "Flag of Slovenia.svg|border|link=|alt=flag",
	["snk"] = "SNK Playmore logo and wordmark.png|link=|alt=",
	["soap operas and telenovelas"] = "Drama-icon.svg|alt=icon",
	["soccer in the united states"] = "Soccerball USA.png|link=|alt=",
	["social and political philosophy"] = "P derecho.svg|link=|alt=",
	["social movements"] = "Peace sign.svg|link=|alt=",
	["social science"] = "P social sciences-lightblue.png|link=|alt=icon",
	["social sciences"] = "DrustveneNauke.png|alt=icon",
	["social welfare and social work"] = "Vista Login Manager Cropped.svg|alt=icon",
	["socialism"] = "Red flag II.svg|alt=icon",
	["society"] = "Social sciences.svg|alt=icon",
	["sociology"] = "Logo sociology.svg|link=|alt=",
	["software"] = "Crystal Clear device cdrom unmount.png|alt=icon",
	["software testing"] = "Green bug and broom.svg|alt=icon",
	["solar system"] = "Solar system.jpg|link=|alt=",
	["solomon islands"] = "Flag of Solomon Islands.svg|border|link=|alt=flag",
	["somalia"] = "Flag of Somalia.svg|border|link=|alt=flag",
	["somaliland"] = "Flag of Somaliland.svg|border|link=|alt=flag",
	["somerset"] = "Somerset shield.png|alt=icon",
	["sonic"] = "Chaos emeralds.svg|alt=icon",
	["sony"] = "Sony logo.svg|link=|alt=",
	["sony playstation"] = "PS3-slim-console.png|link=|alt=",
	["south africa"] = "Flag of South Africa.svg|border|link=|alt=flag",
	["south america"] = "South America.png|alt=icon",
	["south asia"] = "India 78.40398E 20.74980N.jpg|link=|alt=",
	["south australia"] = "Flag of South Australia.svg|border|link=|alt=flag",
	["south carolina"] = "Flag of South Carolina.svg|border|link=|alt=flag",
	["south dakota"] = "Flag of South Dakota.svg|border|link=|alt=flag",
	["south east england"] = "EnglandSouthEast.png|alt=icon",
	["south korea"] = "Flag of South Korea.svg|border|link=|alt=flag",
	["south park"] = "South Park sign logo.png|link=|alt=",
	["south sudan"] = "Flag of South Sudan.svg|border|link=|alt=flag",
	["southeast asia"] = "Location Southeast Asia.svg|link=|alt=",
	["southern california"] = "USA California Southern location map.svg|link=|alt=map",
	["southwest asia"] = "Southwest-Asia-map.PNG|link=|alt=",
	["soviet union"] = "Flag of the Soviet Union.svg|border|link=|alt=flag",
	["space"] = "Earth-moon.jpg|link=|alt=",
	["spaceflight"] = "RocketSunIcon.svg|link=|alt=",
	["spain"] = "Flag of Spain.svg|border|link=|alt=flag",
	["spanish american wars of independence"] = "Red versus blue swords.svg|alt=icon",
	["special operations"] = "APP-6 Special Operations Forces.svg|link=|alt=",
	["speculative fiction"] = "Dragon-149393.svg|alt=icon",
	["spirituality"] = "EndlessKnot03d.png|link=|alt=",
	["spongebob squarepants"] = "WikiProject SpongeBob logo - Logo.svg|alt=icon",
	["sports"] = "Sports icon.png|link=|alt=",
	["sports and games"] = "Sports and games.png|alt=icon",
	["sports in canada"] = "Flag shirt of Canada.png|alt=icon",
	["sri lanka"] = "Flag of Sri Lanka.svg|border|link=|alt=flag",
	["st. john's, newfoundland and labrador"] = "City of St. John's.jpg|link=|alt=",
	["st. louis"] = "Flag of St. Louis, Missouri.svg|border|link=|alt=flag",
	["stamford"] = "Stamford town crest.png|link=|alt=crest",
	["stanford university"] = "Stanford logo.png|link=|alt=logo",
	["star"] = "He1523a.jpg|alt=icon",
	["star trek"] = "Delta-shield.svg|link=|alt=",
	["star wars"] = "Lightsaber blue.svg|link=|alt=",
	["state of georgia"] = "Flag of Georgia (U.S. state).svg|border|link=|alt=flag",
	["state university of new york"] = "SUNY brandmark.svg|link=|alt=brandmark",
	["state university system of florida"] = "SUSF Locations.jpg|link=|alt=map",
	["statistics"] = "Fisher iris versicolor sepalwidth.svg|alt=icon",
	["steampunk"] = "Steampunk-falksen.jpg|alt=icon",
	["strategy games"] = "Chess.svg|alt=icon",
	["submarine"] = "Submarine.svg|alt=icon",
	["sudan"] = "Flag of Sudan.svg|border|link=|alt=flag",
	["suffolk"] = "County Flag of Suffolk.svg|border|link=|alt=flag",
	["sufism"] = "Soefi symbool.gif|link=|alt=",
	["superfunds"] = "Superfund sites.svg|link=|alt=map",
	["superhero fiction"] = "Question bubble thing.svg|link=|alt=",
	["supreme court of the united states"] = "Supreme Court.jpg|link=|alt=",
	["surat"] = "Surat at night.JPG|link=|alt=photo",
	["suriname"] = "Flag of Suriname.svg|border|link=|alt=flag",
	["surrey"] = "EnglandSurrey.png|alt=icon",
	["sussex"] = "SussexBrit5.PNG|link=|alt=",
	["sustainable development"] = "Sustainable development.svg|alt=icon",
	["swaziland"] = "Flag of Swaziland.svg|border|link=|alt=flag",
	["sweden"] = "Flag of Sweden.svg|border|link=|alt=flag",
	["swimming"] = "Swimming pictogram.svg|link=|alt=",
	["switzerland"] = "Flag of Switzerland.svg|border|link=|alt=flag",
	["sydney"] = "Sydney COA.gif|alt=icon",
	["syracuse, new york"] = "SyracuseSkyline01.JPG|link=|alt=",
	["syria"] = "Flag of Syria.svg|border|link=|alt=flag",
	["syriac christianity"] = "Bible and Pulpit, Mor Hananyo.jpg|alt=icon",
	["syriac"] = "Syriac Sertâ book script.jpg|link=|alt=",
	["syrian civil war"] = "Flag of Syria (2011 combined).svg|border|link=|alt=flag",
	["systems"] = "Complex-adaptive-system.jpg|link=|alt=diagram",
	["systems engineering initiative"] = "Systems Engineering Process II.gif|link=|alt=diagram",
	["systems science"] = "Complex-adaptive-system.jpg|link=|alt=diagram"
}</text>
      <sha1>pvc42tkuywcr6ugxcl0nrvl8noiyvq1</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Portal/images/t</title>
    <ns>828</ns>
    <id>40416234</id>
    <revision>
      <id>849941769</id>
      <parentid>834534441</parentid>
      <timestamp>2018-07-12T13:16:57Z</timestamp>
      <contributor>
        <username>Xaosflux</username>
        <id>502540</id>
      </contributor>
      <comment>+["thiruvananthapuram"] = "Seal of Thiruvananthapuram.png|alt=seal",, requested on talk</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="8338">--[==[ This is the "T" list of portal image names. It contains a list of portal images for use with [[Module:Portal]]
-- for portal names that start with the letter "T". For aliases to existing portal names, and for portal names that
-- start with other letters, please use the appropriate page from the following list:
 
-- [[Module:Portal/images/a]]       - for portal names beginning with "A".
-- [[Module:Portal/images/b]]       - for portal names beginning with "B".
-- [[Module:Portal/images/c]]       - for portal names beginning with "C".
-- [[Module:Portal/images/d]]       - for portal names beginning with "D".
-- [[Module:Portal/images/e]]       - for portal names beginning with "E".
-- [[Module:Portal/images/f]]       - for portal names beginning with "F".
-- [[Module:Portal/images/g]]       - for portal names beginning with "G".
-- [[Module:Portal/images/h]]       - for portal names beginning with "H".
-- [[Module:Portal/images/i]]       - for portal names beginning with "I".
-- [[Module:Portal/images/j]]       - for portal names beginning with "J".
-- [[Module:Portal/images/k]]       - for portal names beginning with "K".
-- [[Module:Portal/images/l]]       - for portal names beginning with "L".
-- [[Module:Portal/images/m]]       - for portal names beginning with "M".
-- [[Module:Portal/images/n]]       - for portal names beginning with "N".
-- [[Module:Portal/images/o]]       - for portal names beginning with "O".
-- [[Module:Portal/images/p]]       - for portal names beginning with "P".
-- [[Module:Portal/images/q]]       - for portal names beginning with "Q".
-- [[Module:Portal/images/r]]       - for portal names beginning with "R".
-- [[Module:Portal/images/s]]       - for portal names beginning with "S".
-- [[Module:Portal/images/u]]       - for portal names beginning with "U".
-- [[Module:Portal/images/v]]       - for portal names beginning with "V".
-- [[Module:Portal/images/w]]       - for portal names beginning with "W".
-- [[Module:Portal/images/x]]       - for portal names beginning with "X".
-- [[Module:Portal/images/y]]       - for portal names beginning with "Y".
-- [[Module:Portal/images/z]]       - for portal names beginning with "Z".
-- [[Module:Portal/images/other]]   - for portal names beginning with any other letters. This includes numbers,
--                                    letters with diacritics, and letters in non-Latin alphabets.
-- [[Module:Portal/images/aliases]] - for adding aliases for existing portal names. Use this page for variations
--                                    in spelling and diacritics, etc., no matter what letter the portal begins with.
 
-- When adding entries, please use alphabetical order. The format of the images table entries is as follows:
--          ["portal name"] = "image.svg",
-- The portal name should be the name of your portal, in lower case. For example, the portal name for 
-- "Portal:United Kingdom" would be "united kingdom". The image name should be capitalised normally, and the "File:"
-- namespace prefix should be omitted.
]==]
 
return {
	["tabaristan"] = "P Tabaristan.svg|alt=icon",
	["taiwan"] = "Flag of the Republic of China.svg|alt=icon",
	["tajikistan"] = "Flag of Tajikistan.svg|border|link=|alt=flag",
	["tamil cinema"] = "Pavalakkodi poster.jpg|link=|alt=poster",
	["tamil nadu"] = "TamilNadu Logo.svg|link=|alt=icon",
	["tampa bay"] = "TampaBay ETM 2000nov3.jpg|border|link=|alt=image",
	["tank"] = "AMISOM T-55.jpg|link=|alt=",
	["tanzania"] = "Flag of Tanzania.svg|border|link=|alt=flag",
	["taoism"] = "Taijitu red.PNG|link=|alt=",
	["tasmania"] = "Flag of Tasmania.svg|border|link=|alt=flag",
	["technology"] = "Telecom-icon.svg|link=|alt=",
	["technology and applied sciences"] = "Astronaut-EVA.jpg|link=|alt=",
	["telangana"] = "Warangal fort.jpg|link=|alt=",
	["telecommunication"] = "Telecom-icon.svg|link=|alt=",
	["television"] = "Blank television set.svg|alt=icon",
	["television in australia"] = "Aus tv.svg|alt=icon",
	["television in canada"] = "Canadian television stub icon.svg|alt=icon",
	["television in the united kingdom"] = "Union flag tv.svg|alt=icon",
	["television in the united states"] = "USA flag on television.svg|alt=icon",
	["telugu cinema"] = "Bhakta Prahlada 1931.jpg|link=|alt=poster",
	["tennessee"] = "Flag of Tennessee.svg|border|link=|alt=flag",
	["tennis"] = "Tennis ball.svg|alt=icon",
	["terrorism"] = "National Park Service 9-11 Statue of Liberty and WTC fire.jpg|border|link=|alt=",
	["texas"] = "Flag of Texas.svg|border|link=|alt=flag",
	["texas a&amp;m university"] = "Texas A&amp;M University logo.svg|link=|alt=logo",
	["texas tech university"] = "Texas Tech Athletics logo.svg|link=|alt=logo",
	["textile arts"] = "Blue crocheting thread.jpg|alt=icon",
	["thailand"] = "Flag of Thailand.svg|border|link=|alt=flag",
	["the bahamas"] = "Flag of the Bahamas.svg|border|link=|alt=flag",
	["the beach boys"] = "LandmarkPhoto2.jpg|alt=icon",
	["the beatles"] = "The Fabs.JPG|link=|alt=",
	["the central african republic"] = "Flag of the Central African Republic.svg|border|link=|alt=flag",
	["the clash"] = "Clash 21051980 12 800.jpg|alt=icon",
	["the gambia"] = "Flag of The Gambia.svg|border|link=|alt=flag",
	["the holy see"] = "Flag of the Vatican City.svg|border|link=|alt=flag",
	["the jackson family"] = "Michael and Janet Jackson collection.jpg|alt=icon",
	["the kinks"] = "Helmfrid-sofa4 Touched.JPG|link=|alt=",
	["the legend of zelda"] = "Triforce.svg|link=|alt=",
	["the rolling stones"] = "Stones members montage.JPG|alt=icon",
	["the simpsons"] = "Simpsons tv icon.svg|alt=icon",
	["the sims"] = "Selectedsim.jpg|link=|alt=",
	["the supremes"] = "Supremes.Star.Hollywood.Walk.of.Fam.jpg|link=|alt=",
	["the x-files"] = "X from The X-Files logo.svg|link=|alt=",
	["theatre"] = "P culture.svg|alt=icon",
	["theosophy"] = "Theosophicalseal.svg|link=|alt=",
	["thinking"] = "Nicolas P. Rougier's rendering of the human brain.png|alt=icon",
	["thiruvananthapuram"] = "Seal of Thiruvananthapuram.png|alt=seal",
	["thuringia"] = "Flag of Thuringia.svg|border|link=|alt=flag",
	["tibet"] = "Himalayas-Lhasa10.JPG|alt=icon",
	["tibetan buddhism"] = "Vajrapani American Museum of Natural History.jpg|alt=icon",
	["time"] = "MontreGousset001.jpg|alt=icon",
	["timor-leste"] = "Flag of East Timor.svg|border|link=|alt=flag",
	["tirana"] = "Wappen Tirana.svg|alt=icon",
	["tobago"] = "Tobago-sunset.jpg|alt=icon",
	["togo"] = "Flag of Togo.svg|border|link=|alt=flag",
	["tokelau"] = "Flag of Tokelau.svg|border|link=|alt=flag",
	["tokyo"] = "PrefSymbol-Tokyo.svg|link=|alt=",
	["tonga"] = "Flag of Tonga.svg|border|link=|alt=flag",
	["topology"] = "Klein bottle translucent.png|alt=icon",
	["toronto"] = "Toronto Flag.svg|border|link=|alt=flag",
	["toys"] = "Toy Soldier.svg|alt=icon",
	["traditional african religion"] = "Brooklyn Museum 1989.51.39 Nommo Figure with Raised Arms.jpg|alt=icon",
	["trains"] = "P train.svg|alt=icon",
	["trams"] = "Sinnbild Straßenbahn.svg|link=|alt=",
	["transgender"] = "Portal Transgender.svg|alt=icon",
	["transhumanism"] = "Transhumanism h+.svg|alt=icon",
	["transnational child protection"] = "Transnational Child Protection Portal logo.svg|alt=icon",
	["transport in india"] = "Highway and Railway Map of India OSM.png|border|link=|alt=map",
	["transportation"] = "Nuvola apps ksysv.png|alt=icon",
	["trauma and orthopaedics"] = "Carpal-boss-3d.jpg|alt=icon",
	["trees"] = "Tree template.svg|alt=icon",
	["tiruchirappalli"] = "Tiruchiramalai1.jpg|link=|alt=icon",
	["trinidad and tobago"] = "Flag of Trinidad and Tobago.svg|border|link=|alt=flag",
	["tripura"] = "Seal of Tripura.svg|link=|alt=seal",
	["tropical cyclones"] = "Cyclone Catarina from the ISS on March 26 2004.JPG|link=|alt=",
	["trucks"] = "Sinnbild LKW.svg|link=|alt=",
	["tulsa"] = "TulsaOklahomaSeal.png|link=|alt=seal",
	["tunisia"] = "Flag of Tunisia.svg|border|link=|alt=flag",
	["turkey"] = "Flag of Turkey.svg|border|link=|alt=flag",
	["turkmenistan"] = "Flag of Turkmenistan.svg|border|link=|alt=flag",
	["turks and caicos islands"] = "Flag of the Turks and Caicos Islands.svg|border|link=|alt=flag",
	["turtles"] = "Florida Box Turtle Digon3.jpg|alt=icon",
	["tuvalu"] = "Flag of Tuvalu.svg|border|link=|alt=flag",
	["twilight"] = "Apple icon 2.png|alt=icon",
	["typography"] = "AARGUS.jpg|link=|alt=",
	["tyrol"] = "Tirol Wappen.PNG|link=|alt="
}</text>
      <sha1>nfj58m35uj7xordgbdyei9kv2hvmfwo</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Side box</title>
    <ns>828</ns>
    <id>42926982</id>
    <revision>
      <id>765979084</id>
      <parentid>738676004</parentid>
      <timestamp>2017-02-17T14:37:25Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <minor/>
      <comment>tweak color per request</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="2743">-- This module implements {{side box}}.

local yesno = require('Module:Yesno')

local p = {}

function p.main(frame)
	local origArgs = frame:getParent().args
	local args = {}
	for k, v in pairs(origArgs) do
		v = v:match('%s*(.-)%s*$')
		if v ~= '' then
			args[k] = v
		end
	end
	return p._main(args)
end

function p._main(args)
	local data = p.makeData(args)
	return p.renderSidebox(data)
end

function p.makeData(args)
	local data = {}

	-- Main table classes
	data.classes = {}
	if yesno(args.metadata) ~= false then
		table.insert(data.classes, 'metadata')
	end
	if args.position and args.position:lower() == 'left' then
		table.insert(data.classes, 'mbox-small-left')
	else
		table.insert(data.classes, 'mbox-small')
	end
	table.insert(data.classes, args.class)
	
	-- Image
	if args.image and args.image ~= 'none' then
		data.image = args.image
	end

	-- Copy over data that doesn't need adjusting
	local argsToCopy = {
		-- Styles
		'style',
		'textstyle',

		-- Above row
		'above',
		'abovestyle',

		-- Body row
		'text',
		'imageright',

		-- Below row
		'below',
	}
	for i, key in ipairs(argsToCopy) do
		data[key] = args[key]
	end

	return data
end

function p.renderSidebox(data)
	-- Renders the sidebox HTML.

	-- Table root
	local root = mw.html.create('table')
	root:attr('role', 'presentation')
	for i, class in ipairs(data.classes or {}) do
		root:addClass(class)
	end
	root:css{border = '1px solid #aaa', ['background-color'] = '#f9f9f9', color = '#000'}
	if data.style then
		root:cssText(data.style)
	end

	-- The "above" row
	if data.above then
		local aboveCell = root:newline():tag('tr'):tag('td')
		aboveCell
			:attr('colspan', data.imageright and 3 or 2)
			:addClass('mbox-text')
		if data.textstyle then
			aboveCell:cssText(data.textstyle)
		end
		if data.abovestyle then
			aboveCell:cssText(data.abovestyle)
		end
		aboveCell
			:newline()
			:wikitext(data.above)
	end

	-- The body row
	local bodyRow = root:newline():tag('tr'):newline()
	if data.image then
		bodyRow:tag('td')
			:addClass('mbox-image')
			:wikitext(data.image)
	else
		bodyRow:tag('td'):css('width', '1px')
	end
	local textCell = bodyRow:newline():tag('td')
	textCell:addClass('mbox-text plainlist')
	if data.textstyle then
		textCell:cssText(data.textstyle)
	end
	textCell:wikitext(data.text)
	if data.imageright then
		bodyRow:newline():tag('td')
			:addClass('mbox-imageright')
			:wikitext(data.imageright)
	end

	-- The below row
	if data.below then
		local belowCell = root:newline():tag('tr'):tag('td')
		belowCell
			:attr('colspan', data.imageright and 3 or 2)
			:addClass('mbox-text')
		if data.textstyle then
			belowCell:cssText(data.textstyle)
		end
		belowCell:wikitext(data.below)
	end

	return tostring(root)
end

return p</text>
      <sha1>40brk1c8277xql0q2lrsmvl4okh26ku</sha1>
    </revision>
  </page>
  <page>
    <title>Module:String</title>
    <ns>828</ns>
    <id>38569505</id>
    <revision>
      <id>552254999</id>
      <parentid>540627185</parentid>
      <timestamp>2013-04-26T10:52:01Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>Add "rep" function per request by [[User:קיפודנחש]] at [[Wikipedia:Lua requests#Template:Loop and Template:Loop15]]. Copied from sandbox.</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="15731">--[[  

This module is intended to provide access to basic string functions.

Most of the functions provided here can be invoked with named parameters, 
unnamed parameters, or a mixture.  If named parameters are used, Mediawiki will 
automatically remove any leading or trailing whitespace from the parameter.  
Depending on the intended use, it may be advantageous to either preserve or
remove such whitespace.

Global options
    ignore_errors: If set to 'true' or 1, any error condition will result in 
        an empty string being returned rather than an error message.  
        
    error_category: If an error occurs, specifies the name of a category to 
        include with the error message.  The default category is  
        [Category:Errors reported by Module String].
        
    no_category: If set to 'true' or 1, no category will be added if an error
        is generated.
        
Unit tests for this module are available at Module:String/tests.
]]

local str = {}

--[[
len

This function returns the length of the target string.

Usage:
{{#invoke:String|len|target_string|}}
OR
{{#invoke:String|len|s=target_string}}

Parameters
    s: The string whose length to report

If invoked using named parameters, Mediawiki will automatically remove any leading or
trailing whitespace from the target string.  
]]
function str.len( frame )
    local new_args = str._getParameters( frame.args, {'s'} );
    local s = new_args['s'] or '';
    return mw.ustring.len( s )
end

--[[
sub

This function returns a substring of the target string at specified indices.

Usage:
{{#invoke:String|sub|target_string|start_index|end_index}}
OR
{{#invoke:String|sub|s=target_string|i=start_index|j=end_index}}

Parameters
    s: The string to return a subset of
    i: The fist index of the substring to return, defaults to 1.
    j: The last index of the string to return, defaults to the last character.
    
The first character of the string is assigned an index of 1.  If either i or j
is a negative value, it is interpreted the same as selecting a character by 
counting from the end of the string.  Hence, a value of -1 is the same as 
selecting the last character of the string.

If the requested indices are out of range for the given string, an error is 
reported.
]]
function str.sub( frame )
    local new_args = str._getParameters( frame.args, { 's', 'i', 'j' } );
    local s = new_args['s'] or '';
    local i = tonumber( new_args['i'] ) or 1;
    local j = tonumber( new_args['j'] ) or -1;
    
    local len = mw.ustring.len( s );

    -- Convert negatives for range checking
    if i &lt; 0 then
        i = len + i + 1;
    end
    if j &lt; 0 then
        j = len + j + 1;
    end
    
    if i &gt; len or j &gt; len or i &lt; 1 or j &lt; 1 then
        return str._error( 'String subset index out of range' );
    end
    if j &lt; i then
        return str._error( 'String subset indices out of order' );
    end
    
    return mw.ustring.sub( s, i, j )
end

--[[
This function implements that features of {{str sub old}} and is kept in order
to maintain these older templates.
]]
function str.sublength( frame )
    local i = tonumber( frame.args.i ) or 0
    local len = tonumber( frame.args.len )
    return mw.ustring.sub( frame.args.s, i + 1, len and ( i + len ) )
end

--[[
match

This function returns a substring from the source string that matches a 
specified pattern.

Usage:
{{#invoke:String|match|source_string|pattern_string|start_index|match_number|plain_flag|nomatch_output}}
OR
{{#invoke:String|pos|s=source_string|pattern=pattern_string|start=start_index
    |match=match_number|plain=plain_flag|nomatch=nomatch_output}}

Parameters
    s: The string to search
    pattern: The pattern or string to find within the string
    start: The index within the source string to start the search.  The first
        character of the string has index 1.  Defaults to 1.
    match: In some cases it may be possible to make multiple matches on a single 
        string.  This specifies which match to return, where the first match is 
        match= 1.  If a negative number is specified then a match is returned 
        counting from the last match.  Hence match = -1 is the same as requesting
        the last match.  Defaults to 1.
    plain: A flag indicating that the pattern should be understood as plain
        text.  Defaults to false.
    nomatch: If no match is found, output the "nomatch" value rather than an error.

If invoked using named parameters, Mediawiki will automatically remove any leading or
trailing whitespace from each string.  In some circumstances this is desirable, in 
other cases one may want to preserve the whitespace.

If the match_number or start_index are out of range for the string being queried, then
this function generates an error.  An error is also generated if no match is found.
If one adds the parameter ignore_errors=true, then the error will be suppressed and 
an empty string will be returned on any failure.

For information on constructing Lua patterns, a form of [regular expression], see:

* http://www.lua.org/manual/5.1/manual.html#5.4.1
* http://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#Patterns
* http://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#Ustring_patterns

]]
function str.match( frame )
    local new_args = str._getParameters( frame.args, {'s', 'pattern', 'start', 'match', 'plain', 'nomatch'} );
    local s = new_args['s'] or '';
    local start = tonumber( new_args['start'] ) or 1;
    local plain_flag = str._getBoolean( new_args['plain'] or false );
    local pattern = new_args['pattern'] or '';
    local match_index = math.floor( tonumber(new_args['match']) or 1 );
    local nomatch = new_args['nomatch'];
    
    if s == '' then
        return str._error( 'Target string is empty' );
    end
    if pattern == '' then
        return str._error( 'Pattern string is empty' );
    end
    if math.abs(start) &lt; 1 or math.abs(start) &gt; mw.ustring.len( s ) then
        return str._error( 'Requested start is out of range' );
    end
    if match_index == 0 then
        return str._error( 'Match index is out of range' );
    end
    if plain_flag then
        pattern = str._escapePattern( pattern );
    end
    
    local result
    if match_index == 1 then
        -- Find first match is simple case
        result = mw.ustring.match( s, pattern, start )
    else
        if start &gt; 1 then
            s = mw.ustring.sub( s, start );
        end
        
        local iterator = mw.ustring.gmatch(s, pattern);
        if match_index &gt; 0 then
            -- Forward search
            for w in iterator do
                match_index = match_index - 1;
                if match_index == 0 then
                    result = w;
                    break;
                end
            end    
        else
            -- Reverse search
            local result_table = {};
            local count = 1;
            for w in iterator do
                result_table[count] = w;
                count = count + 1;
            end
            
            result = result_table[ count + match_index ];            
        end
    end        
    
    if result == nil then
        if nomatch == nil then
            return str._error( 'Match not found' );
        else
            return nomatch;
        end
    else
        return result;
    end
end

--[[
pos

This function returns a single character from the target string at position pos.

Usage:
{{#invoke:String|pos|target_string|index_value}}
OR
{{#invoke:String|pos|target=target_string|pos=index_value}}

Parameters
    target: The string to search
    pos: The index for the character to return

If invoked using named parameters, Mediawiki will automatically remove any leading or
trailing whitespace from the target string.  In some circumstances this is desirable, in 
other cases one may want to preserve the whitespace.

The first character has an index value of 1.

If one requests a negative value, this function will select a character by counting backwards 
from the end of the string.  In other words pos = -1 is the same as asking for the last character.

A requested value of zero, or a value greater than the length of the string returns an error.
]]
function str.pos( frame )
    local new_args = str._getParameters( frame.args, {'target', 'pos'} );
    local target_str = new_args['target'] or '';
    local pos = tonumber( new_args['pos'] ) or 0;

    if pos == 0 or math.abs(pos) &gt; mw.ustring.len( target_str ) then
        return str._error( 'String index out of range' );
    end    
    
    return mw.ustring.sub( target_str, pos, pos );
end

--[[
str_find

This function duplicates the behavior of {{str_find}}, including all of its quirks.
This is provided in order to support existing templates, but is NOT RECOMMENDED for 
new code and templates.  New code is recommended to use the "find" function instead.

Returns the first index in "source" that is a match to "target".  Indexing is 1-based,
and the function returns -1 if the "target" string is not present in "source".

Important Note: If the "target" string is empty / missing, this function returns a
value of "1", which is generally unexpected behavior, and must be accounted for
separatetly.
]]
function str.str_find( frame )
    local new_args = str._getParameters( frame.args, {'source', 'target'} );
    local source_str = new_args['source'] or '';
    local target_str = new_args['target'] or '';

    if target_str == '' then
        return 1;
    end    
    
    local start = mw.ustring.find( source_str, target_str, 1, true )
    if start == nil then
        start = -1
    end
    
    return start
end

--[[
find

This function allows one to search for a target string or pattern within another
string.

Usage:
{{#invoke:String|find|source_str|target_string|start_index|plain_flag}}
OR
{{#invoke:String|find|source=source_str|target=target_str|start=start_index|plain=plain_flag}}

Parameters
    source: The string to search
    target: The string or pattern to find within source
    start: The index within the source string to start the search, defaults to 1
    plain: Boolean flag indicating that target should be understood as plain
        text and not as a Lua style regular expression, defaults to true

If invoked using named parameters, Mediawiki will automatically remove any leading or
trailing whitespace from the parameter.  In some circumstances this is desirable, in 
other cases one may want to preserve the whitespace.

This function returns the first index &gt;= "start" where "target" can be found 
within "source".  Indices are 1-based.  If "target" is not found, then this 
function returns 0.  If either "source" or "target" are missing / empty, this
function also returns 0.

This function should be safe for UTF-8 strings.
]]
function str.find( frame )
    local new_args = str._getParameters( frame.args, {'source', 'target', 'start', 'plain' } ); 
    local source_str = new_args['source'] or '';
    local pattern = new_args['target'] or '';
    local start_pos = tonumber(new_args['start']) or 1;
    local plain = new_args['plain'] or true;
        
    if source_str == '' or pattern == '' then
        return 0;
    end    
    
    plain = str._getBoolean( plain );

    local start = mw.ustring.find( source_str, pattern, start_pos, plain )
    if start == nil then
        start = 0
    end
    
    return start
end

--[[
replace

This function allows one to replace a target string or pattern within another
string.

Usage:
{{#invoke:String|replace|source_str|pattern_string|replace_string|replacement_count|plain_flag}}
OR
{{#invoke:String|replace|source=source_string|pattern=pattern_string|replace=replace_string|
   count=replacement_count|plain=plain_flag}}

Parameters
    source: The string to search
    pattern: The string or pattern to find within source
    replace: The replacement text
    count: The number of occurences to replace, defaults to all.
    plain: Boolean flag indicating that pattern should be understood as plain
        text and not as a Lua style regular expression, defaults to true 
]]
function str.replace( frame )
    local new_args = str._getParameters( frame.args, {'source', 'pattern', 'replace', 'count', 'plain' } ); 
    local source_str = new_args['source'] or '';
    local pattern = new_args['pattern'] or '';
    local replace = new_args['replace'] or '';
    local count = tonumber( new_args['count'] );
    local plain = new_args['plain'] or true;
        
    if source_str == '' or pattern == '' then
        return source_str;
    end    
    plain = str._getBoolean( plain );

    if plain then
        pattern = str._escapePattern( pattern );
        replace = mw.ustring.gsub( replace, "%%", "%%%%" ); --Only need to escape replacement sequences.
    end
    
    local result;

    if count ~= nil then
        result = mw.ustring.gsub( source_str, pattern, replace, count );
    else
        result = mw.ustring.gsub( source_str, pattern, replace );
    end        

    return result;
end

--[[ 
    simple function to pipe string.rep to templates.
]]

function str.rep( frame )
    local repetitions = tonumber( frame.args[2] )
    if not repetitions then 
        return str._error( 'function rep expects a number as second parameter, received "' .. ( frame.args[2] or '' ) .. '"' )
    end
    return string.rep( frame.args[1] or '', repetitions )
end

--[[
Helper function that populates the argument list given that user may need to use a mix of
named and unnamed parameters.  This is relevant because named parameters are not
identical to unnamed parameters due to string trimming, and when dealing with strings
we sometimes want to either preserve or remove that whitespace depending on the application.
]]
function str._getParameters( frame_args, arg_list )
    local new_args = {};
    local index = 1;
    local value;
    
    for i,arg in ipairs( arg_list ) do
        value = frame_args[arg]
        if value == nil then
            value = frame_args[index];
            index = index + 1;
        end
        new_args[arg] = value;
    end
    
    return new_args;
end        

--[[
Helper function to handle error messages.
]]
function str._error( error_str )
    local frame = mw.getCurrentFrame();
    local error_category = frame.args.error_category or 'Errors reported by Module String';
    local ignore_errors = frame.args.ignore_errors or false;
    local no_category = frame.args.no_category or false;
    
    if str._getBoolean(ignore_errors) then
        return '';
    end
    
    local error_str = '&lt;strong class="error"&gt;String Module Error: ' .. error_str .. '&lt;/strong&gt;';
    if error_category ~= '' and not str._getBoolean( no_category ) then
        error_str = '[[Category:' .. error_category .. ']]' .. error_str;
    end        
    
    return error_str;
end

--[[
Helper Function to interpret boolean strings
]]
function str._getBoolean( boolean_str )
    local boolean_value;
    
    if type( boolean_str ) == 'string' then
        boolean_str = boolean_str:lower();
        if boolean_str == 'false' or boolean_str == 'no' or boolean_str == '0' 
                or boolean_str == '' then
            boolean_value = false;
        else
            boolean_value = true;
        end    
    elseif type( boolean_str ) == 'boolean' then
        boolean_value = boolean_str;
    else
        error( 'No boolean value found' );
    end    
    return boolean_value
end

--[[
Helper function that escapes all pattern characters so that they will be treated 
as plain text.
]]
function str._escapePattern( pattern_str )
    return mw.ustring.gsub( pattern_str, "([%(%)%.%%%+%-%*%?%[%^%$%]])", "%%%1" );
end

return str</text>
      <sha1>l0shz7fzxb1bq626nihqwbptk7dfqd5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:TableTools</title>
    <ns>828</ns>
    <id>41371028</id>
    <revision>
      <id>610073853</id>
      <parentid>587870113</parentid>
      <timestamp>2014-05-25T14:11:02Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>fix cleanPattern function - some of the character classes were still being magic even when they were inside the set, so escape them all</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="8030">--[[
------------------------------------------------------------------------------------
--                               TableTools                                       --
--                                                                                --
-- This module includes a number of functions for dealing with Lua tables.        --
-- It is a meta-module, meant to be called from other Lua modules, and should     --
-- not be called directly from #invoke.                                           --
------------------------------------------------------------------------------------
--]]

local libraryUtil = require('libraryUtil')

local p = {}

-- Define often-used variables and functions.
local floor = math.floor
local infinity = math.huge
local checkType = libraryUtil.checkType

--[[
------------------------------------------------------------------------------------
-- isPositiveInteger
--
-- This function returns true if the given value is a positive integer, and false
-- if not. Although it doesn't operate on tables, it is included here as it is
-- useful for determining whether a given table key is in the array part or the
-- hash part of a table.
------------------------------------------------------------------------------------
--]]
function p.isPositiveInteger(v)
	if type(v) == 'number' and v &gt;= 1 and floor(v) == v and v &lt; infinity then
		return true
	else
		return false
	end
end

--[[
------------------------------------------------------------------------------------
-- isNan
--
-- This function returns true if the given number is a NaN value, and false
-- if not. Although it doesn't operate on tables, it is included here as it is
-- useful for determining whether a value can be a valid table key. Lua will
-- generate an error if a NaN is used as a table key.
------------------------------------------------------------------------------------
--]]
function p.isNan(v)
	if type(v) == 'number' and tostring(v) == '-nan' then
		return true
	else
		return false
	end
end

--[[
------------------------------------------------------------------------------------
-- shallowClone
--
-- This returns a clone of a table. The value returned is a new table, but all
-- subtables and functions are shared. Metamethods are respected, but the returned
-- table will have no metatable of its own.
------------------------------------------------------------------------------------
--]]
function p.shallowClone(t)
	local ret = {}
	for k, v in pairs(t) do
		ret[k] = v
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- removeDuplicates
--
-- This removes duplicate values from an array. Non-positive-integer keys are
-- ignored. The earliest value is kept, and all subsequent duplicate values are
-- removed, but otherwise the array order is unchanged.
------------------------------------------------------------------------------------
--]]
function p.removeDuplicates(t)
	checkType('removeDuplicates', 1, t, 'table')
	local isNan = p.isNan
	local ret, exists = {}, {}
	for i, v in ipairs(t) do
		if isNan(v) then
			-- NaNs can't be table keys, and they are also unique, so we don't need to check existence.
			ret[#ret + 1] = v
		else
			if not exists[v] then
				ret[#ret + 1] = v
				exists[v] = true
			end
		end	
	end
	return ret
end			

--[[
------------------------------------------------------------------------------------
-- numKeys
--
-- This takes a table and returns an array containing the numbers of any numerical
-- keys that have non-nil values, sorted in numerical order.
------------------------------------------------------------------------------------
--]]
function p.numKeys(t)
	checkType('numKeys', 1, t, 'table')
	local isPositiveInteger = p.isPositiveInteger
	local nums = {}
	for k, v in pairs(t) do
		if isPositiveInteger(k) then
			nums[#nums + 1] = k
		end
	end
	table.sort(nums)
	return nums
end

--[[
------------------------------------------------------------------------------------
-- affixNums
--
-- This takes a table and returns an array containing the numbers of keys with the
-- specified prefix and suffix. For example, for the table
-- {a1 = 'foo', a3 = 'bar', a6 = 'baz'} and the prefix "a", affixNums will
-- return {1, 3, 6}.
------------------------------------------------------------------------------------
--]]
function p.affixNums(t, prefix, suffix)
	checkType('affixNums', 1, t, 'table')
	checkType('affixNums', 2, prefix, 'string', true)
	checkType('affixNums', 3, suffix, 'string', true)

	local function cleanPattern(s)
		-- Cleans a pattern so that the magic characters ()%.[]*+-?^$ are interpreted literally.
		s = s:gsub('([%(%)%%%.%[%]%*%+%-%?%^%$])', '%%%1')
		return s
	end

	prefix = prefix or ''
	suffix = suffix or ''
	prefix = cleanPattern(prefix)
	suffix = cleanPattern(suffix)
	local pattern = '^' .. prefix .. '([1-9]%d*)' .. suffix .. '$'

	local nums = {}
	for k, v in pairs(t) do
		if type(k) == 'string' then			
			local num = mw.ustring.match(k, pattern)
			if num then
				nums[#nums + 1] = tonumber(num)
			end
		end
	end
	table.sort(nums)
	return nums
end

--[[
------------------------------------------------------------------------------------
-- numData
--
-- Given a table with keys like ("foo1", "bar1", "foo2", "baz2"), returns a table
-- of subtables in the format 
-- { [1] = {foo = 'text', bar = 'text'}, [2] = {foo = 'text', baz = 'text'} }
-- Keys that don't end with an integer are stored in a subtable named "other".
-- The compress option compresses the table so that it can be iterated over with
-- ipairs.
------------------------------------------------------------------------------------
--]]
function p.numData(t, compress)
	checkType('numData', 1, t, 'table')
	checkType('numData', 2, compress, 'boolean', true)
	local ret = {}
	for k, v in pairs(t) do
		local prefix, num = mw.ustring.match(tostring(k), '^([^0-9]*)([1-9][0-9]*)$')
		if num then
			num = tonumber(num)
			local subtable = ret[num] or {}
			if prefix == '' then
				-- Positional parameters match the blank string; put them at the start of the subtable instead.
				prefix = 1
			end
			subtable[prefix] = v
			ret[num] = subtable
		else
			local subtable = ret.other or {}
			subtable[k] = v
			ret.other = subtable
		end
	end
	if compress then
		local other = ret.other
		ret = p.compressSparseArray(ret)
		ret.other = other
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- compressSparseArray
--
-- This takes an array with one or more nil values, and removes the nil values
-- while preserving the order, so that the array can be safely traversed with
-- ipairs.
------------------------------------------------------------------------------------
--]]
function p.compressSparseArray(t)
	checkType('compressSparseArray', 1, t, 'table')
	local ret = {}
	local nums = p.numKeys(t)
	for _, num in ipairs(nums) do
		ret[#ret + 1] = t[num]
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- sparseIpairs
--
-- This is an iterator for sparse arrays. It can be used like ipairs, but can
-- handle nil values.
------------------------------------------------------------------------------------
--]]
function p.sparseIpairs(t)
	checkType('sparseIpairs', 1, t, 'table')
	local nums = p.numKeys(t)
	local i = 0
	local lim = #nums
	return function ()
		i = i + 1
		if i &lt;= lim then
			local key = nums[i]
			return key, t[key]
		else
			return nil, nil
		end
	end
end

--[[
------------------------------------------------------------------------------------
-- size
--
-- This returns the size of a key/value pair table. It will also work on arrays,
-- but for arrays it is more efficient to use the # operator.
------------------------------------------------------------------------------------
--]]
function p.size(t)
	checkType('size', 1, t, 'table')
	local i = 0
	for k in pairs(t) do
		i = i + 1
	end
	return i
end

return p</text>
      <sha1>k1omc17qij757n8hd68yihcqxo4biqi</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Unsubst</title>
    <ns>828</ns>
    <id>40945493</id>
    <revision>
      <id>784254967</id>
      <parentid>784251604</parentid>
      <timestamp>2017-06-07T09:01:50Z</timestamp>
      <contributor>
        <username>Jc86035</username>
        <id>17245768</id>
      </contributor>
      <minor/>
      <comment>fix whitespace removal; remove empty parameters after handling aliases and prevent removal of two or fewer consecutive empty parameters in a sequence</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="3688">local checkType = require('libraryUtil').checkType

local p = {}

local BODY_PARAM = '$B'

local specialParams = {
	['$params'] = 'parameter list',
	['$aliases'] = 'parameter aliases',
	['$flags'] = 'flags',
	['$B'] = 'template content'
}

function p.main(frame, body)
	-- If we are substing, this function returns a template invocation, and if
	-- not, it returns the template body. The template body can be specified in
	-- the body parameter, or in the template parameter defined in the
	-- BODY_PARAM variable. This function can be called from Lua or from
	-- #invoke.

	-- Return the template body if we aren't substing.
	if not mw.isSubsting() then
		if body ~= nil then
			return body
		elseif frame.args[BODY_PARAM] ~= nil then
			return frame.args[BODY_PARAM]
		else
			error(string.format(
				"no template content specified (use parameter '%s' from #invoke)",
				BODY_PARAM
			), 2)
		end
	end

	-- Sanity check for the frame object.
	if type(frame) ~= 'table'
		or type(frame.getParent) ~= 'function'
		or not frame:getParent()
	then
		error(
			"argument #1 to 'main' must be a frame object with a parent " ..
			"frame available",
			2
		)
	end

	-- Find the invocation name.
	local mTemplateInvocation = require('Module:Template invocation')
	local name = mTemplateInvocation.name(frame:getParent():getTitle())

	-- Combine passed args with passed defaults
	local args = {}
	if string.find( ','..(frame.args['$flags'] or '')..',', ',%s*override%s*,' ) then
		for k, v in pairs( frame:getParent().args ) do
			args[k] = v
		end
		for k, v in pairs( frame.args ) do
			if not specialParams[k] then
				if v == '__DATE__' then
					v = mw.getContentLanguage():formatDate( 'F Y' )
				end
				args[k] = v
			end
		end
	else
		for k, v in pairs( frame.args ) do
			if not specialParams[k] then
				if v == '__DATE__' then
					v = mw.getContentLanguage():formatDate( 'F Y' )
				end
				args[k] = v
			end
		end
		for k, v in pairs( frame:getParent().args ) do
			args[k] = v
		end
	end

	-- Trim parameters, if not specified otherwise
	if not string.find( ','..(frame.args['$flags'] or '')..',', ',%s*keep%-whitespace%s*,' ) then
		for k, v in pairs( args ) do args[k] = mw.ustring.match(v, '^%s*(.*)%s*$') or '' end
	end

	-- Pull information from parameter aliases
	local aliases = {}
	if frame.args['$aliases'] then
		local list = mw.text.split( frame.args['$aliases'], '%s*,%s*' )
		for k, v in ipairs( list ) do
			local tmp = mw.text.split( v, '%s*&gt;%s*' )
			aliases[tonumber(mw.ustring.match(tmp[1], '^[1-9][0-9]*$')) or tmp[1]] = ((tonumber(mw.ustring.match(tmp[2], '^[1-9][0-9]*$'))) or tmp[2])
		end
	end
	for k, v in pairs( aliases ) do
		if args[k] and ( not args[v] or args[v] == '' ) then
			args[v] = args[k]
		end
		args[k] = nil
	end

	-- Remove empty parameters, if specified
	if string.find( ','..(frame.args['$flags'] or '')..',', ',%s*remove%-empty%s*,' ) then
		local tmp = 0
		for k, v in ipairs( args ) do
			if v ~= '' or ( args[k+1] and args[k+1] ~= '' ) or ( args[k+2] and args[k+2] ~= '' ) then
				tmp = k
			else
				break
			end
		end
		for k, v in pairs( args ) do
			if v == '' then
				if not (type(k) == 'number' and k &lt; tmp) then args[k] = nil end
			end
		end
	end

	-- Order parameters
	if frame.args['$params'] then
		local params, tmp = mw.text.split( frame.args['$params'], '%s*,%s*' ), {}
		for k, v in ipairs(params) do
			v = tonumber(mw.ustring.match(v, '^[1-9][0-9]*$')) or v
			if args[v] then tmp[v], args[v] = args[v], nil end
		end
		for k, v in pairs(args) do tmp[k], args[k] = args[k], nil end
		args = tmp
	end

	return mTemplateInvocation.invocation(name, args)
end

p[''] = p.main -- For backwards compatibility

return p</text>
      <sha1>dnfbu3ol9y1rn4f58ap519pwafevpgq</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Webarchive</title>
    <ns>828</ns>
    <id>51937454</id>
    <revision>
      <id>844168596</id>
      <parentid>844163839</parentid>
      <timestamp>2018-06-03T02:53:35Z</timestamp>
      <contributor>
        <username>GreenC</username>
        <id>8931761</id>
      </contributor>
      <comment>change plain-&gt; true / check for missing URL protocol as mw.uri.new() requires</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="28798">--[[ ----------------------------------

     Lua module implementing the {{webarchive}} template. 

       A merger of the functionality of three templates: {{wayback}}, {{webcite}} and {{cite archives}}
   
  ]]

local p = {}

--[[--------------------------&lt; inlineError &gt;-----------------------

     Critical error. Render output completely in red. Add to tracking category.

 ]]

local function inlineError(arg, msg)

  track["Category:Webarchive template errors"] = 1
  return '&lt;span style="font-size:100%" class="error citation-comment"&gt;Error in webarchive template: Check &lt;code style="color:inherit; border:inherit; padding:inherit;"&gt;&amp;#124;' .. arg .. '=&lt;/code&gt; value. ' .. msg .. '&lt;/span&gt;'

end

--[[--------------------------&lt; inlineRed &gt;-----------------------

      Render a text fragment in red, such as a warning as part of the final output.
      Add tracking category.

 ]]

local function inlineRed(msg, trackmsg)

  if trackmsg == "warning" then
    track["Category:Webarchive template warnings"] = 1 
  elseif trackmsg == "error" then
    track["Category:Webarchive template errors"] = 1 
  end

  return '&lt;span style="font-size:100%" class="error citation-comment"&gt;' .. msg .. '&lt;/span&gt;'

end

--[[--------------------------&lt; trimArg &gt;-----------------------

     trimArg returns nil if arg is "" while trimArg2 returns 'true' if arg is "" 
     trimArg2 is for args that might accept an empty value, as an on/off switch like nolink=

 ]]

local function trimArg(arg)
  if arg == "" or arg == nil then
    return nil
  else
    return mw.text.trim(arg)
  end
end
local function trimArg2(arg)
  if arg == nil then
    return nil
  else
    return mw.text.trim(arg)
  end
end

--[[--------------------------&lt; base62 &gt;-----------------------

     Convert base-62 to base-10
     Credit: https://de.wikipedia.org/wiki/Modul:Expr 

  ]]

local function base62( value )

    local r = 1

    if value:match( "^%w+$" ) then
        local n = #value
        local k = 1
        local c
        r = 0
        for i = n, 1, -1 do
            c = value:byte( i, i )
            if c &gt;= 48  and  c &lt;= 57 then
                c = c - 48
            elseif c &gt;= 65  and  c &lt;= 90 then
                c = c - 55
            elseif c &gt;= 97  and  c &lt;= 122 then
                c = c - 61
            else    -- How comes?
                r = 1
                break    -- for i
            end
            r = r + c * k
            k = k * 62
        end -- for i
    end
    return r
end 

--[[--------------------------&lt; tableLength &gt;-----------------------

      Given a 1-D table, return number of elements

  ]]

local function tableLength(T)
  local count = 0
  for _ in pairs(T) do count = count + 1 end
  return count
end


--[[--------------------------&lt; dateFormat &gt;-----------------------

     Given a date string, return its format: dmy, mdy, iso, ymd
       If unable to determine return nil

  ]]

local function dateFormat(date)

  local dt = {}
  dt.split = {}

  dt.split = mw.text.split(date, "-")
  if tableLength(dt.split) == 3 then
    if tonumber(dt.split[1]) &gt; 1900 and tonumber(dt.split[1]) &lt; 2200 and tonumber(dt.split[2]) and tonumber(dt.split[3]) then
      return "iso"
    else
      return nil
    end
  end  

  dt.split = mw.text.split(date, " ")
  if tableLength(dt.split) == 3 then
    if tonumber(dt.split[3]) then
      if tonumber(dt.split[3]) &gt; 1900 and tonumber(dt.split[3]) &lt; 2200 then
        if tonumber(dt.split[1]) then
          return "dmy"
        else
          return "mdy"
        end 
      else
        if tonumber(dt.split[1]) then
          if tonumber(dt.split[1]) &gt; 1900 and tonumber(dt.split[1]) &lt; 2200 then
            return "ymd"
          end
        end
      end
    end
  end
  return nil

end

--[[--------------------------&lt; makeDate &gt;-----------------------

     Given a zero-padded 4-digit year, 2-digit month and 2-digit day, return a full date in df format
     df = mdy, dmy, iso, ymd

 ]]

local function makeDate(year, month, day, df)

  if not year or year == "" or not month or month == "" or not day or day == "" then
    return nil
  end

  local zmonth = month                                                      -- month with leading 0
  month = month:match("0*(%d+)")                                            -- month without leading 0
  if tonumber(month) &lt; 1 or tonumber(month) &gt; 12 then
    return year
  end
  local nmonth = os.date("%B", os.time{year=2000, month=month, day=1} )     -- month in name form       
  if not nmonth then
    return year
  end

  local zday = day
  day = zday:match("0*(%d+)")
  if tonumber(day) &lt; 1 or tonumber(day) &gt; 31 then
    if df == "mdy" or df == "dmy" then
      return nmonth .. " " .. year
    elseif df == "iso" then
      return year .. "-" .. zmonth 
    elseif df == "ymd" then
      return year .. " " .. nmonth
    else
      return nmonth .. " " .. year
    end
  end                                       

  if df == "mdy" then
    return nmonth .. " " .. day .. ", " .. year         -- September 1, 2016
  elseif df == "dmy" then
    return day .. " " .. nmonth .. " " .. year          -- 1 September 2016
  elseif df == "iso" then
    return year .. "-" .. zmonth .. "-" .. zday         -- 2016-09-01
  elseif df == "ymd" then
    return year .. " " .. nmonth .. " " .. day          -- 2016 September 1
  else
    return nmonth .. " " .. day .. ", " .. year         -- September 1, 2016
  end

end


--[[--------------------------&lt; decodeWebciteDate &gt;-----------------------

      Given a URI-path to Webcite (eg. /67xHmVFWP) return the encoded date in df format

  ]]
local function decodeWebciteDate(path, df)

    local dt = {}
    dt.split = {}

    dt.split = mw.text.split(path, "/")

    -- valid URL formats that are not base62

    -- http://www.webcitation.org/query?id=1138911916587475
    -- http://www.webcitation.org/query?url=http..&amp;date=2012-06-01+21:40:03
    -- http://www.webcitation.org/1138911916587475
    -- http://www.webcitation.org/cache/73e53dd1f16cf8c5da298418d2a6e452870cf50e
    -- http://www.webcitation.org/getfile.php?fileid=1c46e791d68e89e12d0c2532cc3cf629b8bc8c8e

    if mw.ustring.find( dt.split[2], "query", 1, true) or 
       mw.ustring.find( dt.split[2], "cache", 1, true) or
       mw.ustring.find( dt.split[2], "getfile", 1, true) or
       tonumber(dt.split[2]) then
      return "query"
    end

    dt.full = os.date("%Y %m %d", string.sub(string.format("%d", base62(dt.split[2])),1,10) )
    dt.split = mw.text.split(dt.full, " ")
    dt.year = dt.split[1]
    dt.month = dt.split[2]
    dt.day = dt.split[3]

    if not tonumber(dt.year) or not tonumber(dt.month) or not tonumber(dt.day) then
      return inlineRed("[Date error] (1)", "error")
    end

    if tonumber(dt.month) &gt; 12 or tonumber(dt.day) &gt; 31 or tonumber(dt.month) &lt; 1 then
      return inlineRed("[Date error] (2)", "error")
    end
    if tonumber(dt.year) &gt; tonumber(os.date("%Y")) or tonumber(dt.year) &lt; 1900 then
      return inlineRed("[Date error] (3)", "error")
    end

    local fulldate = makeDate(dt.year, dt.month, dt.day, df)
    if not fulldate then
      return inlineRed("[Date error] (4)", "error")
    else
      return fulldate
    end

end

--[[--------------------------&lt; decodeWaybackDate &gt;-----------------------

Given a URI-path to Wayback (eg. /web/20160901010101/http://example.com )
  or Library of Congress Web Archives (/all/20160901010101/http://example.com)
  return the formatted date eg. "September 1, 2016" in df format 
  Handle non-digits in snapshot ID such as "re_" and "-" and "*"

 ]]

local function decodeWaybackDate(path, df)

    local snapdate, snapdatelong, currdate, fulldate

    local safe = path
    snapdate = string.gsub(safe, "^/all/", "")                          -- Remove leading "/all/"
    safe = snapdate
    snapdate = string.gsub(safe, "^/w?e?b?/?", "")                      -- Remove leading "/web/" or "/"
    safe = snapdate
    local N = mw.text.split(safe, "/")
    snapdate = N[1]
    if snapdate == "*" then                                             -- eg. /web/*/http.. or /all/*/http..
      return "index"
    end
    safe = snapdate
    snapdate = string.gsub(safe, "[a-z][a-z]_[0-9]?$", "")              -- Remove any trailing "re_" from date 
    safe = snapdate
    snapdate = string.gsub(safe, "[-]", "")                             -- Remove dashes from date eg. 2015-01-01 
    safe = snapdate
    snapdate = string.gsub(safe, "[*]$", "")                            -- Remove trailing "*" 

    if not tonumber(snapdate) then
      return inlineRed("[Date error] (2)", "error")
    end
    local dlen = string.len(snapdate)
    if dlen &lt; 4 then
      return inlineRed("[Date error] (3)", "error")
    end
    if dlen &lt; 14 then
      snapdatelong = snapdate .. string.rep("0", 14 - dlen)
    else
      snapdatelong = snapdate
    end
    local year = string.sub(snapdatelong, 1, 4)
    local month = string.sub(snapdatelong, 5, 6)
    local day = string.sub(snapdatelong, 7, 8)
    if not tonumber(year) or not tonumber(month) or not tonumber(day) then
      return inlineRed("[Date error] (4)", "error")
    end
    if tonumber(month) &gt; 12 or tonumber(day) &gt; 31 or tonumber(month) &lt; 1 then
      return inlineRed("[Date error] (5)", "error")
    end
    currdate = os.date("%Y")
    if tonumber(year) &gt; tonumber(currdate) or tonumber(year) &lt; 1900 then
      return inlineRed("[Date error] (6)", "error")
    end

    fulldate = makeDate(year, month, day, df)
    if not fulldate then
      return inlineRed("[Date error] (7)", "error")
    else
      return fulldate
    end

end

--[[--------------------------&lt; decodeArchiveisDate &gt;-----------------------

  Given an Archive.is "long link" URI-path (e.g. /2016.08.28-144552/http://example.com)
  return the date in df format (e.g. if df = dmy, return 28 August 2016)
  Handles "." and "-" in snapshot date, so 2016.08.28-144552 is same as 20160828144552

  ]]

local function decodeArchiveisDate(path, df)

    local snapdate, snapdatelong, currdate, fulldate

    local safe = path
    local N = mw.text.split(safe, "/")
    safe = N[2]                                                         -- get snapshot date, e.g. 2016.08.28-144552
    snapdate = string.gsub(safe, "[%.%-]", "")                          -- remove periods and hyphens

    if not tonumber(snapdate) then                                      -- if not numeric, it is "short link", not date
        return "short link"                                             -- e.g. http://archive.is/hD1qz
    end

    local dlen = string.len(snapdate)
    if dlen &lt; 4 then
        return inlineRed("[Date error] (3)", "error")
    end
    if dlen &lt; 14 then
        snapdatelong = snapdate .. string.rep("0", 14 - dlen)
    else
        snapdatelong = snapdate
    end
    local year = string.sub(snapdatelong, 1, 4)
    local month = string.sub(snapdatelong, 5, 6)
    local day = string.sub(snapdatelong, 7, 8)
    if not tonumber(year) or not tonumber(month) or not tonumber(day) then
        return inlineRed("[Date error] (4)", "error")
    end
    if tonumber(month) &gt; 12 or tonumber(day) &gt; 31 or tonumber(month) &lt; 1 then
        return inlineRed("[Date error] (5)", "error")
    end
    currdate = os.date("%Y")
    if tonumber(year) &gt; tonumber(currdate) or tonumber(year) &lt; 1900 then
        return inlineRed("[Date error] (6)", "error")
    end

    fulldate = makeDate(year, month, day, df)
    if not fulldate then
        return inlineRed("[Date error] (7)", "error")
    else
        return fulldate
    end

 end


--[[--------------------------&lt; serviceName &gt;-----------------------

     Given a domain extracted by mw.uri.new() (eg. web.archive.org) set tail string and service ID

  ]]

local function serviceName(host, nolink)

  local tracking = "Category:Webarchive template other archives"

  local bracketopen = "[["
  local bracketclose = "]]"
  if nolink then
    bracketopen = ""
    bracketclose = ""
  end

  ulx.url1.service = "other"
  ulx.url1.tail = " at " .. ulx.url1.host .. " " .. inlineRed("Error: unknown archive URL")

  host = string.lower(host)

  if mw.ustring.find( host, "europarchive.org", 1, true ) then  -- any containing "archive.org" listed before Wayback to avoid disambiguation
    ulx.url1.tail = " at the " .. bracketopen .. "National Library of Ireland" .. bracketclose
  elseif mw.ustring.find( host, "webarchive.org.uk", 1, true ) then
    ulx.url1.tail = " at the " .. bracketopen .. "UK Web Archive" .. bracketclose
  elseif mw.ustring.find( host, "archive.org", 1, true ) then
    ulx.url1.service = "wayback"
    ulx.url1.tail = " at the " .. bracketopen .. "Wayback Machine" .. bracketclose
    tracking = "Category:Webarchive template wayback links"
  elseif mw.ustring.find( host, "webcitation.org", 1, true ) then
    ulx.url1.service = "webcite"
    ulx.url1.tail = " at " .. bracketopen .. "WebCite" .. bracketclose
    tracking = "Category:Webarchive template webcite links"
  elseif mw.ustring.find( host, "archive.is", 1, true ) then
    ulx.url1.service = "archiveis"
    ulx.url1.tail = " at " .. bracketopen .. "Archive.is" .. bracketclose
    tracking = "Category:Webarchive template archiveis links"
  elseif mw.ustring.find( host, "archive.fo", 1, true ) then
    ulx.url1.service = "archiveis"
    ulx.url1.tail = " at " .. bracketopen .. "Archive.is" .. bracketclose
    tracking = "Category:Webarchive template archiveis links"
  elseif mw.ustring.find( host, "archive.today", 1, true ) then
    ulx.url1.service = "archiveis"
    ulx.url1.tail = " at " .. bracketopen .. "Archive.is" .. bracketclose
    tracking = "Category:Webarchive template archiveis links"
  elseif mw.ustring.find( host, "archive.li", 1, true ) then
    ulx.url1.service = "archiveis"
    ulx.url1.tail = " at " .. bracketopen .. "Archive.is" .. bracketclose
    tracking = "Category:Webarchive template archiveis links"
  elseif mw.ustring.find( host, "archive.ec", 1, true ) then
    ulx.url1.service = "archiveis"
    ulx.url1.tail = " at " .. bracketopen .. "Archive.is" .. bracketclose
    tracking = "Category:Webarchive template archiveis links"
  elseif mw.ustring.find( host, "archive-it.org", 1, true ) then
    ulx.url1.service = "archiveit"
    ulx.url1.tail = " at " .. bracketopen .. "Archive-It" .. bracketclose
  elseif mw.ustring.find( host, "wikiwix.com", 1, true ) then
    ulx.url1.tail = " at Wikiwix" 
  elseif mw.ustring.find( host, "arquivo.pt", 1, true) then
    ulx.url1.tail = " at the " .. "Portuguese Web Archive" 
  elseif mw.ustring.find( host, "webarchive.loc.gov", 1, true ) then
    ulx.url1.service = "locwebarchives"
    ulx.url1.tail = " at the " .. bracketopen .. "Library of Congress" .. bracketclose .. " Web Archives"
  elseif mw.ustring.find( host, "loc.gov", 1, true ) then
    ulx.url1.tail = " at the " .. bracketopen .. "Library of Congress" .. bracketclose
  elseif mw.ustring.find( host, "webharvest.gov", 1, true ) then
    ulx.url1.tail = " at the " .. bracketopen .. "National Archives and Records Administration" .. bracketclose
  elseif mw.ustring.find( host, "bibalex.org", 1, true ) then
    ulx.url1.tail = " at " .. "[[Bibliotheca_Alexandrina#Internet_Archive_partnership|Bibliotheca Alexandrina]]"
  elseif mw.ustring.find( host, "collectionscanada", 1, true ) then
    ulx.url1.tail = " at the " .. "Canadian Government Web Archive"
  elseif mw.ustring.find( host, "haw.nsk", 1, true ) then
    ulx.url1.tail = " at the " .. "Croatian Web Archive (HAW)"
  elseif mw.ustring.find( host, "veebiarhiiv.digar.ee", 1, true ) then
    ulx.url1.tail = " at the " .. "Estonian Web Archive"
  elseif mw.ustring.find( host, "vefsafn.is", 1, true ) then
    ulx.url1.tail = " at the " .. "[[National and University Library of Iceland]]"
  elseif mw.ustring.find( host, "proni.gov", 1, true ) then
    ulx.url1.tail = " at the " .. bracketopen .. "Public Record Office of Northern Ireland" .. bracketclose
  elseif mw.ustring.find( host, "uni-lj.si", 1, true ) then
    ulx.url1.tail = " at the " .. "Slovenian Web Archive"
  elseif mw.ustring.find( host, "stanford.edu", 1, true ) then
    ulx.url1.tail = " at the " .. "[[Stanford University Libraries|Stanford Web Archive]]"
  elseif mw.ustring.find( host, "nationalarchives.gov.uk", 1, true ) then
    ulx.url1.tail = " at the " .. bracketopen .. "UK Government Web Archive" .. bracketclose
  elseif mw.ustring.find( host, "parliament.uk", 1, true ) then
    ulx.url1.tail = " at the " .. bracketopen .. "UK Parliament's Web Archive" .. bracketclose
  elseif mw.ustring.find( host, "nlb.gov.sg", 1, true ) then
    ulx.url1.tail = " at " .. "Web Archive Singapore" 
  elseif mw.ustring.find( host, "pandora.nla.gov.au", 1, true ) then
    ulx.url1.tail = " at " .. bracketopen .. "Pandora Archive" .. bracketclose 
  elseif mw.ustring.find( host, "perma.cc", 1, true ) then
    ulx.url1.tail = " at " .. bracketopen .. "Perma.cc" .. bracketclose
  elseif mw.ustring.find( host, "perma-archives.cc", 1, true ) then
    ulx.url1.tail = " at " .. bracketopen .. "Perma.cc" .. bracketclose
  elseif mw.ustring.find( host, "screenshots.com", 1, true ) then
    ulx.url1.tail = " at Screenshots" 
  elseif mw.ustring.find( host, "freezepage.com", 1, true ) then
    ulx.url1.tail = " at Freezepage" 
  elseif mw.ustring.find( host, "yorku.ca", 1, true ) then
    ulx.url1.tail = " at " .. "[[York University Libraries|York University Digital Library]]"
  elseif mw.ustring.find( host, "webcache.googleusercontent.com", 1, true ) then
    ulx.url1.tail = " at Google Cache" 
  elseif mw.ustring.find( host, "timetravel.mementoweb.org", 1, true ) then
    ulx.url1.tail = " at " .. bracketopen .. "Memento Project" .. bracketclose
  elseif mw.ustring.find( host, "langzeitarchivierung.bib-bvb.de", 1, true ) then
    ulx.url1.tail = " at " .. bracketopen .. "Bavarian State Library" .. bracketclose
  elseif mw.ustring.find( host, "webrecorder.io", 1, true ) then
    ulx.url1.tail = " at " .. bracketopen .. "webrecorder.io" .. bracketclose
  else
    tracking = "Category:Webarchive template unknown archives"
  end

  track[tracking] = 1

end

--[[--------------------------&lt; parseExtraArgs &gt;-----------------------

     Parse numbered arguments starting at 2, such as url2..url10, date2..date10, title2..title10
       For example: {{webarchive |url=.. |url4=.. |url7=..}}
         Three url arguments not in numeric sequence (1..4..7). 
         Function only processes arguments numbered 2 or greater (in this case 4 and 7)
         It creates numeric sequenced table entries like:
           urlx.url2.url = &lt;argument value for url4&gt;
           urlx.url3.url = &lt;argument value for url7&gt;
       Returns the number of URL arguments found numbered 2 or greater (in this case returns "2")

 ]]

local function parseExtraArgs()

  local i, j, argurl, argurl2, argdate, argtitle

  j = 2
  for i = 2, maxurls do
    argurl = "url" .. i
    if trimArg(args[argurl]) then
      argurl2 = "url" .. j
      ulx[argurl2] = {}
      ulx[argurl2]["url"] = args[argurl]
      argdate = "date" .. j
      if trimArg(args[argdate]) then
        ulx[argurl2]["date"] = args[argdate]
      else
        ulx[argurl2]["date"] = inlineRed("[Date missing]", "warning")
      end
      argtitle = "title" .. j
      if trimArg(args[argtitle]) then
        ulx[argurl2]["title"] = args[argtitle]
      else
        ulx[argurl2]["title"] = nil
      end
      j = j + 1
    end
  end

  if j == 2 then
    return 0
  else
    return j - 2
  end

end

--[[--------------------------&lt; comma &gt;-----------------------

     Given a date string, return "," if it's MDY 

  ]]

local function comma(date)
  local N = mw.text.split(date, " ")
  local O = mw.text.split(N[1], "-") -- for ISO
  if O[1] == "index" then return "" end
  if not tonumber(O[1]) then
    return ","
  else
    return ""
  end
end

--[[--------------------------&lt; createTracking &gt;-----------------------

     Return data in track[] ie. tracking categories

  ]]

local function createTracking()

  local sand = ""
  if tableLength(track) &gt; 0 then                        
    for key,_ in pairs(track) do
      sand = sand .. "[[" .. key .. "]]"
    end
  end
  return sand

end

--[[--------------------------&lt; createRendering &gt;-----------------------

     Return a rendering of the data in ulx[][]

  ]]

local function createRendering()

    local sand, displayheader, displayfield

    local period1 = ""   -- For backwards compat with {{wayback}}
    local period2 = "."                                                            
  
    local indexstr = "archived"
    if ulx.url1.date == "index" then
      indexstr = "archive"
    end  
                                                                                          -- For {{wayback}}, {{webcite}}

    if ulx.url1.format == "none" then                                                     
      if not ulx.url1.title and not ulx.url1.date then                                    -- No title. No date
        sand = "[" .. ulx.url1.url .. " Archived]" .. ulx.url1.tail
      elseif not ulx.url1.title and ulx.url1.date then                                    -- No title. Date.
        if ulx.url1.service == "wayback" then 
          period1 = "."
          period2 = "" 
        end
        sand = "[" .. ulx.url1.url .. " Archived] " .. ulx.url1.date .. comma(ulx.url1.date) .. ulx.url1.tail .. period1
      elseif ulx.url1.title and not ulx.url1.date then                                    -- Title. No date.
        sand = "[" .. ulx.url1.url .. " " .. ulx.url1.title .. "]" .. ulx.url1.tail
      elseif ulx.url1.title and ulx.url1.date then                                        -- Title. Date.
        sand = "[" .. ulx.url1.url .. " " .. ulx.url1.title .. "]" .. ulx.url1.tail .. "&amp;#32;(" .. indexstr .. " " .. ulx.url1.date .. ")"
      else
        return nil
      end
      if ulx.url1.extraurls &gt; 0 then                                                      -- For multiple archive URLs
        local tot = ulx.url1.extraurls + 1
        sand = sand .. period2 .. " Additional archives: "
        for i=2,tot do
          local indx = "url" .. i
          if ulx[indx]["title"] then 
            displayfield = "title"
          else
            displayfield = "date"
          end
          sand = sand .. "[" .. ulx[indx]["url"] .. " " .. ulx[indx][displayfield] .. "]"
          if i == tot then
            sand = sand .. "."
          else
            sand = sand .. ", "
          end
        end
      else
        return sand  
      end
      return sand
                                                                                          -- For {{cite archives}}

    else                                                                  
      if ulx.url1.format == "addlarchives" then                           -- Multiple archive services 
        displayheader = "Additional archives: "
      else                                                                -- Multiple pages from the same archive 
        displayheader = "Additional pages archived&amp;nbsp;on " .. ulx.url1.date .. ": "
      end
      local tot = 1 + ulx.url1.extraurls
      local sand = displayheader
      for i=1,tot do
        local indx = "url" .. i
        displayfield = ulx[indx]["title"]
        if ulx.url1.format == "addlarchives" then
          if not displayfield then 
            displayfield = ulx[indx]["date"]
          end
        else
          if not displayfield then 
            displayfield = "Page " .. i
          end
        end
        sand = sand .. "[" .. ulx[indx]["url"] .. " " .. displayfield .. "]"
        if i == tot then
          sand = sand .. "."
        else
          sand = sand .. ", "
        end
      end
      return sand
    end
end

function p.webarchive(frame)
  args = frame.args
  if (args[1]==nil) and (args["url"]==nil) then           -- if no argument provided than check parent template/module args
    args = frame:getParent().args 
  end
 
  local tname = "Webarchive"                              -- name of calling template. Change if template rename.
  ulx = {}                                                -- Associative array to hold template data 
  track = {}                                              -- Associative array to hold tracking categories
  maxurls = 10                                            -- Max number of URLs allowed. 
  local verifydates = "yes"                               -- See documentation. Set "no" to disable.

                                                          -- URL argument (first)

  local url1 = trimArg(args.url) or trimArg(args.url1)           
  if not url1 then
    return inlineError("url", "Empty.") .. createTracking()
  end
  if mw.ustring.find( url1, "https://web.http", 1, true ) then    -- track bug 
    track["Category:Webarchive template errors"] = 1 
    return inlineError("url", "https://web.http") .. createTracking()
  end 
  if url1 == "https://web.archive.org/http:/" then                 -- track bug
    track["Category:Webarchive template errors"] = 1 
    return inlineError("url", "Invalid URL") .. createTracking()
  end

  ulx.url1 = {}
  ulx.url1.url = url1
  if not mw.ustring.find( mw.ustring.lower(url1), "^http") then
    if not mw.ustring.find( url1, "^//") then
      ulx.url1.url = "http://" .. url1
    end
  end
  local uri1 = mw.uri.new(ulx.url1.url)
  ulx.url1.host = uri1.host
  ulx.url1.extraurls = parseExtraArgs()

                                                          -- Nolink argument 

  local nolink = trimArg2(args.nolink)

  serviceName(uri1.host, nolink)

                                                          -- Date argument

  local date = trimArg(args.date) or trimArg(args.date1)
  if date == "*" and (ulx.url1.service == "wayback" or ulx.url1.service == "locwebarchives") then
    date = "index"
  elseif date and (ulx.url1.service == "wayback" or ulx.url1.service == "locwebarchives") and verifydates == "yes" then
    local ldf = dateFormat(date)
    if ldf then
      local udate = decodeWaybackDate( uri1.path, ldf )
      if udate ~= date then
        date = udate .. inlineRed("&lt;sup&gt;[Date mismatch]&lt;/sup&gt;", "warning")       
      end
    end
  elseif date and ulx.url1.service == "webcite" and verifydates == "yes" then 
    local ldf = dateFormat(date)
    if ldf then
      local udate = decodeWebciteDate( uri1.path, ldf )
      if udate == "query" then -- skip
      elseif udate ~= date then
        date = udate .. inlineRed("&lt;sup&gt;[Date mismatch]&lt;/sup&gt;", "warning")      
      end
    end
  elseif date and ulx.url1.service == "archiveis" and verifydates == "yes" then 
     local ldf = dateFormat(date)
     if ldf then
        local udate = decodeArchiveisDate( uri1.path, ldf )
        if udate == "short link" then -- skip
        elseif udate ~= date then
           date = udate .. inlineRed("&lt;sup&gt;[Date mismatch]&lt;/sup&gt;", "warning")      
        end
     end
  elseif not date and (ulx.url1.service == "wayback" or ulx.url1.service == "locwebarchives") then
    date = decodeWaybackDate( uri1.path, "iso" )
    if not date then 
      date = inlineRed("[Date error] (1)", "error") 
    end
  elseif not date and ulx.url1.service == "webcite" then
    date = decodeWebciteDate( uri1.path, "iso" )
    if date == "query" then
      date = inlineRed("[Date missing]", "warning")
    elseif not date then 
      date = inlineRed("[Date error] (1)", "error")
    end
  elseif not date and ulx.url1.service == "archiveis" then
     date = decodeArchiveisDate( uri1.path, "iso" )
     if date == "short link" then
        date = inlineRed("[Date missing]", "warning")
     elseif not date then 
        date = inlineRed("[Date error] (1)", "error")
     end
  elseif not date then
    date = inlineRed("[Date missing]", "warning")
  end
  ulx.url1.date = date

                                                          -- Format argument 

  local format = trimArg(args.format)
  if not format then
    format = "none"
  else
    if format == "addlpages" then
      if not ulx.url1.date then
        format = "none"
      end
    elseif format == "addlarchives" then
      format = "addlarchives"
    else
      format = "none"
    end
  end
  ulx.url1.format = format

                                                          -- Title argument 

  local title = trimArg(args.title) or trimArg(args.title1)
  ulx.url1.title = title
  

  local rend = createRendering()
  if not rend then
    rend = '&lt;span style="font-size:100%" class="error citation-comment"&gt;Error in [[:Template:' .. tname .. ']]: Unknown problem. Please report on template talk page.&lt;/span&gt;'
    track["Category:Webarchive template errors"] = 1 
  end

  return rend .. createTracking()

end

return p</text>
      <sha1>e6jdlnhjofiw0frrb9s28agz7tdtrwn</sha1>
    </revision>
  </page>
  <page>
    <title>Module:WikidataCheck</title>
    <ns>828</ns>
    <id>39241021</id>
    <revision>
      <id>853060182</id>
      <parentid>853060167</parentid>
      <timestamp>2018-08-02T05:01:18Z</timestamp>
      <contributor>
        <username>Johnuniq</username>
        <id>6036800</id>
      </contributor>
      <comment>fix "Lua error in Module:WikidataCheck at line 35: attempt to index field 'datavalue' (a nil value)" at [[BattleTech]] due to missing value on Wikidata</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="1509">local p = {}

function p.wikidatacheck(frame)
	local pframe = frame:getParent()
	local config = frame.args -- the arguments passed BY the template, in the wikitext of the template itself
	local args = pframe.args -- the arguments passed TO the template, in the wikitext that transcludes the template

	local property = config.property
	local value = config.value or ""
	local catbase = config.category
	local namespaces = config.namespaces
	local ok = false -- one-way flag to check if we're in a good namespace
	local ns = mw.title.getCurrentTitle().namespace
	for v in mw.text.gsplit( namespaces, ",", true) do
		if tonumber(v) == ns then
			ok = true
		end
	end
	if not ok then -- not in one of the approved namespaces
		return ""
	end
	local entity = mw.wikibase.getEntityObject()
	if not entity then -- no Wikidata item
		return "[[Category:" .. catbase .. " not in Wikidata]]"
	end
	if value == "" then
		return nil -- Using Wikidata
	end
	local claims = entity.claims or {}
	local hasProp = claims[property]
	if not hasProp then -- no claim of that property
		return "[[Category:" .. catbase .. " not in Wikidata]]" -- bad. Bot needs to add the property
	end
	for i, v in ipairs(hasProp) do -- Now we try to iterate over all possible values?
		propValue = (v.mainsnak.datavalue or {}).value
		if propValue == value then
			return "[[Category:" .. catbase .. " same as Wikidata]]" -- yay!
		end
	end
	return "[[Category:" .. catbase .. " different from Wikidata]]" -- needs human review :(
end

return p</text>
      <sha1>cba1j8m7jqww0ahq6nvymnccnvgv0uw</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Yesno</title>
    <ns>828</ns>
    <id>38665046</id>
    <revision>
      <id>828075573</id>
      <parentid>659459801</parentid>
      <timestamp>2018-02-28T12:14:32Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>+support for on/off</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="745">-- Function allowing for consistent treatment of boolean-like wikitext input.
-- It works similarly to the template {{yesno}}.

return function (val, default)
	-- If your wiki uses non-ascii characters for any of "yes", "no", etc., you
	-- should replace "val:lower()" with "mw.ustring.lower(val)" in the
	-- following line.
	val = type(val) == 'string' and val:lower() or val
	if val == nil then
		return nil
	elseif val == true 
		or val == 'yes'
		or val == 'y'
		or val == 'true'
		or val == 't'
		or val == 'on'
		or tonumber(val) == 1
	then
		return true
	elseif val == false
		or val == 'no'
		or val == 'n'
		or val == 'false'
		or val == 'f'
		or val == 'off'
		or tonumber(val) == 0
	then
		return false
	else
		return default
	end
end</text>
      <sha1>swdskn7svew8i9wuydn9uj5l3r2ghcs</sha1>
    </revision>
  </page>
</mediawiki>
